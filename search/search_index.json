{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bevezet\u0151","text":""},{"location":"#java","title":"Java","text":"<p>A Java sokoldal\u00fas\u00e1g\u00e1nak \u00e9s kompatibilit\u00e1s\u00e1nak k\u00f6sz\u00f6nhet\u0151en a legn\u00e9pszer\u0171bb programoz\u00e1si nyelvek k\u00f6z\u00e9 tartozik. Sz\u00e9les k\u00f6rben haszn\u00e1lj\u00e1k szoftverfejleszt\u00e9shez, mobil alkalmaz\u00e1sokhoz \u00e9s nagyobb rendszerek fejleszt\u00e9s\u00e9hez.</p> <p>A Java 1995-ben sz\u00fcletett, \u00e9s az Oracle tartja karban. Annak ellen\u00e9re, hogy nem olyan fiatal, mint n\u00e9h\u00e1ny friss nyelv, a Java m\u00e9g mindig nagyon n\u00e9pszer\u0171. \u00dagy tervezt\u00e9k, hogy gyors, biztons\u00e1gos, megb\u00edzhat\u00f3, kezd\u0151bar\u00e1t \u00e9s rendk\u00edv\u00fcl hordozhat\u00f3 legyen. Ez a hordozhat\u00f3s\u00e1gi el\u0151ny az\u00e9rt l\u00e9tezik, mert a Java egy t\u00f6bbplatformos Java virtu\u00e1lis g\u00e9pen \u2013 JVM \u2013 fut. Az Android-alkalmaz\u00e1sok is Java haszn\u00e1lat\u00e1val k\u00e9sz\u00fclnek, mivel az Android oper\u00e1ci\u00f3s rendszer Java nyelvi k\u00f6rnyezetben fut.</p>"},{"location":"cheat_sheat/","title":"Hasznos lehet","text":""},{"location":"feladatok/","title":"Gyakorl\u00f3 feladatok","text":""},{"location":"feladatok/#oop","title":"OOP","text":""},{"location":"feladatok/#oop-oroklodes","title":"OOP \u00f6r\u00f6kl\u0151d\u00e9s","text":"<p>K\u00e9sz\u00edts egy <code>Vehicle</code> oszt\u00e1lyt <code>String</code> manufacturer, <code>String</code> model \u00e9s <code>int</code> year attrib\u00fatumokkal. Minden adattag legyen priv\u00e1t. K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code> \u00e9s <code>toString</code> met\u00f3dust. K\u00e9sz\u00edts egy <code>Car</code> \u00e9s egy <code>Motorbike</code> oszt\u00e1lyt, ami a <code>Vehicle</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik. A <code>Car</code> oszt\u00e1lynak legyen egy <code>int</code> numberOfSeats adattagja egy param\u00e9teres konstruktora. A <code>Motorbike</code> oszt\u00e1lynak legyen egy <code>int</code> maxSpeed attrib\u00fatuma, aminek ellen\u0151rizd, hogy maximum 300 lehet az \u00e9rt\u00e9ke \u00e9s minimum 0. \u00cdrd fel\u00fcl a <code>toString</code> met\u00f3dusokat, hogy az extra adattagok is megjelenjenek.</p> <p>K\u00e9sz\u00edts egy <code>Shape</code> oszt\u00e1lyt <code>calculateArea</code> met\u00f3dussal ami egy <code>double</code> \u00e9rt\u00e9kkel t\u00e9r vissza. K\u00e9sz\u00edts egy <code>Circle</code> egy <code>Rectangle</code> \u00e9s egy <code>Triangle</code> oszt\u00e1lyt amelyek a <code>Shape</code> oszt\u00e1lyb\u00f3l sz\u00e1rmaznak. K\u00e9sz\u00edts param\u00e9teres konstruktort minden \u00faj oszt\u00e1lyhoz, amiben param\u00e9terben megkapja a sz\u00fcks\u00e9ges adatokat a ter\u00fclet kisz\u00e1m\u00edt\u00e1s\u00e1ra \u00e9s implement\u00e1ld minden oszt\u00e1lyban a <code>calculateArea</code> met\u00f3dust. K\u00e9sz\u00edts <code>toString</code> met\u00f3dust, amiben minden alakzat ki\u00edrja a t\u00edpus\u00e1t.</p> <p>Hozz l\u00e9tre egy Shape t\u00f6mb\u00f6t \u00e9s t\u00f6ltsd fel 3 <code>Circle</code>, 3 <code>Rectangle</code> \u00e9s 3 <code>Triangle</code> p\u00e9ld\u00e1nnyal. Egy <code>for</code> ciklussal j\u00e1rd be a t\u00f6mb\u00f6t \u00e9s h\u00edvd meg minden objektumon a <code>calculateArea</code> \u00e9s <code>toString</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>Stationery</code> oszt\u00e1lyt, ami egy irodai eszk\u00f6zt reprezent\u00e1l. K\u00e9sz\u00edts egy <code>Pencil</code>, <code>Pen</code> \u00e9s <code>Ruler</code> oszt\u00e1lyt, ami a <code>Stationery</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazzon.</p> <p>K\u00e9sz\u00edts egy <code>PencilCase</code> oszt\u00e1lyt ami egy tolltart\u00f3t reprezent\u00e1l. Az oszt\u00e1ly a param\u00e9teres <code>konstruktor\u00e1ban</code> v\u00e1rjon egy <code>int</code> size attrib\u00fatumot \u00e9s hozzon l\u00e9tre az oszt\u00e1lyon bel\u00fcl egy ekkora m\u00e9ret\u0171 <code>Stationery</code> t\u00f6mb\u00f6t. Az oszt\u00e1lynak legyen egy <code>addStationery</code> met\u00f3dusa, ami egy <code>Stationery</code> objektumot v\u00e1r \u00e9s ki\u00edrja a konzolra, hogy milyen t\u00edpus\u00fa objektum lett hozz\u00e1adva. Ezt az objektumot t\u00e1rold el a t\u00f6mbben. Ha m\u00e1r nem f\u00e9r bele a t\u00f6mbbe, akkor \u00edrd ki a konzolra, hogy a <code>A tolltart\u00f3 tele van!</code>. K\u00e9sz\u00edts tov\u00e1bb\u00e1 egy <code>listStationeries</code> met\u00f3dust, ami ki\u00edrja a konzolra, hogy h\u00e1ny darab <code>Pencil</code> , <code>Pen</code> \u00e9s <code>Ruler</code> objektum van elt\u00e1rolva.</p> <p>K\u00e9sz\u00edts egy <code>ElectronicDevice</code> oszt\u00e1lyt <code>String</code> brand \u00e9s <code>String</code> model attrib\u00fatumokkal. K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, <code>toString</code> \u00e9s <code>getter</code> met\u00f3dusokat az oszt\u00e1lyhoz. K\u00e9sz\u00edts egy <code>Television</code> \u00e9s egy <code>SmartPhone</code> oszt\u00e1lyt, ami az <code>ElectronicDevice</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik.</p> <p>A SmartPhone oszt\u00e1lynak legyen m\u00e9g egy <code>int</code> storageCapacity adattagja a Television oszt\u00e1lynak pedig egy <code>double</code> diagonalWidth attrib\u00fatuma. K\u00e9sz\u00edts <code>getter</code> met\u00f3dusokat \u00e9s <code>konstruktort</code> az oszt\u00e1lyokhoz \u00e9s \u00edrd fel\u00fcl a <code>toString</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>SamsungShop</code> oszt\u00e1lyt, ami a param\u00e9teres <code>konstruktor\u00e1ban</code> v\u00e1rjon egy <code>int</code> size attrib\u00fatumot \u00e9s hozzon l\u00e9tre az oszt\u00e1lyon bel\u00fcl egy ekkora m\u00e9ret\u0171 <code>ElectronicDevice</code> t\u00f6mb\u00f6t. Az oszt\u00e1lynak legyen egy <code>addSamsungDevice</code> met\u00f3dusa, ami egy <code>ElectronicDevice</code> objektumot v\u00e1r \u00e9s ha a term\u00e9k brand v\u00e1ltoz\u00f3ja Samsung \u00e9rt\u00e9k\u0171, akkor ki\u00edrja a konzolra, hogy milyen t\u00edpus\u00fa objektum lett hozz\u00e1adva \u00e9s elt\u00e1rolja a t\u00f6mbben. Ha a t\u00f6mbben nincs, t\u00f6bb hely, akkor kezd el\u0151r\u0151l a t\u00f6mb felt\u00f6lt\u00e9s\u00e9t, vagyis \u00edrd fel\u00fcl a legkor\u00e1bban hozz\u00e1adott objektumot az \u00fajjal.</p> <p>Az al\u00e1bbi <code>RealEstate</code> oszt\u00e1llyal fogunk dolgozni.</p> <pre><code>public class RealEstate {\nprivate final double area;\nprivate final int numberOfRooms;\npublic RealEstate(double area, int numberOfRooms) {\nthis.area = area;\nthis.numberOfRooms = numberOfRooms;\n}\npublic double getArea() {\nreturn area;\n}\npublic int getNumberOfRooms() {\nreturn numberOfRooms;\n}\n}\n</code></pre> <p>Implement\u00e1ld a <code>toString</code> met\u00f3dust az oszt\u00e1lyhoz.</p> <p>K\u00e9sz\u00edts egy <code>Flat</code> oszt\u00e1lyt, ami a <code>RealEstate</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik \u00e9s b\u0151v\u00edtsd ki a <code>boolean</code> balcony, \u00e9s <code>int</code> level adattagokkal. K\u00e9sz\u00edts hozz\u00e1 param\u00e9teres konstruktort \u00e9s getter met\u00f3dust az \u00faj adattagokhoz. \u00cdrd fel\u00fcl a toString met\u00f3dust, hogy az \u00faj attrib\u00fatumokat is figyelembe vegye.</p> <p>K\u00e9sz\u00edts egy <code>House</code> oszt\u00e1lyt, ami a <code>RealEstate</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik \u00e9s b\u0151v\u00edtsd ki a <code>boolean</code> pool, \u00e9s <code>double</code> gardenArea adattagokkal. K\u00e9sz\u00edts hozz\u00e1 param\u00e9teres konstruktort \u00e9s getter met\u00f3dust az \u00faj adattagokhoz. \u00cdrd fel\u00fcl a toString met\u00f3dust, hogy az \u00faj attrib\u00fatumokat is figyelembe vegye.</p> <p>K\u00e9sz\u00edts egy <code>Meat</code> oszt\u00e1lyt, aminek egy <code>final</code> <code>String</code> meatType param\u00e9tere van. K\u00e9sz\u00edts param\u00e9teres konstruktort, gettert \u00e9s val\u00f3s\u00edtsd meg a <code>toString</code> \u00e9s <code>equals</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>Bread</code> oszt\u00e1lyt, aminek egy <code>final</code> <code>String</code> breadType param\u00e9tere van. K\u00e9sz\u00edts param\u00e9teres konstruktort, gettert \u00e9s val\u00f3s\u00edtsd meg a <code>toString</code> \u00e9s <code>equals</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>Cheese</code> oszt\u00e1lyt, aminek egy <code>final</code> <code>String</code> cheeseType param\u00e9tere van. K\u00e9sz\u00edts param\u00e9teres konstruktort, gettert \u00e9s val\u00f3s\u00edtsd meg a <code>toString</code> \u00e9s <code>equals</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>Hamburger</code> oszt\u00e1lyt az al\u00e1bbi attrib\u00fatumokkal</p> <ul> <li><code>Meat</code> - meat.</li> <li><code>Bread</code> - bread.</li> <li><code>Cheese</code> - cheese</li> </ul> <p>K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, amiben be\u00e1ll\u00edtod a param\u00e9tereket. K\u00e9sz\u00edts <code>getter - setter</code> \u00e9s <code>toString</code> met\u00f3dusokat az oszt\u00e1lyhoz.</p> <p>K\u00e9sz\u00edts egy <code>PremiumHamburger</code> oszt\u00e1lyt, ami a hamburgerb\u0151l sz\u00e1rmazik. A konstruktora ne v\u00e1rjon semmilyen param\u00e9tert, hanem te \u00e1ll\u00edtsd be az \u0151soszt\u00e1ly konstruktor\u00e1nak \u00e9rt\u00e9keit az al\u00e1bbi objektumokkal. A <code>Meat</code> param\u00e9tere egy olyan <code>Meat</code> objektum legyen aminek a meatType \u00e9rt\u00e9ke \"PremiumMeat\". A <code>Bread</code> param\u00e9tere egy olyan <code>Bread</code> objektum legyen aminek a breadType \u00e9rt\u00e9ke \"PremiumBread\". A <code>Cheese</code> param\u00e9tere egy olyan <code>Cheese</code> objektum legyen aminek a cheeseType \u00e9rt\u00e9ke \"PremiumCheese\".</p> <p>K\u00e9sz\u00edts egy <code>VeganMeat</code> oszt\u00e1lyt, ami a <code>Meat</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik.</p> <p>K\u00e9sz\u00edts egy <code>VeganHamburger</code> ami a <code>Hamburger</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik. Az oszt\u00e1ly konstruktora az \u0151soszt\u00e1ly konstruktor\u00e1hoz hasonl\u00f3an 3 param\u00e9tert v\u00e1rjon, azonban a <code>Meat</code> t\u00edpus helyett <code>VeganMeat</code> t\u00edpust v\u00e1rjon \u00e9s \u00edgy h\u00edvja tov\u00e1bb az \u0151soszt\u00e1ly konstruktor\u00e1t.</p> <p>K\u00e9sz\u00edts egy <code>OrderStatus</code> enumot az al\u00e1bbi lehets\u00e9ges \u00e9rt\u00e9kekkel. <code>ORDERED</code>, <code>READY</code>, <code>DELIVERED</code>. Az enumnak legyen egy <code>int</code> timeToDelivery adattagja, <code>ORDERED</code> eset\u00e9n 5, <code>READY</code> eset\u00e9n 2, <code>DELIVERED</code> eset\u00e9n pedig 0.</p> <p>K\u00e9sz\u00edts egy <code>Order</code> oszt\u00e1lyt, az al\u00e1bbi attrib\u00fatumokkal:</p> <ul> <li><code>int</code> orderId: Minden objektum eset\u00e9n legyen k\u00fcl\u00f6nb\u00f6z\u0151, 0-t\u00f3l indulva, minden \u00faj objektum 1-el nagyobb id-t kap.</li> <li><code>String</code> name: A rendel\u00e9s neve</li> <li><code>OrderStatus</code> orderStatus: A rendel\u00e9s \u00e1llapota.</li> <li><code>String</code> logisticCompany: A fut\u00e1rszolg\u00e1lat aki a csomagot kezeli</li> </ul> <p>K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, <code>toString</code> \u00e9s <code>getter</code>-<code>setter</code> met\u00f3dusokat azokhoz a v\u00e1ltoz\u00f3khoz, amelyekhez sz\u00fcks\u00e9ges. K\u00e9sz\u00edts egy <code>getTimeToDelivery</code> met\u00f3dust, ami t\u00e9rjen vissza az orderStatus timeToDelivery \u00e9rt\u00e9k\u00e9vel.</p> <p>K\u00e9sz\u00edts egy <code>GLSOrder</code> \u00e9s egy <code>DHLOrder</code> oszt\u00e1lyt ami az <code>Order</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik.</p> <p>A <code>GLSOrder</code> minden objektum\u00e1nak a logisticCompany v\u00e1ltoz\u00f3ja legyen GLS. Ezen fel\u00fcl, legyen egy extra attrib\u00fatuma, <code>String</code> carrierPhoneNumber, ami a fut\u00e1r telefonsz\u00e1m\u00e1t t\u00e1rolja, <code>konstruktor</code> param\u00e9terb\u0151l kapja ezt az \u00e9rt\u00e9ket. K\u00e9sz\u00edtsd el a megfelel\u0151 <code>toString</code> \u00e9s <code>getter</code>-<code>setter</code> met\u00f3dusokat.</p> <p>A <code>DHLOrder</code> minden objektum\u00e1nak a logisticCompany v\u00e1ltoz\u00f3ja legyen DHL. \u00cdrd fel\u00fcl a <code>getTimeToDelivery</code> met\u00f3dust, az alap \u00e9rt\u00e9khez adjon hozz\u00e1 2 napot minden esetben, ha az null\u00e1t\u00f3l k\u00fcl\u00f6nb\u00f6z\u0151 \u00e9rt\u00e9k\u0171.</p> <p>Feladatod egy egyszer\u0171s\u00edtett K\u00f6nyvt\u00e1rkezel\u0151 Rendszer l\u00e9trehoz\u00e1sa Java nyelven. A rendszernek t\u00e1mogatnia kell k\u00e9t t\u00edpus\u00fa elemet: K\u00f6nyveket \u00e9s DVD-ket. Minden elemnek van egy c\u00edme, szerz\u0151je (k\u00f6nyvek eset\u00e9n) vagy rendez\u0151je (DVD-k eset\u00e9n), valamint egy egyedi azonos\u00edt\u00f3sz\u00e1ma. Val\u00f3s\u00edtsd meg a rendszert oszt\u00e1lyok \u00e9s enumok seg\u00edts\u00e9g\u00e9vel.</p> <p>A feladatod a k\u00f6vetkez\u0151 oszt\u00e1lyok l\u00e9trehoz\u00e1sa:</p> <p><code>Item</code>: Ez az alaposzt\u00e1ly mind a k\u00f6nyvek, mind a DVD-k sz\u00e1m\u00e1ra. Az al\u00e1bbi attrib\u00fatumokkal kell rendelkeznie:</p> <ul> <li><code>int</code> id (egyedi azonos\u00edt\u00f3sz\u00e1m minden elemhez)</li> <li><code>String</code> title (c\u00edm)</li> <li>Egy <code>ItemType</code> enum, ami a BOOK \u00e9s a DVD \u00e9rt\u00e9keket veheti fel.</li> </ul> <p>Emellett egy konstruktornak kell inicializ\u00e1lnia ezeket az attrib\u00fatumokat, \u00e9s megfelel\u0151 gettereket \u00e9s settereket.</p> <p><code>Book</code>: Ez az oszt\u00e1ly \u00f6r\u00f6kl\u0151dik az <code>Item</code> oszt\u00e1lyb\u00f3l. Egy tov\u00e1bbi attrib\u00fatummal kell rendelkeznie:</p> <ul> <li><code>String</code> author (szerz\u0151)</li> </ul> <p><code>DVD</code>: Ez az oszt\u00e1ly \u00f6r\u00f6kl\u0151dik az <code>Item</code> oszt\u00e1lyb\u00f3l. Egy tov\u00e1bbi attrib\u00fatummal kell rendelkeznie:</p> <ul> <li><code>String</code> director (rendez\u0151)</li> </ul> <p><code>Library</code>: Ez az oszt\u00e1ly k\u00e9pviseli mag\u00e1t a k\u00f6nyvt\u00e1rat. A k\u00f6vetkez\u0151 met\u00f3dusokat kell tartalmaznia:</p> <ul> <li>void <code>addItem(Item item)</code> - Hozz\u00e1ad egy elemet a k\u00f6nyvt\u00e1r gy\u0171jtem\u00e9ny\u00e9hez.</li> <li>void <code>displayItems()</code> - Megjelen\u00edti az \u00f6sszes elem inform\u00e1ci\u00f3j\u00e1t a k\u00f6nyvt\u00e1rban.</li> <li>Item <code>findItemById(int id)</code> - Megkeres \u00e9s visszaad egy elemet azonos\u00edt\u00f3ja alapj\u00e1n.</li> </ul> <p>Feladatod egy Online V\u00e1s\u00e1rl\u00e1si Rendszer tervez\u00e9se Java nyelven. A rendszernek t\u00e1mogatnia kell k\u00fcl\u00f6nb\u00f6z\u0151 t\u00edpus\u00fa term\u00e9keket: Elektronikai cikkeket \u00e9s Ruh\u00e1zatot. Minden term\u00e9knek van egy n\u00e9v, \u00e1r \u00e9s egy egyedi azonos\u00edt\u00f3sz\u00e1ma. Ezenk\u00edv\u00fcl minden term\u00e9k rendelkezhet specifikus tulajdons\u00e1gokkal.</p> <p>A feladatod a k\u00f6vetkez\u0151 oszt\u00e1lyok \u00e9s interf\u00e9szek l\u00e9trehoz\u00e1sa:</p> <p><code>Product</code>: Ez az alaposzt\u00e1ly mind az elektronikai cikkek, mind a ruh\u00e1zati term\u00e9kek sz\u00e1m\u00e1ra. Az al\u00e1bbi attrib\u00fatumokkal kell rendelkeznie:</p> <ul> <li><code>int</code> id (egyedi azonos\u00edt\u00f3sz\u00e1m minden term\u00e9khez)</li> <li><code>String</code> name (n\u00e9v)</li> <li><code>double</code> price (\u00e1r)</li> </ul> <p><code>Electronics</code>: Ez az oszt\u00e1ly \u00f6r\u00f6kl\u0151dik a <code>Product</code> oszt\u00e1lyb\u00f3l. Egy tov\u00e1bbi attrib\u00fatummal kell rendelkeznie:</p> <ul> <li><code>String</code> brand (m\u00e1rka)</li> </ul> <p><code>Clothing</code>: Ez az oszt\u00e1ly \u00f6r\u00f6kl\u0151dik a <code>Product</code> oszt\u00e1lyb\u00f3l. K\u00e9t tov\u00e1bbi attrib\u00fatummal kell rendelkeznie:</p> <ul> <li><code>String</code> size (m\u00e9ret)</li> <li><code>String</code> material (anyag)</li> </ul> <p><code>Review</code> Ez az oszt\u00e1ly a k\u00f6vetkez\u0151 adattagokat \u00e9s met\u00f3dusokat tartalmazza.</p> <ul> <li><code>String</code> review (v\u00e9lem\u00e9ny)</li> <li><code>int</code> rating (pontoz\u00e1s), csak 1 \u00e9s 5 k\u00f6z\u00f6tt vehet fel \u00e9rt\u00e9keket.</li> </ul> <p>A <code>Product</code> oszt\u00e1ly eg\u00e9sz\u00edtsd ki az al\u00e1bbi met\u00f3dusokkal \u00e9s attrib\u00fatumokkal.</p> <ul> <li><code>Review[]</code> reviews: A v\u00e9lem\u00e9nyek t\u00e1rol\u00e1s\u00e1ra haszn\u00e1lt t\u00f6mb.</li> <li>void <code>addReview(String review, int rating)</code> - Hozz\u00e1ad egy \u00e9rt\u00e9kel\u00e9st a term\u00e9khez.</li> <li>double <code>getAverageRating()</code> - Kisz\u00e1m\u00edtja \u00e9s visszaadja az \u00e1tlagos \u00e9rt\u00e9kel\u00e9st az \u00e9rt\u00e9kel\u00e9sek alapj\u00e1n.</li> </ul>"},{"location":"java_se_1/","title":"Java alapok","text":""},{"location":"java_se_1/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a feladatsorban a java programoz\u00e1s alapjaival fogsz megismerdezni. Elsaj\u00e1t\u00edtjuk a v\u00e1ltoz\u00f3k kezel\u00e9s\u00e9t, megismerked\u00fcnk a m\u0171veletek \u00edr\u00e1s\u00e1val \u00e9s a line\u00e1ris programoz\u00e1s els\u0151 l\u00e9p\u00e9sivel. A feladatok elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ged lesz egy telep\u00edtett fejleszt\u0151 k\u00f6rnyezetre \u00e9s egy be\u00e1ll\u00edtott Java JDK-ra.</p>"},{"location":"java_se_1/#valtozok","title":"V\u00e1ltoz\u00f3k","text":"<p>Ebben a r\u00e9szben a programoz\u00e1s egyik legalapvet\u0151bb koncepci\u00f3j\u00e1val fogunk megismerkedni, a v\u00e1ltoz\u00f3kkal. Megtanuljuk l\u00e9trehozni, m\u00f3dos\u00edtani \u00e9s a m\u0171veleteink sor\u00e1n felhaszn\u00e1lni \u00e9s megjelent\u00edteni \u0151ket.</p>"},{"location":"java_se_1/#adattipusok","title":"Adatt\u00edpusok","text":"<p>A Java nyelvben m\u00e1s nyelvekkel ellent\u00e9tben k\u00f6telez\u0151 minden v\u00e1ltoz\u00f3nknak meghat\u00e1rozni az adatt\u00edpus\u00e1t. A rengeget be\u00e9p\u00edtett adatt\u00edpuson t\u00fal, amit a Java t\u00e1mogat lehet\u0151s\u00e9g\u00fcnk van saj\u00e1t adatt\u00edpusok l\u00e9trehoz\u00e1s\u00e1ra is, de egyel\u0151re a be\u00e9p\u00edtett alapvet\u0151 adatt\u00edpusokkal ismerked\u00fcnk meg.</p> Adatt\u00edpus M\u00e9ret Alap\u00e9rt\u00e9k P\u00e9lda \u00e9rt\u00e9kek \u00c9rt\u00e9ktartom\u00e1ny byte 1 byte 0 1, 18 -128 \u2013 127 short 2 byte 0 -13, 24 -32768 \u2013 32767 int 4 byte 0 141 -2147483648 \u2013 2147483647 long 8 byte 0 14155511 -9223372036854775808 \u2013   9223372036854775807 float 4 byte 0.0 1.4 T\u00f6rt sz\u00e1mok, 6-7 tizedes jegy   pontoss\u00e1ggal double 8 byte 0.0 1.8 T\u00f6rt sz\u00e1mok, 15 tizedes jegy   pontoss\u00e1ggal boolean 1 bit false true, false Igaz vagy Hamis char 2 byte '\\u0000' 'c', 'a' Egy karakter az ASCII t\u00e1bl\u00e1b\u00f3l String - null \"Hello\" Sz\u00f6veg"},{"location":"java_se_1/#valtozok-letrehozasa","title":"V\u00e1ltoz\u00f3k l\u00e9trehoz\u00e1sa","text":"<p>Egy v\u00e1ltoz\u00f3 l\u00e9trehoz\u00e1sa jellemz\u0151en k\u00e9t r\u00e9szb\u0151l \u00e1ll, egy deklar\u00e1ci\u00f3b\u00f3l \u00e9s egy inicializ\u00e1l\u00e1sb\u00f3l. A deklar\u00e1ci\u00f3 l\u00e9trehoz egy \u00fcres v\u00e1ltoz\u00f3t a megadott n\u00e9vvel, az inicializ\u00e1ci\u00f3 pedig megadja a v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9t.</p> <pre><code>int i=12;\n</code></pre> <p>Egy <code>int</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3 l\u00e9trehoz\u00e1sa <code>i</code> n\u00e9ven \u00e9s a v\u00e1lt\u00f3z\u00f3 \u00e9rt\u00e9k\u00e9nek be\u00e1ll\u00edt\u00e1sa 12-re.</p> <pre><code>double d=6.5;\n</code></pre> <p>Egy <code>double</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3 l\u00e9trehoz\u00e1sa <code>d</code> n\u00e9ven \u00e9s a v\u00e1lt\u00f3z\u00f3 \u00e9rt\u00e9k\u00e9nek be\u00e1ll\u00edt\u00e1sa 6.5-re.</p> <pre><code>String s=\"Hello World!\";\n</code></pre> <p>Egy <code>String</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3 l\u00e9trehoz\u00e1sa <code>s</code> n\u00e9ven \u00e9s a v\u00e1lt\u00f3z\u00f3 \u00e9rt\u00e9k\u00e9nek be\u00e1ll\u00edt\u00e1sa a Hello World! sz\u00f6vegre.</p>"},{"location":"java_se_1/#valtozok-ertekenek-modositasa","title":"V\u00e1ltoz\u00f3k \u00e9rt\u00e9k\u00e9nek m\u00f3dos\u00edt\u00e1sa","text":"<p>Egy v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9t a l\u00e9trehoz\u00e1sa ut\u00e1n m\u00f3dos\u00edthatjuk, de a t\u00edpus\u00e1t nem v\u00e1ltoztathatjuk meg. A v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9nek megv\u00e1ltoztat\u00e1s\u00e1hoz m\u00e1r nem kell az adatt\u00edpust \u00fajb\u00f3l megadni.</p> <pre><code>int i=12\ni=5\n</code></pre> <p>A kor\u00e1bban l\u00e9trehozott <code>i</code> v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9t 12-r\u0151l 5-re m\u00f3dos\u00edtjuk.</p> <pre><code>boolean b=false;\nb=true;\n</code></pre> <p>A kor\u00e1bban l\u00e9trehozott <code>b</code> v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9t hamisr\u00f3l igazra m\u00f3dos\u00edtjuk.</p>"},{"location":"java_se_1/#gyakorlo-feladatok","title":"Gyakorl\u00f3 feladatok","text":""},{"location":"java_se_1/#1-feladat","title":"1. Feladat","text":"<p>Hozz l\u00e9tre egy v\u00e1ltoz\u00f3t minden adatt\u00edpusb\u00f3l.</p>"},{"location":"java_se_1/#2-feladat","title":"2. Feladat","text":"<p>N\u00e9zd meg mi t\u00f6rt\u00e9nik ha:</p> <ul> <li>deklar\u00e1lsz egy \u00e9rt\u00e9ket, de nem inicializ\u00e1lod?</li> <li>olyan \u00e9rt\u00e9ket adsz meg egy v\u00e1ltoz\u00f3nak, ami m\u00e1s t\u00edpushoz tartozik?</li> <li><code>int</code> v\u00e1ltoz\u00f3ba egy nagyon nagy sz\u00e1mot (nagyobb mint 2147483647) mentesz?</li> </ul>"},{"location":"java_se_1/#operatorok","title":"Oper\u00e1torok","text":"<p>Ebben a fejezetben az alapvet\u0151 oper\u00e1torok haszn\u00e1lat\u00e1t t\u00e1rgyaljuk.</p>"},{"location":"java_se_1/#alap-operatorok","title":"Alap oper\u00e1torok","text":"Oper\u00e1tor Adatt\u00edpus M\u0171velet Haszn\u00e1lat = B\u00e1rmilyen t\u00edpus \u00c9rt\u00e9kad\u00e1s a = 5 + Sz\u00e1m/String \u00d6sszead\u00e1s/\u00d6sszef\u0171z\u00e9s a = 2 + 3 - Sz\u00e1m Kivon\u00e1s a = 5 \u2013 2 * Sz\u00e1m Szorz\u00e1s a = 2 * 2 / Sz\u00e1m Oszt\u00e1s a = 10 / 5 % Sz\u00e1m Marad\u00e9kk\u00e9pz\u00e9s a = 10 % 3 ! Boolean Neg\u00e1ci\u00f3 b = ! false &amp;&amp; Boolean Logikai \u00c9s true &amp;&amp; false || Boolean Logikai Vagy true || false == B\u00e1rmilyen t\u00edpus Egyenl\u0151s\u00e9g vizsg\u00e1lat 5 == 2 != B\u00e1rmilyen t\u00edpus Egyenl\u0151tlens\u00e9g vizsg\u00e1lat 5 != 2 &gt;, &gt;= Sz\u00e1m Nagyobb (egyenl\u0151) 5 &gt; 2 &lt;, &lt;= Sz\u00e1m Kisebb (egyenl\u0151) 5 &lt; 2 <p>A <code>==</code> egyenl\u0151s\u00e9g vizsg\u00e1l\u00f3 oper\u00e1tort kiz\u00e1r\u00f3lag primit\u00edv t\u00edpusokkal (pl. int, double, boolean) haszn\u00e1ljuk. Stringek \u00f6sszehasonl\u00edt\u00e1s\u00e1ra a <code>.equals()</code> f\u00fcggv\u00e9nyt haszn\u00e1ljuk. A <code>==</code> oper\u00e1tor ezeken a t\u00edpusokon a v\u00e1ltoz\u00f3 mem\u00f3riac\u00edm\u00e9t hasonl\u00edtja \u00f6ssze, \u00edgy csak akkor lesz igaz, ha a v\u00e1ltoz\u00f3t \u00f6nmag\u00e1val hasonl\u00edtjuk \u00f6ssze.</p> <pre><code>String s1=\" abcd \";\nString s2=\" abc \";\nboolean egyenloseg=s1.equals(s2);\nboolean egyenloseg2=s2.equals(s1);\n</code></pre> <p>A Stringek egyenl\u0151s\u00e9g\u00e9nek vizsg\u00e1lata a <code>.equals()</code> f\u00fcggv\u00e9nnyel.</p>"},{"location":"java_se_1/#operatorok-hasznalata","title":"Oper\u00e1torok haszn\u00e1lata","text":"<pre><code>double pi=3.14;\nint R=10;\ndouble terulet=pi*R*R;\nString eredmeny=\"A kor terulete \"+terulet+\" .\";\n</code></pre> <p>A k\u00f6r ter\u00fclet\u00e9nek kisz\u00e1m\u00edt\u00e1sa a megfelel\u0151 oper\u00e1torok haszn\u00e1lat\u00e1val.</p> <pre><code>int kor=22;\nboolean gyermek = kor &lt; 12;\nboolean serdulo = kor &gt;=12 &amp;&amp; kor &lt; 19;\nboolean felnott = kor &gt;=19 &amp;&amp; kor &lt; 60;\nboolean idos = kor &gt;= 60;\nboolean kotelezoSisak =! felnott;\nboolean kotelezoFelugyelet =! (felnott);\nboolean ingyenJegy = gyermek || idos;\n</code></pre> <p>Igazs\u00e1gi \u00e9rt\u00e9kek \u00f6sszehasonl\u00edt\u00e1sa oper\u00e1torokkal</p>"},{"location":"java_se_1/#gyakorlo-feladatok_1","title":"Gyakorl\u00f3 feladatok","text":""},{"location":"java_se_1/#1-feladat_1","title":"1. Feladat:","text":"<p>Minden oper\u00e1torral v\u00e9gezz legal\u00e1bb k\u00e9t m\u0171veletet. Tal\u00e1lj ki praktikus, val\u00f3s probl\u00e9m\u00e1kat amiket ezekkel az oper\u00e1torokkal lehet megoldani.</p>"},{"location":"java_se_1/#2-feladat_1","title":"2. Feladat:","text":"<p>N\u00e9zd meg mi t\u00f6rt\u00e9nik, ha:</p> <ul> <li>Stringet \u00f6sszef\u0171z\u00f6l egy m\u00e1sik, nem String v\u00e1ltoz\u00f3val?</li> <li>boolean oper\u00e1tort haszn\u00e1lsz int v\u00e1ltoz\u00f3kkal vagy ford\u00edtva?</li> <li>k\u00e9t \u00f6sszeadott int eredm\u00e9nye nagyobb mint 2147483647?</li> <li>int \u00e9s double v\u00e1ltoz\u00f3kkal vegyesen v\u00e9gzel m\u0171veleteket?</li> </ul>"},{"location":"java_se_1/#3-feladat","title":"3. Feladat:","text":"<p>A megfelel\u0151 oper\u00e1torok haszn\u00e1lat\u00e1val v\u00e9gezz marad\u00e9kos oszt\u00e1st. <pre><code>a = 20\nb = 4\nhanyados = ?\nmaradek = ?\n</code></pre></p>"},{"location":"java_se_1/#4-feladat","title":"4. Feladat:","text":"<p>Mi lesz a boolean B \u00e9rt\u00e9ke az al\u00e1bbi m\u0171veletek elv\u00e9gz\u00e9se ut\u00e1n?</p> <pre><code>int a = 4;\nint b = 3;\nboolean B = a &gt; b;\n</code></pre> <pre><code>int a = 4;\nint b = 3;\nboolean B = a &lt;= b || a != 3;\n</code></pre>"},{"location":"java_se_4_5/","title":"Konzol io","text":""},{"location":"java_se_4_5/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a r\u00f6vid fejezetben a konzol haszn\u00e1lat\u00e1val fogunk megismerkedni. Megtanuljuk, hogyan tudunk felhaszn\u00e1l\u00f3i bemenetet kiolvasni a konzolr\u00f3l \u00e9s hogy hogyan tudunk a konzolra ki\u00edrni az adatokat.</p>"},{"location":"java_se_4_5/#beolvasas-a-konzolrol","title":"Beolvas\u00e1s a konzolr\u00f3l","text":"<p>A konzolr\u00f3l val\u00f3 beolvas\u00e1shoz a <code>Scanner</code> oszt\u00e1lyt fogjuk haszn\u00e1lni, ami a <code>java.util</code> csomagban tal\u00e1lhat\u00f3.</p> <pre><code>Scanner scanner = new Scanner(System.in);\n</code></pre> <p>A beolvas\u00e1shoz l\u00e9tre kell hoznunk egy Scanner p\u00e9ld\u00e1nyt, aminek a konstuktora valamilyen <code>InputStream</code> objektumot v\u00e1r. A Scanner oszt\u00e1lyt f\u00e1ljokb\u00f3l t\u00f6rt\u00e9n\u0151 beolvas\u00e1shoz is haszn\u00e1lhatjuk, azonban egyel\u0151re csak a konzolr\u00f3l val\u00f3 olvas\u00e1ssal ismerked\u00fcnk meg. Ahhoz, hogy a konzolt el\u00e9rj\u00fck param\u00e9ternek a <code>System.in</code>-t adjuk meg, ezzel nyer\u00fcnk hozz\u00e1f\u00e9r\u00e9rt az konzol input streamj\u00e9hez.</p> <pre><code>String line = scanner.nextLine();\n</code></pre> <p>A konzolr\u00f3l val\u00f3 beolvas\u00e1s soronk\u00e9nt t\u00f6rt\u00e9nik, ha \u00edrunk valamit a konzolon az enter le\u00fct\u00e9s\u00e9ig egy sornak sz\u00e1m\u00edt. Egy teljes sor beolvas\u00e1s\u00e1hoz a <code>scanner.nextLine()</code> met\u00f3dust kell megh\u00edvnunk, ami a teljes sorral t\u00e9r vissza String k\u00e9nt.</p> <pre><code>String word = scanner.next(); </code></pre> <p>Lehet\u0151s\u00e9g\u00fcnk van a szavak egym\u00e1s ut\u00e1ni beolvas\u00e1s\u00e1ra is, ehhez a <code>scanner.next()</code> met\u00f3dust haszn\u00e1ljuk, \u00edgy a beolvas\u00e1s csak az els\u0151 elv\u00e1laszt\u00f3 karakterig fogja beolvasni a az inputunkat.</p> <pre><code>int age = scanner.nextInt();\ndouble height = scanner.nextDouble();\n</code></pre> <p>Ha valamilyen numerikus inputra sz\u00e1m\u00edtunk, akkor a Scanner oszt\u00e1ly ebben is seg\u00edts\u00e9get ny\u00fajt. Ha eg\u00e9sz sz\u00e1mot szeretn\u00e9nk beolvasni haszn\u00e1ljuk a <code>scanner.nextInt()</code> met\u00f3dust, lebeg\u0151pontos sz\u00e1mok eset\u00e9n pedig a <code>scanner.nextDouble()</code> lesz a seg\u00edts\u00e9g\u00fcnkre.</p> <pre><code>while (scanner.hasNextInt()) {\nint nmbr = scanner.nextInt();\n//...\n}\n</code></pre> <p>Ha be szeretn\u00e9nk olvasni valamit, de a konzolon nincs ilyen input, akkor hib\u00e1t kapunk \u00e9s a program m\u0171k\u00f6d\u00e9se le\u00e1llhat. A Scanner oszt\u00e1lynak, ez\u00e9rt vannak <code>scanner.hasNext_Prefix()</code> met\u00f3dusai, amik igazzal t\u00e9rnek vissza, ha a konzolr\u00f3l val\u00f3 beolvas\u00e1s lehets\u00e9ges. Az \u00f6sszes beolvas\u00f3 met\u00f3dushoz, van egy megfelel\u0151 ellen\u0151rz\u0151 met\u00f3dus is.</p>"},{"location":"java_se_4_5/#kiiratas-a-konzolra","title":"Ki\u00edrat\u00e1s a konzolra","text":"<p>A konzolra val\u00f3 ki\u00edrat\u00e1shoz a m\u00e1r ismert <code>System.out</code> oszt\u00e1lyt fogjuk haszn\u00e1lni. </p> <pre><code>System.out.println(\"Please enter your name and surname: \");\n</code></pre> <p>A <code>System.out.println</code> met\u00f3dussal teljes sorokat tudunk ki\u00edrni, vagy az \u00fczenet\u00fcnk v\u00e9g\u00e9n egy sort\u00f6r\u00e9s k\u00f6vetkezik.</p> <pre><code>System.out.print(\"Have a good\");\nSystem.out.print(\" one!\");\n</code></pre> <p>Ezzel szemben a <code>System.out.print</code> met\u00f3dus nem tesz sort\u00f6r\u00e9st az \u00fczenet\u00fcnk ut\u00e1n, azok foly\u00f3 sz\u00f6vegk\u00e9nt k\u00f6vetik egym\u00e1st.</p>"},{"location":"java_se_4_5/#gyakorlo-feladatok","title":"Gyakorl\u00f3 feladatok","text":""},{"location":"java_se_4_5/#1-feladat","title":"1. Feladat:","text":"<p>Keresd meg \u00e9s pr\u00f3b\u00e1ld ki az \u00f6sszes beolvas\u00f3 met\u00f3dust!</p>"},{"location":"java_se_4_5/#2-feladat","title":"2. Feladat:","text":"<p>Olvasd be a neved szavank\u00e9nt majd \u00edrd ki sord\u00edtott sorrendben a konzolra.</p>"},{"location":"java_se_4_5/#3-feladat","title":"3. Feladat:","text":"<p>K\u00e9sz\u00edts egy programot, ami beolvas a konzolr\u00f3l sz\u00e1mokat, majd ki\u00edrja ezeknek az \u00e1tlag\u00e1t. A program els\u0151 k\u00f6rben k\u00e9rje be a felhaszn\u00e1l\u00f3t\u00f3l, hogy h\u00e1ny sz\u00e1mot szeretne \u00e1tlagolni. Majd ut\u00e1na a felhaszn\u00e1l\u00f3nak egym\u00e1s ut\u00e1n meg kell adnia az n darab sz\u00e1mot. Ezut\u00e1n a program \u00edrja ki a sz\u00e1mot eg\u00e9sz\u00e9t lebeg\u0151 pontos alakban.</p>"},{"location":"java_se_4_5/#4-feladat","title":"4. Feladat:","text":"<p>\u00cdrj egy sz\u00e1mol\u00f3g\u00e9pet. A program elind\u00edt\u00e1sa ut\u00e1n k\u00e9rdezd meg milyen m\u0171veletet szeretne v\u00e9gezni a felhaszn\u00e1l\u00f3. (+, -, *, /) Ezut\u00e1n k\u00e9rj be k\u00e9t lebeg\u0151pontos sz\u00e1mot \u00e9s v\u00e9gezd el rajtuk a k\u00e9rt m\u0171veletet.</p>"},{"location":"java_se_4_5/#5-feladat","title":"5. Feladat:","text":"<p>\u00cdrj egy sz\u00e1mkital\u00e1l\u00f3s j\u00e1t\u00e9kot. A program gener\u00e1ljon random egy sz\u00e1mot (1-100) k\u00f6z\u00f6tt, majd a felhaszn\u00e1l\u00f3nak eg\u00e9sz sz\u00e1mokat  kell tippelni, am\u00edg el nem tal\u00e1lja a megadott sz\u00e1mot. A program adjon seg\u00edts\u00e9get, hogy a tippelt sz\u00e1m nagyobb vagy kisebb mint a kital\u00e1land\u00f3 sz\u00e1m.</p>"},{"location":"java_se_5/","title":"\u00d6r\u00f6kl\u0151d\u00e9s az objektum orient\u00e1lt programoz\u00e1sban","text":""},{"location":"java_se_5/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a szekci\u00f3ban az objektumorient\u00e1lt programoz\u00e1s egyik legfontosabb eszk\u00f6z\u00e9vel, az \u00f6r\u00f6kl\u0151d\u00e9ssel fogunk megismerkedni. Az \u00f6r\u00f6kl\u0151d\u00e9s seg\u00edts\u00e9g\u00e9vel a programunkban tov\u00e1bb tudjuk cs\u00f6kkenteni a k\u00f3d duplik\u00e1ci\u00f3t ez\u00e1ltal a programunk flexibilisebb, rendezettebb lesz. Az \u00f6r\u00f6kl\u0151d\u00e9s lehet\u0151v\u00e9 teszi sz\u00e1munkra, hogy a megl\u00e9v\u0151 funkcionalit\u00e1st kib\u0151v\u00edts\u00fck, illetve mi magunk is b\u0151v\u00edthet\u0151 k\u00f3dot hozzunk l\u00e9tre, ezzel megalapozva a komplex, modul\u00e1ris rendszerekben val\u00f3 munk\u00e1t</p>"},{"location":"java_se_5/#az-oroklodes-alapjai","title":"Az \u00f6r\u00f6kl\u0151d\u00e9s alapjai","text":"<p>Az \u00f6r\u00f6kl\u0151d\u00e9s az objektum orient\u00e1lt elm\u00e9letben azt jelenti, hogy az oszt\u00e1ly aloszt\u00e1lya lehet egy m\u00e1sik oszt\u00e1lynak. Az aloszt\u00e1ly meg\u00f6r\u00f6kli az sz\u00fcl\u0151 oszt\u00e1ly \u00f6sszes adattagj\u00e1t \u00e9s met\u00f3dus\u00e1t. Az \u00f6r\u00f6kl\u0151d\u00e9s teh\u00e1t t\u00edpus-alt\u00edpus k\u00f6z\u00f6tt van. J\u00e1rm\u00fa -\u00c1llat, \u00c1llat-H\u00e1zi\u00e1llat-Kutya, stb...</p>"},{"location":"java_se_5/#osztalyvaltozok-oroklese","title":"Oszt\u00e1lyv\u00e1ltoz\u00f3k \u00f6r\u00f6kl\u00e9se","text":"<p>A java nyelvben egy oszt\u00e1lynak t\u00f6bb aloszt\u00e1lya is lehet, de minden oszt\u00e1lynak csak egy \u0151soszt\u00e1lya van. Ez az \u00fagynevezett t\u00f6bbsz\u00f6r\u00f6s \u00f6r\u00f6kl\u0151d\u00e9s kik\u00fcsz\u00f6b\u00f6l\u00e9s\u00e9re van. Az \u00f6r\u00f6kl\u0151d\u00e9s felfoghat\u00f3 az \u0151szoszt\u00e1ly kib\u0151v\u00edt\u00e9sek\u00e9nt is, ez\u00e9rt haszn\u00e1lja a java az <code>extends</code> kulcssz\u00f3t az \u00f6r\u00f6kl\u0151d\u00e9s sor\u00e1n.</p> <pre><code>class Szamitogep {\nString gyarto;\nString modell;\nint processzorMagok;\nint memoria;\nint hattertar;\n}\n...\nclass Laptop extends Szamitogep {\nint tomeg;\nint akkumulatorKapacitas;\n}\n</code></pre> <p>A fenti p\u00e9ld\u00e1ban l\u00e9trehozott <code>Laptop</code> a <code>Szamitogep</code> oszt\u00e1lyt b\u0151v\u00edti ki, ami azt jelenti, hogy ebben a p\u00e9ld\u00e1ban, a <code>Szamitogep</code> az \u0151soszt\u00e1ly \u00e9s a <code>Laptop</code> a lesz\u00e1rmazott, vagy gyerek oszt\u00e1ly. A <code>Laptop</code> oszt\u00e1ly meg\u00f6r\u00f6kli, a <code>Szamitogep</code> oszt\u00e1ly \u00f6sszes attrib\u00fatum\u00e1t.</p>"},{"location":"java_se_5/#metodusok-oroklese","title":"Met\u00f3dusok \u00f6r\u00f6kl\u00e9se.","text":"<p>A kib\u0151v\u00edtett oszt\u00e1lyb\u00f3l nem csak oszt\u00e1ly v\u00e1ltoz\u00f3kat, hanem met\u00f3dusokat is \u00f6r\u00f6kl\u00fcnk, teh\u00e1t a lenti p\u00e9ld\u00e1ban, miut\u00e1n hozz\u00e1adtunk egy \u00faj <code>bekapcsol()</code> met\u00f3dust a <code>Szamitogep</code>, az automatikusan \u00f6r\u00f6kl\u0151dik a <code>Laptop</code> oszt\u00e1lyba, ahol azt majd minden p\u00e9ld\u00e1nyon meg lehet h\u00edvni, ugyan \u00fagy, mint ha eleve a <code>Laptop</code> oszt\u00e1lyban lett volna deklar\u00e1lva.</p> <pre><code>class Szamitogep {\n...\nvoid bekapcsol() {\nSystem.out.println(\" Betoltes ... \");\n}\n}\n...\nclass Laptop extends Szamitogep {\n}\n</code></pre>"},{"location":"java_se_5/#tobbszoros-oroklodes","title":"T\u00f6bbsz\u00f6r\u00f6s \u00f6r\u00f6kl\u0151d\u00e9s","text":"<p>Az\u00e9rt, mert egy oszt\u00e1ly egy m\u00e1sik oszt\u00e1ly aloszt\u00e1lya, att\u00f3l m\u00e9g bel\u0151le tov\u00e1bbi aloszt\u00e1lyok is l\u00e9trehozhat\u00f3ak.</p> <pre><code>class Szamitogep {\n...\n}\n...\nclass Laptop extends Szamitogep {\n...\n}\n...\nclass TwoInOne extends Laptop {\n...\n}\n</code></pre> <p>A fenti p\u00e9ld\u00e1ban l\u00e9trehozott <code>Laptop</code> a <code>Szamitogep</code> oszt\u00e1lyt \u00f6r\u00f6kl\u0151, ami azt jelenti, hogy a saj\u00e1t <code>tomeg</code> es <code>akkumulatorKapacitas</code> v\u00e1ltoz\u00f3i mellett \u00f6r\u00f6k\u00f6lte a <code>Szamitogep</code> oszt\u00e1ly \u00f6sszes v\u00e1ltoz\u00f3j\u00e1t is.</p>"},{"location":"java_se_5/#konstruktorok","title":"Konstruktorok","text":"<p>Ha a sz\u00fcl\u0151 oszt\u00e1ly konstruktor\u00e1nak vannak param\u00e9terei, akkor azokat a param\u00e9tereket az aloszt\u00e1lyban ki kell el\u00e9g\u00edteni. Erre a <code>super</code> kulcs sz\u00f3t haszn\u00e1ljuk, aminek seg\u00edts\u00e9g\u00e9vel a sz\u00fcl\u0151 oszt\u00e1ly konstruktor\u00e1t h\u00edvjuk meg. A lenti p\u00e9ld\u00e1ban a <code>Teglalap</code> oszt\u00e1ly konstruktora k\u00e9t param\u00e9tert k\u00e9r (<code>magassag</code>, <code>szelesseg</code>), igy a <code>Negyzet</code> aloszt\u00e1ly konstruktor\u00e1ban k\u00f6telez\u0151 ezt a k\u00e9t \u00e9rteket megadni. Mivel egy n\u00e9gyzet minden oldala egyenl\u0151 hossz\u00fa lesz, a <code>Negyzet</code> konstruktor\u00e1ban csak egy sz\u00e1mot k\u00e9r\u00fcnk be, es azt a sz\u00e1mot adjuk meg a <code>Teglalap</code> konstruktor mindk\u00e9t \u00e9rtek\u00e9nek.</p> <pre><code>class Teglalap {\nint a, b;\nTeglalap(int a, int b) {\nthis.a = a;\nthis.b = b;\n}\n}\n...\nclass Negyzet {\nNegyzet(int a) {\nsuper(a, a);\n}\n}\n</code></pre> <p>A k\u00f6vetkez\u0151 p\u00e9ld\u00e1ban az aloszt\u00e1ly nem kevesebb, hanem t\u00f6bb \u00e9rt\u00e9k\u00e9t k\u00e9r be mint a sz\u00fcl\u0151oszt\u00e1ly.</p> <pre><code>class Jarmu {\nString modell;\nint ev;\nJarmu(String modell, int ev) {\n...\n}\n}\n...\nclass Auto {\nString rendszam;\nint ajtok;\nAuto(String modell, int ev, String rendszam, int ajtok) {\nsuper(gyarto, modell, ev);\nthis.rendszam = rendszam;\nthis.ajtok = ajtok;\n}\n}\n</code></pre>"},{"location":"java_se_5/#hozzaferes-modositok","title":"Hozz\u00e1f\u00e9r\u00e9s m\u00f3dos\u00edt\u00f3k","text":"<p>Az el\u0151z\u0151 feladatsorban mar megismerkedt\u00fcnk k\u00e9t hozz\u00e1f\u00e9r\u00e9s m\u00f3dos\u00edt\u00f3val, a <code>private</code>-tal \u00e9s a \u201d<code>default</code>\u201d-tal. Mivel m\u00e1r tudjuk, mit jelent az, ha egy oszt\u00e1lynak egy m\u00e1sik oszt\u00e1ly aloszt\u00e1lya, igy \u00e9rtelmezhetj\u00fck a m\u00e1sik k\u00e9t hozz\u00e1f\u00e9r\u00e9s m\u00f3dos\u00edt\u00f3t is. A <code>protected</code> es a <code>public</code> kulcsszavakkal a v\u00e1ltoz\u00f3kat es met\u00f3dusokat el\u00e9rhet\u0151v\u00e9 tehetj\u00fck a csomagon k\u00edv\u00fclr\u0151l is, azonban a <code>protected</code> a hozz\u00e1f\u00e9r\u00e9st limit\u00e1lni fogja az oszt\u00e1lyunk aloszt\u00e1lyaira. A <code>private</code> elemek tov\u00e1bbra is az oszt\u00e1lyon bel\u00fcl lesznek csak el\u00e9rhet\u0151k, a csomagon bel\u00fcl lev\u0151 aloszt\u00e1lyok sem f\u00e9rhetnek hozza.</p> Kulcssz\u00f3 Oszt\u00e1lyon bel\u00fcl Csomagon bel\u00fcl b\u00e1rhonnan Csomagon k\u00edv\u00fcl aloszt\u00e1lyb\u00f3l Csomagon k\u00edv\u00fcl b\u00e1rhonnan private Igen Nem Nem Nem (nincs) Igen Igen Nem Nem protected Igen Igen Igen Nem public Igen Igen Igen Igen"},{"location":"java_se_5/#polimorfizmus","title":"Polimorfizmus","text":"<p>A polimorfizmus az objektum orient\u00e1lt programoz\u00e1s alapelveinek egyike, jelent\u00e9s\u00e9 pedig \u201dt\u00f6bb alak\u00fas\u00e1g\u201d. Akkor besz\u00e9l\u00fcnk polimorfizmusr\u00f3l, amikor egy t\u00edpus p\u00e9ld\u00e1nyai t\u00f6bb alakot is felvehetnek. Ennek a legk\u00e9zenfekv\u0151bb p\u00e9ld\u00e1ja az, amikor egy oszt\u00e1ly aloszt\u00e1lyai fel\u00fcl \u00edrjak a sz\u00fcl\u0151 oszt\u00e1ly met\u00f3dusait.</p> <pre><code>class A {\nvoid M() {\nSystem.out.println(\"A \");\n}\n}\n...\nclass B extends A {\nvoid M() {\nSystem.out.println(\"B \");\n}\n}\n...\nclass C extends A {\nvoid M() {\nSystem.out.println(\"C \");\n}\n}\n</code></pre> <p>Ha az <code>A</code> oszt\u00e1lyunkat kib\u0151v\u00edti a <code>B</code> \u00e9s <code>C</code> oszt\u00e1ly, akkor egy <code>A</code> t\u00edpussal deklar\u00e1lt v\u00e1ltoz\u00f3ba <code>B</code> \u00e9s <code>C</code> t\u00edpusokat is elhelyhet\u00fcnk.</p> <pre><code>A a=new A();\nA a2=new B();\nA a3=new C();\n</code></pre> <p>Ez azt jelenti, hogy bar mind a h\u00e1rom v\u00e1ltoz\u00f3nk <code>A</code> t\u00edpus\u00fa, mivel m\u00e1s oszt\u00e1lyok p\u00e9ld\u00e1nyai, az <code>M()</code> met\u00f3dus mind a h\u00e1rom p\u00e9ld\u00e1nyon m\u00e1st fog ki\u00edrni a konzolra.</p>"},{"location":"java_se_5/#override-annotacio","title":"@Override annot\u00e1ci\u00f3","text":"<p>Met\u00f3dusok fel\u00fcl \u00edr\u00e1sakor er\u0151sen aj\u00e1nlott az <code>@Override</code> annot\u00e1ci\u00f3 haszn\u00e1lata, amivel egy\u00e9rtelm\u0171en jelezz\u00fck a Java-nak, hogy a sz\u00fcl oszt\u00e1lyban lev\u0151 met\u00f3dus viselked\u00e9s\u00e9t fogjuk fel\u00fcl \u00edrni, de a ki- es bemeneteit nem. Ha azokat is fel\u00fclij\u00fck, p\u00e9ld\u00e1ul egy \u00faj param\u00e9tert adunk hozza az aloszt\u00e1lyban lev\u0151 met\u00f3dushoz, akkor az nem fogja fel\u00fcl \u00edrni a sz\u00fcl\u0151 oszt\u00e1ly met\u00f3dus\u00e1t, hanem \u00faj met\u00f3dusk\u00e9nt ad\u00f3dik hozza az aloszt\u00e1lyhoz. Egy <code>@Override</code> annot\u00e1ci\u00f3val megjel\u00f6lt met\u00f3dusn\u00e1l ebben az esetben mar futtat\u00e1s el\u00f6tt figyelmeztet\u00e9st fogunk kapni. Ha egy met\u00f3dust az annot\u00e1ci\u00f3 n\u00e9lk\u00fcl \u00edrunk fel\u00fcl, azt kitakar\u00e1snak vagy \u00e1rny\u00e9kol\u00e1snak h\u00edvhatjuk.</p> <pre><code>class C extends A {\n@Override\nvoid M() {\nSystem.out.println(\"C \");\n}\n}\n</code></pre>"},{"location":"java_se_5/#instaceof-operator","title":"Instaceof oper\u00e1tor","text":"<p>Az <code>instanceof</code> operator seg\u00edts\u00e9g\u00e9vel ellen\u0151rizheted, hogy egy v\u00e1ltoz\u00f3 egy bizonyos aloszt\u00e1ly\u00e1hoz tartoz\u00f3 objektumot tartalmaz-e. A lenti p\u00e9ld\u00e1ban az el\u0151z\u0151 <code>A</code>, <code>B</code>, <code>C</code> oszt\u00e1lyokra hivatkozunk.</p> <pre><code>A a=new B();\nif(a instanceof B){\nSystem.out.println(\" Ez egy B objektum\");\n}else if(a instanceof C){\nSystem.out.println(\" Ez egy C objektum\");\n}\n</code></pre> <p>Ha meggy\u0151z\u0151dt\u0151l r\u00f3la, hogy az objektumod egy bizonyos aloszt\u00e1lyhoz tartozik, azt biztons\u00e1gban konvert\u00e1lhatod az alt\u00edpusba, ezzel helyben el\u00e9rhet\u0151v\u00e9 t\u00e9ve az aloszt\u00e1ly saj\u00e1tos met\u00f3dusait, v\u00e1ltoz\u00f3it.</p> <pre><code>class A {\n// ures osztaly\n}\n...\nclass B extends A {\nvoid M() {\nSystem.out.println(\" En  egy B vagyok !\");\n}\n}\n...\nA a=new B();\nif(a instanceof B){\nB b=(B)a;\nb.M();\n}\n</code></pre>"},{"location":"java_se_5/#final-kulcsszo","title":"Final kulcssz\u00f3","text":"<p>Ha meg szeretned akad\u00e1lyozni, hogy az oszt\u00e1lyodnak aloszt\u00e1lyai j\u00f6hessenek l\u00e9tre, vagy egy met\u00f3dusod fel\u00fcl legyen \u00edrva egy aloszt\u00e1lyban, egy oszt\u00e1ly vagy met\u00f3dust ell\u00e1thatsz <code>final</code> kulcssz\u00f3val.</p> <pre><code>final class Szamologep() {\nvoid osszead(int a, int b) {\nreturn a + b;\n}\n}\n</code></pre> <pre><code> class Szamologep() {\nfinal void osszead(int a, int b) {\nreturn a + b;\n}\n}\n</code></pre>"},{"location":"java_se_5/#super-kulcsszo","title":"Super kulcssz\u00f3","text":"<p>A <code>super</code> kulcssz\u00f3 nem csak konstruktorokn\u00e1l haszn\u00e1latos, \u00e1ltal\u00e1noss\u00e1gban az oszt\u00e1ly sz\u00fcl\u0151 oszt\u00e1ly\u00e1ra mutat, a <code>this</code> -nek felel meg. Seg\u00edts\u00e9g\u00e9vel meg tudod h\u00edvni egy fel\u00fcli\u00e9rt met\u00f3dus eredeti verzi\u00f3j\u00e1t a sz\u00fcl\u0151 oszt\u00e1lyban. Az al\u00e1bbi p\u00e9ld\u00e1ban a <code>Zsiraf</code> oszt\u00e1ly ki b\u0151v\u00edti a bemutatkoz\u00e1s\u00e1t azzal, hogy megmondja a magass\u00e1g\u00e1t.</p> <pre><code>class Allat {\nString nev;\nint kor;\nString bemutatkozas() {\nreturn \"A nevem \" + nev + \" es \" + kor + \" eves vagyok \";\n}\n}\n...\nclass Zsiraf {\nint magassag;\n@Override\nString bemutatkozas() {\nreturn super.bemutatkozas() + \" A magassagom \"\n+ magassag + \" meter .\";\n}\n}\n</code></pre>"},{"location":"java_se_5/#object-osztaly","title":"Object oszt\u00e1ly","text":"<p>Ugyan ez sz\u00e1munkra nem l\u00e1that\u00f3, minden oszt\u00e1ly automatikusan ki b\u0151v\u00edti a <code>java.lang.Object oszt\u00e1lyt</code>. Ez az oszt\u00e1ly hierarchia cs\u00facsa, ami meghat\u00e1roz olyan met\u00f3dusokat, amit minden Java objektumnak k\u00f6telez\u0151 tartalmaznia, azonban ezeket az aloszt\u00e1lyokkal fel\u00fcl \u00edrhatjuk. Figyelmesen tanulm\u00e1nyozd az <code>Object</code> oszt\u00e1lyt es keresd meg az oszt\u00e1ly Java dokument\u00e1ci\u00f3j\u00e1t az interneten. Az <code>Object</code> \u0151soszt\u00e1lyb\u00f3l minden \u00e1ltalunk l\u00e9trehozott oszt\u00e1ly \u00f6r\u00f6k\u00f6l met\u00f3dusokat, amiket mi szabadon fel\u00fcl\u00edrhatunk ilyenek p\u00e9ld\u00e1ul a <code>toString()</code> \u00e9s az <code>equals()</code></p>"},{"location":"java_se_5/#tostring-metodus","title":"toString() met\u00f3dus","text":"<p>A <code>toString()</code> met\u00f3dus hat\u00e1rozza meg, hogy egy objektumot hogyan reprezent\u00e1lunk String alakban. Amikor fontos sz\u00e1munkra, hogy egy oszt\u00e1ly p\u00e9ld\u00e1nyait emberek szamara is \u00e9rthet\u0151en jelen\u00edts\u00fcnk meg, olyankor ezt a met\u00f3dust \u00edrjuk fel\u00fcl es String-kent adjuk vissza az objektumunk adatait, vagy b\u00e1rmit, amit a szitu\u00e1ci\u00f3 k\u00edv\u00e1n. Az alapvet\u0151 implement\u00e1ci\u00f3ja ennek a met\u00f3dusnak csak az objektum oszt\u00e1ly\u00e1t \u00e9s hash k\u00f3dj\u00e1t fogja visszaadni, p\u00e9ld\u00e1ul <code>Termek@1fee6fc</code>;</p>"},{"location":"java_se_5/#equals-metodus","title":"equals() met\u00f3dus","text":"<p>Az <code>equals()</code> met\u00f3dus hat\u00e1rozza meg, hogy mi alapj\u00e1n tekintj\u00fck egy oszt\u00e1ly k\u00e9t p\u00e9ld\u00e1ny\u00e1t egyenl\u0151nek. Fontos megjegyezni, hogy ennek a met\u00f3dusnak a fel\u00fcl\u00edr\u00e1sa eseteben k\u00f6telez\u0151 a <code>hashCode()</code> met\u00f3dust is fel\u00fcl\u00edrni, hogy az oszt\u00e1lyod konzisztenszen m\u0171k\u00f6djen hash alap\u00fa adatszerkezetekben, p\u00e9ld\u00e1ul <code>HashMap()</code>. Szerencsere ezt egyszer\u0171en megtehetj\u00fck az <code>Objects.hash()</code> met\u00f3dus haszn\u00e1lat\u00e1val.</p> <pre><code>public class Foglalas {\nString nev;\nint ora;\n@Override\npublic boolean equals(Object o) {\n...\n}\n@Override\npublic int hashCode() {\nreturn Objects.hash(nev, ora);\n}\n}\n</code></pre>"},{"location":"java_se_5/#feladatok","title":"Feladatok","text":""},{"location":"java_se_5/#1-feladat","title":"1. Feladat","text":"<p>Mi t\u00f6rt\u00e9nik, ha</p> <ul> <li>megpr\u00f3b\u00e1lsz egy oszt\u00e1lyb\u00f3l k\u00e9t m\u00e1sik oszt\u00e1lyt ki b\u0151v\u00edteni,</li> <li>megpr\u00f3b\u00e1lod a Math oszt\u00e1lyt kib\u0151v\u00edteni,</li> <li>egy sz\u00fcl\u0151 oszt\u00e1lynak statikus met\u00f3dusai/v\u00e1ltoz\u00f3i vannak,</li> <li>egy aloszt\u00e1lyb\u00f3l nem el\u00e9g\u00edted ki a sz\u00fcl\u0151 oszt\u00e1ly konstruktor\u00e1nak param\u00e9tereit,</li> <li>egy tetsz\u0151leges T t\u00edpus\u00fa t\u00f6mbben T k\u00fcl\u00f6nb\u00f6z\u0151 aloszt\u00e1lyainak objektumait tessz\u00fck,</li> <li>egy tetsz\u0151leges T t\u00edpussal deklar\u00e1lt v\u00e1ltoz\u00f3nak T sz\u00fcl\u0151 oszt\u00e1ly\u00e1nak objektum\u00e1t adjuk \u00e9rtek\u00fcl,</li> <li>egy tetsz\u0151leges T t\u00edpus egyik aloszt\u00e1ly\u00e1val deklar\u00e1lt v\u00e1ltoz\u00f3j\u00e1nak a T oszt\u00e1ly egy m\u00e1sik aloszt\u00e1ly\u00e1nak objektum\u00e1t   adjuk \u00e9rtek\u00fcl,</li> <li>egy aloszt\u00e1lyban l\u00e9trehozott met\u00f3dus vagy oszt\u00e1ly v\u00e1ltoz\u00f3 neve megegyezik a sz\u00fcl\u0151 oszt\u00e1ly egyik met\u00f3dus\u00e1val,</li> <li>egy statikus met\u00f3dust egy nem statikus met\u00f3dussal \u00e1rny\u00e9kolunk vagy ford\u00edtva,</li> <li>k\u00e9t oszt\u00e1ly egym\u00e1st b\u0151v\u00edti ki,</li> <li>egy final kulcs sz\u00f3val megjel\u00f6lt oszt\u00e1lyt vagy met\u00f3dust megpr\u00f3b\u00e1lsz ki b\u0151v\u00edteni vagy fel\u00fcl \u00edrni,</li> <li>egy @Override annot\u00e1ci\u00f3val megjel\u00f6lt met\u00f3dus neve/param\u00e9terei/visszat\u00e9r\u00e9si \u00e9rteke nem egyezik meg a sz\u00fcl\u0151 oszt\u00e1ly   egyik met\u00f3dus\u00e1val sem?</li> </ul>"},{"location":"java_se_5/#2-feladat","title":"2. Feladat","text":"<p>Hozz l\u00e9tre egy tetsz\u0151leges oszt\u00e1lyt \u00e9s implement\u00e1ld a <code>toString()</code> \u00e9s <code>equals()</code> met\u00f3dust.</p>"},{"location":"java_se_5/#3-feladat","title":"3. Feladat","text":"<p>A k\u00f6vetkez\u0151 feladatokban a lenti <code>Termek</code> osztallyal fogunk dolgozni.</p> <pre><code>class Termek {\nprivate static int kovetkezoAzonosito = 100000;\nprivate int azonosito;\nprivate String megnevezes;\nprivate int ar;\npublic Termek(String megnevezes, int ar) {\nthis.azonosito = kovetkezoAzonosito++;\nthis.megnevezes = megnevezes;\nthis.ar = ar;\n}\npublic int getAzonosito() {\nreturn azonosito;\n}\npublic String getMegnevezes() {\nreturn megnevezes;\n}\npublic int getAr() {\nreturn ar;\n}\n}\n</code></pre>"},{"location":"java_se_5/#31-feladat","title":"3.1. Feladat","text":"<p>K\u00e9sz\u00edts a <code>Termek</code> oszt\u00e1lynak egy <code>Laptop</code> aloszt\u00e1lyt. Minden laptopr\u00f3l el szeretn\u00e9nk t\u00e1rolni a processzor t\u00edpus\u00e1t \u00e9s a k\u00e9p\u00e1tl\u00f3 hossz\u00e1t. A <code>Laptop</code> aloszt\u00e1ly a sz\u00fcl\u0151oszt\u00e1lya mint\u00e1j\u00e1ra k\u00e9sz\u00fclj\u00f6n, a v\u00e1ltozok hozz\u00e1f\u00e9rhet\u0151s\u00e9g\u00e9, az oszt\u00e1ly mut\u00e1lhat\u00f3s\u00e1ga, konstruktora stb. egyezzen meg vele.</p>"},{"location":"java_se_5/#32-feladat","title":"3.2. Feladat","text":"<p>K\u00e9sz\u00edts a <code>Termek</code> oszt\u00e1lynak egy <code>Kamera</code> aloszt\u00e1lyt. Minden kamer\u00e1r\u00f3l el szeretn\u00e9nk t\u00e1rolni a felbont\u00e1st megapixelben. A <code>Kamera</code> aloszt\u00e1ly a sz\u00fcl\u0151oszt\u00e1lya mint\u00e1j\u00e1ra k\u00e9sz\u00fclj\u00f6n, a v\u00e1ltozok hozz\u00e1f\u00e9rhet\u0151s\u00e9g\u00e9, az oszt\u00e1ly mut\u00e1lhat\u00f3s\u00e1ga, konstruktora stb. egyezzen meg vele.</p>"},{"location":"java_se_5/#33-feladat","title":"3.3. Feladat","text":"<p>K\u00e9sz\u00edts a <code>Termek</code> oszt\u00e1lyba egy <code>toString()</code> met\u00f3dust, amely a k\u00f6vetkez\u0151 form\u00e1tum\u00fa String-ben adja vissza a term\u00e9k adatait.</p> <pre><code>100014 BananaBook Pro 12 226000 Ft\n</code></pre>"},{"location":"java_se_5/#34-feladat","title":"3.4. Feladat","text":"<p>Egy <code>Termek</code> t\u00edpus\u00fa t\u00f6mbbe helyezz vegyesen <code>Laptop</code> \u00e9s <code>Kamera</code> p\u00e9ld\u00e1nyokat, majd h\u00edvd meg mindegyiken a <code>toString()</code> met\u00f3dust egy ciklus seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>100000 BananaBook Pro 12 226000 Ft\n100001 BananaBook Pro 15 265000 Ft\n100002 Canikon D6000D 120000 Ft\n100003 Canikon D6500D 165000 Ft\n</code></pre>"},{"location":"java_se_5/#35-feladat","title":"3.5. Feladat","text":"<p>Az <code>instanceof</code> oper\u00e1torral m\u00f3dos\u00edtsd a ciklust \u00fagy, hogy csak a <code>Laptop</code> oszt\u00e1ly p\u00e9ld\u00e1nyait jelen\u00edtse meg.</p>"},{"location":"java_se_5/#36-feladat","title":"3.6. Feladat","text":"<p>Az <code>instanceof</code> oper\u00e1torral m\u00f3dos\u00edtsd a ciklust \u00fagy, hogy minden term\u00e9khez oda \u00edrja, hogy melyik kateg\u00f3ri\u00e1ba esik.</p> <pre><code>100000 BananaBook Pro 12 226000 Ft Laptop\n100001 BananaBook Pro 15 265000 Ft Laptop\n100002 Canikon D6000D 120000 Ft Kamera\n100003 Canikon D6500D 165000 Ft Kamera\n</code></pre>"},{"location":"java_se_5/#37-feladat","title":"3.7. Feladat","text":"<p>\u00cdrd fel\u00fcl a Laptop \u00e9s Kamera oszt\u00e1ly toString() met\u00f3dusait \u00fagy, hogy a ciklusod az al\u00e1bbi eredm\u00e9nyt produk\u00e1lja.</p> <pre><code>100000 BananaBook Pro 12 226000 Ft i5 6700K, 30 cm Laptop\n100001 BananaBook Pro 15 265000 Ft amd 6300X, 24 cm Laptop\n100002 Canikon D6000D 120000 Ft 24 MP cm Kamera\n100003 Canikon D6500D 165000 Ft 36 MP Kamera\n</code></pre>"},{"location":"java_se_5/#38-feladat","title":"3.8. Feladat","text":"<p>M\u00f3dos\u00edtsd \u00fagy a <code>Termek</code> oszt\u00e1lyt, hogy az <code>equals()</code> met\u00f3dus k\u00e9t p\u00e9ld\u00e1ny\u00e1t akkor tekintse egyenl\u0151nek, ha az azonos\u00edt\u00f3ik megegyeznek.</p>"},{"location":"java_se_5_5/","title":"Java Enum t\u00edpus","text":""},{"location":"java_se_5_5/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Az <code>ENUM</code> kulcssz\u00f3 a Java 5-s verzi\u00f3j\u00e1ban ker\u00fclt bevezet\u00e9sre. Ez egy speci\u00e1lis oszt\u00e1lyt\u00edpust jel\u00f6l, amely mindig kiterjeszti a <code>java.lang.Enum</code> oszt\u00e1lyt. Az enum t\u00edpus (magyarul felsorol\u00e1s t\u00edpus) egy speci\u00e1lis adatt\u00edpus, amely lehet\u0151v\u00e9 teszi, hogy egy v\u00e1ltoz\u00f3 el\u0151re meghat\u00e1rozott \u00e1lland\u00f3k halmaz\u00e1b\u00f3l kaphasson csak \u00e9rt\u00e9ket. A v\u00e1ltoz\u00f3nak meg kell egyeznie a sz\u00e1m\u00e1ra el\u0151re meghat\u00e1rozott \u00e9rt\u00e9kek egyik\u00e9vel.</p> <p>A gyakori p\u00e9ld\u00e1k az enum-ok haszn\u00e1lat\u00e1ra p\u00e9ld\u00e1ul az \u00e9gt\u00e1jak elt\u00e1rol\u00e1sa (<code>NORTH</code>, <code>SOUTH</code>, <code>EAST</code>, <code>WEST</code>) vagy a h\u00e9t napjai.</p> <p>Mivel az \u00e9rt\u00e9kek konstansok, ez\u00e9rt az enum \u00e9rt\u00e9keket nagybet\u0171vel \u00edrjuk.</p>"},{"location":"java_se_5_5/#enumok-hasznalata","title":"Enumok haszn\u00e1lata","text":"<p>A Java nyelvben az <code>enum</code> kulcssz\u00f3 haszn\u00e1lat\u00e1val hat\u00e1rozhatunk meg egy enum t\u00edpust. P\u00e9ld\u00e1ul a h\u00e9t napjainak enum t\u00edpus\u00e1t a k\u00f6vetkez\u0151k\u00e9ppen adhatjuk meg:</p> <pre><code>public enum Day {\nSUNDAY, MONDAY, TUESDAY, WEDNESDAY,\nTHURSDAY, FRIDAY, SATURDAY\n}\n</code></pre> <p>Az enum t\u00edpust, akkor haszn\u00e1ljuk, ha a t\u00edpus amit reprezent\u00e1lni szeretn\u00e9nk egy el\u0151re meghat\u00e1rozott halmaz \u00e9rt\u00e9kei. Ilyen lehet p\u00e9ld\u00e1ul a val\u00f3s\u00e1gban is el\u0151fordul\u00f3 halmaz p\u00e9ld\u00e1ul a naprendszer\u00fcnk bolyg\u00f3i, vagy elvont fogalmak z\u00e1rt halmaza, p\u00e9ld\u00e1ul egy rendel\u00e9s aktu\u00e1lis f\u00e1zisa.</p> <p>Az \u00edgy defini\u00e1lt konstansok olvashat\u00f3bb\u00e1 teszik a k\u00f3dot, lehet\u0151v\u00e9 teszik a ford\u00edt\u00e1si id\u0151ben t\u00f6rt\u00e9n\u0151 ellen\u0151rz\u00e9st, el\u0151re dokument\u00e1lj\u00e1k az elfogadott \u00e9rt\u00e9kek list\u00e1j\u00e1t, \u00e9s elker\u00fclik az \u00e9rv\u00e9nytelen \u00e9rt\u00e9kek \u00e1tad\u00e1sa miatti v\u00e1ratlan viselked\u00e9st.</p> <p>A Java nyelv enum t\u00edpusai elt\u00e9rnek a m\u00e1s nyelvekben megszokott enum t\u00edpusokt\u00f3l. Mivel minden enum t\u00edpus a <code>java.lang.Enum</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik, ez\u00e9rt vannak el\u0151re defini\u00e1lt met\u00f3dusaink \u00e9s adattagjaink, amiket az <code>Enum</code> oszt\u00e1lyt\u00f3l \u00f6r\u00f6kl\u00fcnk. Ilyen \u00f6r\u00f6k\u00f6lt met\u00f3dus p\u00e9ld\u00e1ul a statikus <code>values()</code> met\u00f3dus, ami az enum lehets\u00e9ges \u00e9rt\u00e9keinek list\u00e1j\u00e1val t\u00e9r vissza.</p> <pre><code>public class Main {\npublic enum Day {\nSUNDAY, MONDAY, TUESDAY, WEDNESDAY,\nTHURSDAY, FRIDAY, SATURDAY\n}\npublic static void main(String[] args) {\nfor (Day day : Day.values()) {\nSystem.out.println(day);\n}\n}\n}\n</code></pre> <p>Az enum t\u00edpus \u00e9rt\u00e9kei l\u00e9nyeg\u00e9ben az enum oszt\u00e1lyunk objektumai. Az enum oszt\u00e1lyunk is rendelkezhet adattagokkal \u00e9s met\u00f3dusokkal amiket k\u00fcl\u00f6nb\u00f6z\u0151 \u00e9rt\u00e9kekkel inicializ\u00e1lhatunk az objektumok k\u00e9sz\u00edt\u00e9sre sor\u00e1n.</p> <p>N\u00e9zz\u00fck a k\u00f6vetkez\u0151 p\u00e9ld\u00e1t, amiben a <code>Planet</code> enumot hozzuk l\u00e9tre, ami a naprendszer\u00fcnk bolyg\u00f3it fogja t\u00e1rolni.</p> <pre><code>public enum Planet {\nMERCURY(3.303e+23, 2.4397e6),\nVENUS(4.869e+24, 6.0518e6),\nEARTH(5.976e+24, 6.37814e6),\nMARS(6.421e+23, 3.3972e6),\nJUPITER(1.9e+27, 7.1492e7),\nSATURN(5.688e+26, 6.0268e7),\nURANUS(8.686e+25, 2.5559e7),\nNEPTUNE(1.024e+26, 2.4746e7);\nprivate final double mass;   // in kilograms\nprivate final double radius; // in meters\nPlanet(double mass, double radius) {\nthis.mass = mass;\nthis.radius = radius;\n}\nprivate double mass() {\nreturn mass;\n}\nprivate double radius() {\nreturn radius;\n}\n// universal gravitational constant  (m3 kg-1 s-2)\npublic static final double G = 6.67300E-11;\ndouble surfaceGravity() {\nreturn G * mass / (radius * radius);\n}\ndouble surfaceWeight(double otherMass) {\nreturn otherMass * surfaceGravity();\n}\n}\n</code></pre> <p>A kor\u00e1bbi p\u00e9ld\u00e1val ellent\u00e9tben itt az enum t\u00edpusunkhoz adattagokat \u00e9s met\u00f3dusokat is defini\u00e1lunk. Mivel az enum csak egy k\u00fcl\u00f6nleges oszt\u00e1ly ezt minden tov\u00e1bbi gond n\u00e9lk\u00fcl megtehetj\u00fck. Minden egyes enum \u00e9rt\u00e9k\u00fcnk mostm\u00e1r elt\u00e1rolja az adott bolyg\u00f3 t\u00f6meg\u00e9t \u00e9s a bolyg\u00f3 sugar\u00e1t \u00e9s a k\u00e9t met\u00f3dus\u00e1n kereszt\u00fcl, minden bolyg\u00f3n kisz\u00e1molhatjuk a fel\u00fcleti gravit\u00e1ci\u00f3t valamint egy t\u00f6meg s\u00faly\u00e1t az adott bolyg\u00f3 felsz\u00edn\u00e9n.</p>"},{"location":"java_se_5_5/#feladatok","title":"Feladatok","text":""},{"location":"java_se_5_5/#1-feladat","title":"1. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>Month</code> enumot ami a h\u00f3napok list\u00e1j\u00e1t t\u00e1rolja el kieg\u00e9sz\u00edtve azzal az inform\u00e1ci\u00f3val, hogy az adott h\u00f3nap h\u00e1ny napos.</p>"},{"location":"java_se_5_5/#2-feladat","title":"2. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>CardSuit</code> enumot a k\u00f6vetkez\u0151 \u00e9rt\u00e9kekkel <code>HEARTS</code>, <code>DIAMONDS</code>, <code>CLUBS</code>, <code>SPADES</code>.</p> <p>K\u00e9sz\u00edts egy <code>Card</code> oszt\u00e1lyt, a k\u00f6vetkez\u0151 adattagokkal. <code>String</code> rank, <code>CardSuit</code> cardSuit. K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, <code>toString</code> \u00e9s <code>getter-setter</code> met\u00f3dusokat.</p> <p>A <code>main</code> f\u00fcggv\u00e9nyedben gener\u00e1lj ki egy 52 lapos paklit az \u00f6sszes lehets\u00e9ges k\u00e1rtyalappal \u00e9s t\u00e1rold el a lapokat egy t\u00f6mbben!</p>"},{"location":"java_se_5_5/#3-feladat","title":"3. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>PizzaSize</code> enumot a k\u00f6vetkez\u0151 \u00e9rt\u00e9kekkel <code>SMALL</code>, <code>MEDIUM</code>, <code>LARGE</code>, <code>EXTRALARGE</code>.</p> <p>K\u00e9sz\u00edts egy <code>Pizza</code> oszt\u00e1lyt, a k\u00f6vetkez\u0151 adattagokkal. <code>String</code> pizzaName, <code>int</code> basePrice, <code>PizzaSize</code> pizzaSize. K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, <code>toString</code> \u00e9s <code>getter-setter</code> met\u00f3dusokat. K\u00e9sz\u00edts egy <code>getPrice</code> met\u00f3dust, ami a pizza \u00e1r\u00e1t sz\u00e1molja ki az al\u00e1bbi k\u00e9plet seg\u00edts\u00e9g\u00e9vel.</p> <p>A pizza \u00e1ra a basePrice * pizza m\u00e9ret\u00e9vel.</p> <ul> <li>1 - <code>SMALL</code></li> <li>1.25 - <code>MEDIUM</code></li> <li>1.5 - <code>LARGE</code></li> <li>2 - <code>EXTRALARGE</code></li> </ul> <p>Vagyis egy <code>LARGE</code> pizza, aminek az alap \u00e1ra 1000 volt, 1500-ba ker\u00fcl.</p>"},{"location":"java_se_6/","title":"Hibakezel\u00e9s","text":""},{"location":"java_se_6/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a feladatsorban megismerj\u00fck, milyen hib\u00e1kkal tal\u00e1lkozhatunk a programoz\u00e1s sor\u00e1n a Java nyelvben \u00e9s milyen lehet\u0151s\u00e9geink vannak a hib\u00e1k kezel\u00e9s\u00e9re.</p>"},{"location":"java_se_6/#attekintes","title":"\u00c1ttekint\u00e9s","text":"<p>A t\u00f6rt\u00e9net szerint 1947. szeptember 9-\u00e9n Grace Hopper informatikus egy lepk\u00e9t tal\u00e1lt a Harvard Mark II-es sz\u00e1m\u00edt\u00f3g\u00e9p napl\u00f3j\u00e1ban \u00e9s jelentette a vil\u00e1g els\u0151 \u201ebug\u201d-j\u00e1t. Szoftverfejleszt\u00e9s sor\u00e1n id\u0151nk t\u00falnyom\u00f3 r\u00e9sz\u00e9t hib\u00e1t keres\u00e9s\u00e9vel t\u00f6ltj\u00fck egyes becsl\u00e9sek szerint t\u00f6bb mint a 75%-\u00e1t, ez\u00e9rt a hib\u00e1k gyors megtal\u00e1l\u00e1sa fontos tulajdons\u00e1g minden szoftverfejleszt\u0151 sz\u00e1m\u00e1ra.</p> <p></p>"},{"location":"java_se_6/#hibak-fajtai","title":"Hib\u00e1k fajt\u00e1i","text":"<p>A Java nyelvben a hib\u00e1k oszt\u00e1lyoz\u00e1s\u00e1nak sokf\u00e9le m\u00f3dja van, de ezek az al\u00e1bbi h\u00e1rom kateg\u00f3ri\u00e1ba esnek.</p> <ul> <li>Szintaktikai hib\u00e1k: A ford\u00edt\u00f3 \u00e1ltal tal\u00e1lt hib\u00e1k.</li> <li>Fut\u00e1si idej\u0171 hib\u00e1k: A program fut\u00e1sa k\u00f6zben fell\u00e9p\u0151 hib\u00e1k.</li> <li>Logikai hib\u00e1k: A programoz\u00f3 \u00e1ltal tal\u00e1lt hib\u00e1k a hib\u00e1s eredm\u00e9nyek ok\u00e1t keresve.</li> </ul> <p>\u00c1ltal\u00e1noss\u00e1gban elmondhat\u00f3, hogy a hib\u00e1kat egyre nehezebb megtal\u00e1lni \u00e9s kijav\u00edtani, ahogy a fenti list\u00e1n lefel\u00e9 haladunk.</p>"},{"location":"java_se_6/#szintaktikai-hibak","title":"Szintaktikai hib\u00e1k","text":"<p>Amikor Java programokat \u00edrunk, a ford\u00edt\u00f3 az els\u0151 v\u00e9delmi vonal a hib\u00e1k ellen. A szintaktikai hib\u00e1k a programoz\u00e1si nyelv haszn\u00e1lat\u00e1nak nyelvtani hib\u00e1it jelentik. Ezeket a legk\u00f6nnyebb megtal\u00e1lni \u00e9s kijav\u00edtani. A ford\u00edt\u00f3 megmondja, hol ker\u00fclt bajba, \u00e9s a legjobb tippje lesz arr\u00f3l, hogy mit csin\u00e1lt rosszul.</p> <p>N\u00e9h\u00e1ny gyakori szintaktikai hiba:</p> <ul> <li>Rosszul \u00edrt v\u00e1ltoz\u00f3- \u00e9s met\u00f3dusnevek</li> <li>A pontosvessz\u0151 elhagy\u00e1sa <code>;</code></li> <li>A z\u00e1r\u00f3 z\u00e1r\u00f3jel <code>)</code>, sz\u00f6gletes z\u00e1r\u00f3jel <code>]</code> vagy kapcsos z\u00e1r\u00f3jel elhagy\u00e1sa <code>}</code></li> </ul> <p>\u00c1ltal\u00e1ban a hiba pontosan a ford\u00edt\u00f3 \u00e1ltal jelzett sorban, vagy az el\u0151tte l\u00e9v\u0151 sorban van. Ha azonban a probl\u00e9ma a helytelen\u00fcl be\u00e1gyazott kapcsos z\u00e1r\u00f3jelek, akkor a t\u00e9nyleges hiba a be\u00e1gyazott blokk elej\u00e9n lehet.</p>"},{"location":"java_se_6/#futasi-ideju-hibak","title":"Fut\u00e1si idej\u0171 hib\u00e1k","text":"<p>Ha a programunknak nincs ford\u00edt\u00e1si idej\u0171 hib\u00e1ja, akkor futni fog. Azokat a hib\u00e1kat, amelyek a sikeres ford\u00edt\u00e1s ut\u00e1n a program v\u00e9grehajt\u00e1sa sor\u00e1n (fut\u00e1s k\u00f6zben) fordulnak el\u0151, fut\u00e1si hib\u00e1knak nevezz\u00fcnk. Fut\u00e1s k\u00f6zbeni hib\u00e1k akkor fordulnak el\u0151, amikor egy ford\u00edt\u00e1si idej\u0171 hiba n\u00e9lk\u00fcli program olyasmire k\u00e9ri a sz\u00e1m\u00edt\u00f3g\u00e9pet, amit a sz\u00e1m\u00edt\u00f3g\u00e9p nem tud megb\u00edzhat\u00f3an elv\u00e9gezni.</p> <p>Eml\u00e9kezz\u00fcnk vissza mi t\u00f6rt\u00e9nik, ha egy t\u00f6mb\u00f6t alul vagy t\u00fal indexel\u00fcnk</p> <p>A leggyakoribb fut\u00e1si idej\u0171 hib\u00e1k:</p> <ul> <li>ArithmeticException: (Null\u00e1val oszt\u00e1s)</li> <li>NullPointerException: (Nem inicializ\u00e1lt objektummal szeretn\u00e9nk dolgozni)</li> <li>ClassCastException: (Nem megfelel\u0151 oszt\u00e1lly\u00e1 szeretn\u00e9nk kasztolni egy m\u00e1sik oszt\u00e1lyt)</li> <li>ArrayIndexOutOfBoundsException: (T\u00falindexel\u00fcnk egy t\u00f6mb\u00f6t vagy list\u00e1t)</li> </ul> <p>A ford\u00edt\u00f3 nem tudhat az ilyen t\u00edpus\u00fa hib\u00e1kr\u00f3l a program ford\u00edt\u00e1sa sor\u00e1n ez\u00e9rt fut\u00e1s id\u0151ben keletkeznek.</p> <p>Amikor a program fut\u00e1sa sor\u00e1n egy met\u00f3dusban hiba keletkezik, a met\u00f3duson bel\u00fcl egy kiv\u00e9tel objektum j\u00f6n l\u00e9tre a mem\u00f3ri\u00e1ban, amit a futtat\u00f3k\u00f6rnyezetnek \u00e1tadunk, a met\u00f3dus v\u00e9grehajt\u00e1sa meg\u00e1ll, \u00e9s a h\u00edv\u00f3 f\u00e9l sz\u00e1m\u00e1ra tov\u00e1bbk\u00fcldj\u00fck a l\u00e9trej\u00f6tt kiv\u00e9telobjektumot, aki lekezelheti, vagy tov\u00e1bbdobhatja azt.</p> <p>Kiv\u00e9tel dob\u00f3d\u00e1s eset\u00e9n a fejleszt\u0151 k\u00f6rnyezet megjelen\u00edt egy \u00fczenetet, amely tartalmazza a kiv\u00e9tel nev\u00e9t, a program sor\u00e1t, ahol a kiv\u00e9tel el\u0151fordult, \u00e9s egy \u00fagy nevezett <code>stack trace</code>-t. A <code>stack trace</code> tartalmazza a met\u00f3dust, amiben a hiba keletkezett, azt a met\u00f3dust ami a kor\u00e1bbi met\u00f3dust h\u00edvta \u00e9s \u00edgy tov\u00e1bb teljesen a Main met\u00f3dusig. A kiv\u00e9tel t\u00edpus\u00e1b\u00f3l \u00e9s a sorsz\u00e1mb\u00f3l k\u00f6nnyen k\u00f6vetkeztethet\u00fcnk a hiba ok\u00e1ra \u00e9s k\u00f6nnyen jav\u00edthatjuk.</p>"},{"location":"java_se_6/#kivetelek-kezelese","title":"Kiv\u00e9telek kezel\u00e9se","text":"<p>A kiv\u00e9lek kezel\u00e9s\u00e9re a Java nyelvben a t\u00f6bbi nyelvhez hasonl\u00f3an \u00fagynevezett <code>try-catch</code> blokkokat haszn\u00e1lhatunk.</p>"},{"location":"java_se_6/#try-catch","title":"try-catch","text":"<p>Vegy\u00fck az al\u00e1bbi p\u00e9ld\u00e1t. A program a felhaszn\u00e1l\u00f3t\u00f3l k\u00e9r k\u00e9t tetsz\u0151leges eg\u00e9sz sz\u00e1mot, majd kisz\u00e1m\u00edtja a h\u00e1nyadosukat. A null\u00e1val val\u00f3 oszt\u00e1sra az eg\u00e9sz\u00e9rt\u00e9k aritmetika nincs felk\u00e9sz\u00edtve \u00edgy az oszt\u00e1sn\u00e1l egy ArithmeticException kiv\u00e9tel dob\u00f3dik, ha az oszt\u00f3 0.</p> <pre><code>public class Main {\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\nint dividend = scanner.nextInt();\nint divisor = scanner.nextInt();\nint fraction = 0;\ntry {\nfraction = dividend / divisor;\n} catch (Exception e) {\nSystem.out.println(\"Zero division is undefined!\");\n} finally {\nSystem.out.println(fraction);\n}\n}\n}\n</code></pre> <p>Ahhoz, hogy kezelni tudjuk a probl\u00e9m\u00e1s k\u00f3dr\u00e9szletet, mag\u00e1t az oszt\u00e1st egy <code>try</code> blokkba tessz\u00fck. A <code>try</code> blokkon bel\u00fcl, ha kiv\u00e9tel dob\u00f3dik, azt a <code>try</code>-hoz tartoz\u00f3 <code>catch</code> blokk elkapja. \u00cdgy a program fut\u00e1sa nem termin\u00e1l a hiba miatt. A <code>finally</code> blokk, mindenk\u00e9pp megh\u00edv\u00f3dik, ak\u00e1r t\u00f6rt\u00e9nt kiv\u00e9tel a v\u00e9grehajt\u00e1s sor\u00e1n ak\u00e1r nem. A <code>finally</code> blokk opcion\u00e1lis \u00e1ltal\u00e1ban f\u00e1jlok bez\u00e1r\u00e1s\u00e1ra, csak adatb\u00e1zis kapcsolat megsz\u0171ntet\u00e9s\u00e9re szoktuk haszn\u00e1lni.</p> <p>A <code>catch</code> blokknak van egy param\u00e9tere, ami az Exception t\u00edpus\u00e1t \u00edrja le, egy <code>try</code> blokkhoz t\u00e1rsulhat t\u00f6bb <code>catch</code> \u00e1g is, a megfelel\u0151 Exception t\u00edpusok kezel\u00e9se miatt.</p>"},{"location":"java_se_6/#throws-kulcsszo","title":"throws kulcssz\u00f3","text":"<p>Ha tudjuk, hogy a k\u00f3dunk amit \u00edrunk Exception-t dobhat, akkor ezt jelezhetj\u00fck a met\u00f3duson kereszt\u00fcl. A met\u00f3dus param\u00e9ter list\u00e1ja ut\u00e1n a <code>throws</code> kulcssz\u00f3val megadhatjuk, hogy milyen Exception-t dobhat az adott met\u00f3dus. \u00cdgy a t\u00f6bbi fejleszt\u0151 l\u00e1tja, hogy olyan met\u00f3dust h\u00edv, amit c\u00e9lszer\u0171 <code>try-catch</code> blokkba tenni.</p> <pre><code>    public static int division(int dividend,int divisor)throws ArithmeticException{\nreturn dividend/divisor;\n}\n</code></pre>"},{"location":"java_se_6/#throw-kulcsszo","title":"throw kulcssz\u00f3","text":"<p>Lehet\u0151s\u00e9g\u00fcnk van nek\u00fcnk is Exception-t dobni, ha a programoz\u00e1si logik\u00e1nkat s\u00e9rt\u0151 \u00e1llapot fordul el\u0151 a k\u00f3dban. P\u00e9ld\u00e1ul van egy met\u00f3dusunk, aminek van egy String param\u00e9tere \u00e9s mi visszat\u00e9r\u00fcnk a megford\u00edtott Stringgel. Ha a met\u00f3dusunk egy <code>null</code> objektummal van h\u00edvva, akkor dobhatunk egy Exception-t, ezzel jelezve, hogy a met\u00f3dusunk nem rendeltet\u00e9sszer\u0171en van haszn\u00e1lva.</p> <pre><code>    public static String reverseString(String inputString){\nif(inputString==null){\nthrow new IllegalArgumentException();\n}\n...\n}\n</code></pre> <p>Kiv\u00e9telt a <code>throw</code> kulcssz\u00f3val dobhatunk, ilyenkor l\u00e9tre kell hoznunk egy kiv\u00e9tel p\u00e9ld\u00e1nyt, valamilyen Exception t\u00edpusb\u00f3l.</p>"},{"location":"java_se_6/#kivetel-tipusok","title":"Kiv\u00e9tel t\u00edpusok","text":"<p>A be\u00e9p\u00edtett kiv\u00e9tel t\u00edpusokat k\u00e9t f\u0151 csoportra bonthatjuk.</p>"},{"location":"java_se_6/#checked-exception","title":"Checked exception","text":"<p>A Checked exception vagyis ellen\u0151rz\u00f6tt kiv\u00e9tel t\u00edpusokn\u00e1l, ford\u00edt\u00e1si hib\u00e1t kapunk, ha nem kezelj\u00fck le a kiv\u00e9telt a k\u00f3dunkban. A Java ford\u00edt\u00f3 k\u00e9nyszer\u00edt minket, hogy az adott met\u00f3dust ami ellen\u0151rz\u00f6tt kiv\u00e9telt dobhat egy <code>try-catch</code> blokkba tegy\u00fck.</p>"},{"location":"java_se_6/#unchecked-exception","title":"Unchecked exception","text":"<p>Ezzel szemben Unchecked exception vagyis nem ellen\u0151rz\u00f6tt kiv\u00e9tel t\u00edpusokn\u00e1l, nem k\u00e9nyszer\u00edt minket a ford\u00edt\u00f3, hogy a kiv\u00e9telt lekezelj\u00fck azonban, ha kiv\u00e9tel dob\u00f3dik egy <code>try-catch</code> blokkon k\u00edv\u00fcl, akkor az a program termin\u00e1l\u00e1shoz vezet.</p>"},{"location":"java_se_6/#sajat-exception-tipus","title":"Saj\u00e1t Exception t\u00edpus","text":"<p>Lehet\u0151s\u00e9g\u00fcnk van saj\u00e1t exception t\u00edpus deklar\u00e1l\u00e1s\u00e1ra is, ha \u00e1ltal\u00e1lunk defini\u00e1lt hib\u00e1kat szeretn\u00e9nk l\u00e9trehozni. P\u00e9ld\u00e1ul, ha van egy oszt\u00e1lyunk, aminek az egyik sz\u00e1m param\u00e9tere csak 0 \u00e9s 100 k\u00f6z\u00f6tt vehet fell \u00e9rt\u00e9ket. L\u00e9trehozhatunk egy saj\u00e1t Exception t\u00edpust, ami akkor dob\u00f3dik, ha a megadott sz\u00e1m k\u00edv\u00fcl esik az intervallumon.</p> <pre><code>public class NumberOutOfInterval extends Exception {\npublic NumberOutOfInterval() {\nsuper(\"Number is out of interval!\");\n}\n}\n</code></pre>"},{"location":"java_se_6/#logikai-hibak","title":"Logikai hib\u00e1k","text":"<p>Miut\u00e1n elt\u00e1vol\u00edtottuk a szintaktikai \u00e9s fut\u00e1si hib\u00e1kat, a program sikeresen fut. De n\u00e9ha a program m\u00e9g mindig nem azt csin\u00e1lja, amit szeretn\u00e9nk, vagy nem j\u00f6n l\u00e9tre kimenet. Az ilyen t\u00edpus\u00fa hib\u00e1kat, amelyek hib\u00e1s kimenetet biztos\u00edtanak, de hibamentesnek t\u0171nnek, logikai hib\u00e1knak nevezz\u00fck. Logikai hib\u00e1k akkor fordulnak el\u0151, ha tervez\u00e9si hiba van a programban. Ezek a leggyakoribb hib\u00e1k, amelyek kezd\u0151kkel fordulnak el\u0151, \u00e9s \u00e1ltal\u00e1ban a legnehezebb megtal\u00e1lni \u00e9s kik\u00fcsz\u00f6b\u00f6lni \u0151ket.</p>"},{"location":"java_se_6/#hibakeresesi-technikak","title":"Hibakeres\u00e9si technik\u00e1k","text":""},{"location":"java_se_6/#oszd-meg-es-uralkodj","title":"Oszd meg \u00e9s uralkodj","text":"<p>Kommentelj\u00fck ki vagy ideiglenesen t\u00f6r\u00f6lj\u00fck a k\u00f3d egy r\u00e9sz\u00e9t. Ha a program lefordul \u00e9s sikeresen m\u0171k\u00f6dik, akkor tudjuk, hogy a hiba az elt\u00e1vol\u00edtott ter\u00fcleten volt. Ha tov\u00e1bbra is fenn\u00e1ll a hiba, akkor pr\u00f3b\u00e1ljuk m\u00e1s ter\u00fcletek ideiglenes inaktiv\u00e1l\u00e1s\u00e1t, am\u00edg a probl\u00e9ma forr\u00e1s\u00e1t nem tal\u00e1ljuk meg.</p>"},{"location":"java_se_6/#ertekek-megvizsgalasa","title":"\u00c9rt\u00e9kek megvizsg\u00e1l\u00e1sa","text":"<p>N\u00e9zz\u00fck meg, hogy a v\u00e1ltoz\u00f3ink j\u00f3 \u00e9rt\u00e9ket vesznek fel \u00e9s a met\u00f3dusaink j\u00f3 \u00e9rt\u00e9kekkel t\u00e9rnek vissza. A legt\u00f6bb esetben a logikai hib\u00e1kat egy hib\u00e1s logika, egy f\u00e9lresz\u00e1mol\u00e1s, egy l\u00e9p\u00e9s hi\u00e1nya\u2026 stb. okozza. A v\u00e9grehajt\u00e1si folyamat k\u00fcl\u00f6nb\u00f6z\u0151 szakaszaiban l\u00e9v\u0151 \u00e9rt\u00e9kek megvizsg\u00e1l\u00e1s\u00e1val rem\u00e9lhet\u0151leg meghat\u00e1rozhatja, hol hib\u00e1ztunk. Az \u00e9rt\u00e9keket megvizsg\u00e1lhatjuk Loggol\u00e1s seg\u00edts\u00e9g\u00e9vel vagy a program Debug m\u00f3dban t\u00f6rt\u00e9n\u0151 futtat\u00e1s\u00e1val.</p>"}]}