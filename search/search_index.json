{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bevezet\u0151","text":""},{"location":"#java","title":"Java","text":"<p>A Java sokoldal\u00fas\u00e1g\u00e1nak \u00e9s kompatibilit\u00e1s\u00e1nak k\u00f6sz\u00f6nhet\u0151en a legn\u00e9pszer\u0171bb programoz\u00e1si nyelvek k\u00f6z\u00e9 tartozik. Sz\u00e9les k\u00f6rben haszn\u00e1lj\u00e1k szoftverfejleszt\u00e9shez, mobil alkalmaz\u00e1sokhoz \u00e9s nagyobb rendszerek fejleszt\u00e9s\u00e9hez.</p> <p>A Java 1995-ben sz\u00fcletett, \u00e9s az Oracle tartja karban. Annak ellen\u00e9re, hogy nem olyan fiatal, mint n\u00e9h\u00e1ny friss nyelv, a Java m\u00e9g mindig nagyon n\u00e9pszer\u0171. \u00dagy tervezt\u00e9k, hogy gyors, biztons\u00e1gos, megb\u00edzhat\u00f3, kezd\u0151bar\u00e1t \u00e9s rendk\u00edv\u00fcl hordozhat\u00f3 legyen. Ez a hordozhat\u00f3s\u00e1gi el\u0151ny az\u00e9rt l\u00e9tezik, mert a Java egy t\u00f6bbplatformos Java virtu\u00e1lis g\u00e9pen \u2013 JVM \u2013 fut. Az Android-alkalmaz\u00e1sok is Java haszn\u00e1lat\u00e1val k\u00e9sz\u00fclnek, mivel az Android oper\u00e1ci\u00f3s rendszer Java nyelvi k\u00f6rnyezetben fut.</p>"},{"location":"cheat_sheat/","title":"Hasznos lehet","text":""},{"location":"feladatok/","title":"OOP gyakorl\u00f3 feladatok","text":""},{"location":"feladatok/#oop-oroklodes","title":"OOP \u00f6r\u00f6kl\u0151d\u00e9s","text":"<p>K\u00e9sz\u00edts egy <code>Vehicle</code> oszt\u00e1lyt <code>String</code> manufacturer, <code>String</code> model \u00e9s <code>int</code> year attrib\u00fatumokkal. Minden adattag legyen priv\u00e1t. K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code> \u00e9s <code>toString</code> met\u00f3dust. K\u00e9sz\u00edts egy <code>Car</code> \u00e9s egy <code>Motorbike</code> oszt\u00e1lyt, ami a <code>Vehicle</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik. A <code>Car</code> oszt\u00e1lynak legyen egy <code>int</code> numberOfSeats adattagja egy param\u00e9teres konstruktora. A <code>Motorbike</code> oszt\u00e1lynak legyen egy <code>int</code> maxSpeed attrib\u00fatuma, aminek ellen\u0151rizd, hogy maximum 300 lehet az \u00e9rt\u00e9ke \u00e9s minimum 0. \u00cdrd fel\u00fcl a <code>toString</code> met\u00f3dusokat, hogy az extra adattagok is megjelenjenek.</p> <p>K\u00e9sz\u00edts egy <code>Shape</code> oszt\u00e1lyt <code>calculateArea</code> met\u00f3dussal ami egy <code>double</code> \u00e9rt\u00e9kkel t\u00e9r vissza. K\u00e9sz\u00edts egy <code>Circle</code> egy <code>Rectangle</code> \u00e9s egy <code>Triangle</code> oszt\u00e1lyt amelyek a <code>Shape</code> oszt\u00e1lyb\u00f3l sz\u00e1rmaznak. K\u00e9sz\u00edts param\u00e9teres konstruktort minden \u00faj oszt\u00e1lyhoz, amiben param\u00e9terben megkapja a sz\u00fcks\u00e9ges adatokat a ter\u00fclet kisz\u00e1m\u00edt\u00e1s\u00e1ra \u00e9s implement\u00e1ld minden oszt\u00e1lyban a <code>calculateArea</code> met\u00f3dust. K\u00e9sz\u00edts <code>toString</code> met\u00f3dust, amiben minden alakzat ki\u00edrja a t\u00edpus\u00e1t.</p> <p>Hozz l\u00e9tre egy Shape t\u00f6mb\u00f6t \u00e9s t\u00f6ltsd fel 3 <code>Circle</code>, 3 <code>Rectangle</code> \u00e9s 3 <code>Triangle</code> p\u00e9ld\u00e1nnyal. Egy <code>for</code> ciklussal j\u00e1rd be a t\u00f6mb\u00f6t \u00e9s h\u00edvd meg minden objektumon a <code>calculateArea</code> \u00e9s <code>toString</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>Stationery</code> oszt\u00e1lyt, ami egy irodai eszk\u00f6zt reprezent\u00e1l. K\u00e9sz\u00edts egy <code>Pencil</code>, <code>Pen</code> \u00e9s <code>Ruler</code> oszt\u00e1lyt, ami a <code>Stationery</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazzon.</p> <p>K\u00e9sz\u00edts egy <code>PencilCase</code> oszt\u00e1lyt ami egy tolltart\u00f3t reprezent\u00e1l. Az oszt\u00e1ly a param\u00e9teres <code>konstruktor\u00e1ban</code> v\u00e1rjon egy <code>int</code> size attrib\u00fatumot \u00e9s hozzon l\u00e9tre az oszt\u00e1lyon bel\u00fcl egy ekkora m\u00e9ret\u0171 <code>Stationery</code> t\u00f6mb\u00f6t. Az oszt\u00e1lynak legyen egy <code>addStationery</code> met\u00f3dusa, ami egy <code>Stationery</code> objektumot v\u00e1r \u00e9s ki\u00edrja a konzolra, hogy milyen t\u00edpus\u00fa objektum lett hozz\u00e1adva. Ezt az objektumot t\u00e1rold el a t\u00f6mbben. Ha m\u00e1r nem f\u00e9r bele a t\u00f6mbbe, akkor \u00edrd ki a konzolra, hogy a <code>A tolltart\u00f3 tele van!</code>. K\u00e9sz\u00edts tov\u00e1bb\u00e1 egy <code>listStationeries</code> met\u00f3dust, ami ki\u00edrja a konzolra, hogy h\u00e1ny darab <code>Pencil</code> , <code>Pen</code> \u00e9s <code>Ruler</code> objektum van elt\u00e1rolva.</p> <p>K\u00e9sz\u00edts egy <code>ElectronicDevice</code> oszt\u00e1lyt <code>String</code> brand \u00e9s <code>String</code> model attrib\u00fatumokkal. K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, <code>toString</code> \u00e9s <code>getter</code> met\u00f3dusokat az oszt\u00e1lyhoz. K\u00e9sz\u00edts egy <code>Television</code> \u00e9s egy <code>SmartPhone</code> oszt\u00e1lyt, ami az <code>ElectronicDevice</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik.</p> <p>A SmartPhone oszt\u00e1lynak legyen m\u00e9g egy <code>int</code> storageCapacity adattagja a Television oszt\u00e1lynak pedig egy <code>double</code> diagonalWidth attrib\u00fatuma. K\u00e9sz\u00edts <code>getter</code> met\u00f3dusokat \u00e9s <code>konstruktort</code> az oszt\u00e1lyokhoz \u00e9s \u00edrd fel\u00fcl a <code>toString</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>SamsungShop</code> oszt\u00e1lyt, ami a param\u00e9teres <code>konstruktor\u00e1ban</code> v\u00e1rjon egy <code>int</code> size attrib\u00fatumot \u00e9s hozzon l\u00e9tre az oszt\u00e1lyon bel\u00fcl egy ekkora m\u00e9ret\u0171 <code>ElectronicDevice</code> t\u00f6mb\u00f6t. Az oszt\u00e1lynak legyen egy <code>addSamsungDevice</code> met\u00f3dusa, ami egy <code>ElectronicDevice</code> objektumot v\u00e1r \u00e9s ha a term\u00e9k brand v\u00e1ltoz\u00f3ja Samsung \u00e9rt\u00e9k\u0171, akkor ki\u00edrja a konzolra, hogy milyen t\u00edpus\u00fa objektum lett hozz\u00e1adva \u00e9s elt\u00e1rolja a t\u00f6mbben. Ha a t\u00f6mbben nincs, t\u00f6bb hely, akkor kezd el\u0151r\u0151l a t\u00f6mb felt\u00f6lt\u00e9s\u00e9t, vagyis \u00edrd fel\u00fcl a legkor\u00e1bban hozz\u00e1adott objektumot az \u00fajjal.</p> <p>Az al\u00e1bbi <code>RealEstate</code> oszt\u00e1llyal fogunk dolgozni.</p> <pre><code>public class RealEstate {\nprivate final double area;\nprivate final int numberOfRooms;\npublic RealEstate(double area, int numberOfRooms) {\nthis.area = area;\nthis.numberOfRooms = numberOfRooms;\n}\npublic double getArea() {\nreturn area;\n}\npublic int getNumberOfRooms() {\nreturn numberOfRooms;\n}\n}\n</code></pre> <p>Implement\u00e1ld a <code>toString</code> met\u00f3dust az oszt\u00e1lyhoz.</p> <p>K\u00e9sz\u00edts egy <code>Flat</code> oszt\u00e1lyt, ami a <code>RealEstate</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik \u00e9s b\u0151v\u00edtsd ki a <code>boolean</code> balcony, \u00e9s <code>int</code> level adattagokkal. K\u00e9sz\u00edts hozz\u00e1 param\u00e9teres konstruktort \u00e9s getter met\u00f3dust az \u00faj adattagokhoz. \u00cdrd fel\u00fcl a toString met\u00f3dust, hogy az \u00faj attrib\u00fatumokat is figyelembe vegye.</p> <p>K\u00e9sz\u00edts egy <code>House</code> oszt\u00e1lyt, ami a <code>RealEstate</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik \u00e9s b\u0151v\u00edtsd ki a <code>boolean</code> pool, \u00e9s <code>double</code> gardenArea adattagokkal. K\u00e9sz\u00edts hozz\u00e1 param\u00e9teres konstruktort \u00e9s getter met\u00f3dust az \u00faj adattagokhoz. \u00cdrd fel\u00fcl a toString met\u00f3dust, hogy az \u00faj attrib\u00fatumokat is figyelembe vegye.</p> <p>K\u00e9sz\u00edts egy <code>Meat</code> oszt\u00e1lyt, aminek egy <code>final</code> <code>String</code> meatType param\u00e9tere van. K\u00e9sz\u00edts param\u00e9teres konstruktort, gettert \u00e9s val\u00f3s\u00edtsd meg a <code>toString</code> \u00e9s <code>equals</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>Bread</code> oszt\u00e1lyt, aminek egy <code>final</code> <code>String</code> breadType param\u00e9tere van. K\u00e9sz\u00edts param\u00e9teres konstruktort, gettert \u00e9s val\u00f3s\u00edtsd meg a <code>toString</code> \u00e9s <code>equals</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>Cheese</code> oszt\u00e1lyt, aminek egy <code>final</code> <code>String</code> cheeseType param\u00e9tere van. K\u00e9sz\u00edts param\u00e9teres konstruktort, gettert \u00e9s val\u00f3s\u00edtsd meg a <code>toString</code> \u00e9s <code>equals</code> met\u00f3dust.</p> <p>K\u00e9sz\u00edts egy <code>Hamburger</code> oszt\u00e1lyt az al\u00e1bbi attrib\u00fatumokkal</p> <ul> <li><code>Meat</code> - meat.</li> <li><code>Bread</code> - bread.</li> <li><code>Cheese</code> - cheese</li> </ul> <p>K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, amiben be\u00e1ll\u00edtod a param\u00e9tereket. K\u00e9sz\u00edts <code>getter - setter</code> \u00e9s <code>toString</code> met\u00f3dusokat az oszt\u00e1lyhoz.</p> <p>K\u00e9sz\u00edts egy <code>PremiumHamburger</code> oszt\u00e1lyt, ami a hamburgerb\u0151l sz\u00e1rmazik. A konstruktora ne v\u00e1rjon semmilyen param\u00e9tert, hanem te \u00e1ll\u00edtsd be az \u0151soszt\u00e1ly konstruktor\u00e1nak \u00e9rt\u00e9keit az al\u00e1bbi objektumokkal. A <code>Meat</code> param\u00e9tere egy olyan <code>Meat</code> objektum legyen aminek a meatType \u00e9rt\u00e9ke \"PremiumMeat\". A <code>Bread</code> param\u00e9tere egy olyan <code>Bread</code> objektum legyen aminek a breadType \u00e9rt\u00e9ke \"PremiumBread\". A <code>Cheese</code> param\u00e9tere egy olyan <code>Cheese</code> objektum legyen aminek a cheeseType \u00e9rt\u00e9ke \"PremiumCheese\".</p> <p>K\u00e9sz\u00edts egy <code>VeganMeat</code> oszt\u00e1lyt, ami a <code>Meat</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik.</p> <p>K\u00e9sz\u00edts egy <code>VeganHamburger</code> ami a <code>Hamburger</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik. Az oszt\u00e1ly konstruktora az \u0151soszt\u00e1ly konstruktor\u00e1hoz hasonl\u00f3an 3 param\u00e9tert v\u00e1rjon, azonban a <code>Meat</code> t\u00edpus helyett <code>VeganMeat</code> t\u00edpust v\u00e1rjon \u00e9s \u00edgy h\u00edvja tov\u00e1bb az \u0151soszt\u00e1ly konstruktor\u00e1t.</p> <p>K\u00e9sz\u00edts egy <code>OrderStatus</code> enumot az al\u00e1bbi lehets\u00e9ges \u00e9rt\u00e9kekkel. <code>ORDERED</code>, <code>READY</code>, <code>DELIVERED</code>. Az enumnak legyen egy <code>int</code> timeToDelivery adattagja, <code>ORDERED</code> eset\u00e9n 5, <code>READY</code> eset\u00e9n 2, <code>DELIVERED</code> eset\u00e9n pedig 0.</p> <p>K\u00e9sz\u00edts egy <code>Order</code> oszt\u00e1lyt, az al\u00e1bbi attrib\u00fatumokkal:</p> <ul> <li><code>int</code> orderId: Minden objektum eset\u00e9n legyen k\u00fcl\u00f6nb\u00f6z\u0151, 0-t\u00f3l indulva, minden \u00faj objektum 1-el nagyobb id-t kap.</li> <li><code>String</code> name: A rendel\u00e9s neve</li> <li><code>OrderStatus</code> orderStatus: A rendel\u00e9s \u00e1llapota.</li> <li><code>String</code> logisticCompany: A fut\u00e1rszolg\u00e1lat aki a csomagot kezeli</li> </ul> <p>K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, <code>toString</code> \u00e9s <code>getter</code>-<code>setter</code> met\u00f3dusokat azokhoz a v\u00e1ltoz\u00f3khoz, amelyekhez sz\u00fcks\u00e9ges. K\u00e9sz\u00edts egy <code>getTimeToDelivery</code> met\u00f3dust, ami t\u00e9rjen vissza az orderStatus timeToDelivery \u00e9rt\u00e9k\u00e9vel.</p> <p>K\u00e9sz\u00edts egy <code>GLSOrder</code> \u00e9s egy <code>DHLOrder</code> oszt\u00e1lyt ami az <code>Order</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik.</p> <p>A <code>GLSOrder</code> minden objektum\u00e1nak a logisticCompany v\u00e1ltoz\u00f3ja legyen GLS. Ezen fel\u00fcl, legyen egy extra attrib\u00fatuma, <code>String</code> carrierPhoneNumber, ami a fut\u00e1r telefonsz\u00e1m\u00e1t t\u00e1rolja, <code>konstruktor</code> param\u00e9terb\u0151l kapja ezt az \u00e9rt\u00e9ket. K\u00e9sz\u00edtsd el a megfelel\u0151 <code>toString</code> \u00e9s <code>getter</code>-<code>setter</code> met\u00f3dusokat.</p> <p>A <code>DHLOrder</code> minden objektum\u00e1nak a logisticCompany v\u00e1ltoz\u00f3ja legyen DHL. \u00cdrd fel\u00fcl a <code>getTimeToDelivery</code> met\u00f3dust, az alap \u00e9rt\u00e9khez adjon hozz\u00e1 2 napot minden esetben, ha az null\u00e1t\u00f3l k\u00fcl\u00f6nb\u00f6z\u0151 \u00e9rt\u00e9k\u0171.</p> <p>Feladatod egy egyszer\u0171s\u00edtett K\u00f6nyvt\u00e1rkezel\u0151 Rendszer l\u00e9trehoz\u00e1sa Java nyelven. A rendszernek t\u00e1mogatnia kell k\u00e9t t\u00edpus\u00fa elemet: K\u00f6nyveket \u00e9s DVD-ket. Minden elemnek van egy c\u00edme, szerz\u0151je (k\u00f6nyvek eset\u00e9n) vagy rendez\u0151je (DVD-k eset\u00e9n), valamint egy egyedi azonos\u00edt\u00f3sz\u00e1ma. Val\u00f3s\u00edtsd meg a rendszert oszt\u00e1lyok \u00e9s enumok seg\u00edts\u00e9g\u00e9vel.</p> <p>A feladatod a k\u00f6vetkez\u0151 oszt\u00e1lyok l\u00e9trehoz\u00e1sa:</p> <p><code>Item</code>: Ez az alaposzt\u00e1ly mind a k\u00f6nyvek, mind a DVD-k sz\u00e1m\u00e1ra. Az al\u00e1bbi attrib\u00fatumokkal kell rendelkeznie:</p> <ul> <li><code>int</code> id (egyedi azonos\u00edt\u00f3sz\u00e1m minden elemhez)</li> <li><code>String</code> title (c\u00edm)</li> <li>Egy <code>ItemType</code> enum, ami a BOOK \u00e9s a DVD \u00e9rt\u00e9keket veheti fel.</li> </ul> <p>Emellett egy konstruktornak kell inicializ\u00e1lnia ezeket az attrib\u00fatumokat, \u00e9s megfelel\u0151 gettereket \u00e9s settereket.</p> <p><code>Book</code>: Ez az oszt\u00e1ly \u00f6r\u00f6kl\u0151dik az <code>Item</code> oszt\u00e1lyb\u00f3l. Egy tov\u00e1bbi attrib\u00fatummal kell rendelkeznie:</p> <ul> <li><code>String</code> author (szerz\u0151)</li> </ul> <p><code>DVD</code>: Ez az oszt\u00e1ly \u00f6r\u00f6kl\u0151dik az <code>Item</code> oszt\u00e1lyb\u00f3l. Egy tov\u00e1bbi attrib\u00fatummal kell rendelkeznie:</p> <ul> <li><code>String</code> director (rendez\u0151)</li> </ul> <p><code>Library</code>: Ez az oszt\u00e1ly k\u00e9pviseli mag\u00e1t a k\u00f6nyvt\u00e1rat. A k\u00f6vetkez\u0151 met\u00f3dusokat kell tartalmaznia:</p> <ul> <li>void <code>addItem(Item item)</code> - Hozz\u00e1ad egy elemet a k\u00f6nyvt\u00e1r gy\u0171jtem\u00e9ny\u00e9hez.</li> <li>void <code>displayItems()</code> - Megjelen\u00edti az \u00f6sszes elem inform\u00e1ci\u00f3j\u00e1t a k\u00f6nyvt\u00e1rban.</li> <li>Item <code>findItemById(int id)</code> - Megkeres \u00e9s visszaad egy elemet azonos\u00edt\u00f3ja alapj\u00e1n.</li> </ul> <p>Feladatod egy Online V\u00e1s\u00e1rl\u00e1si Rendszer tervez\u00e9se Java nyelven. A rendszernek t\u00e1mogatnia kell k\u00fcl\u00f6nb\u00f6z\u0151 t\u00edpus\u00fa term\u00e9keket: Elektronikai cikkeket \u00e9s Ruh\u00e1zatot. Minden term\u00e9knek van egy n\u00e9v, \u00e1r \u00e9s egy egyedi azonos\u00edt\u00f3sz\u00e1ma. Ezenk\u00edv\u00fcl minden term\u00e9k rendelkezhet specifikus tulajdons\u00e1gokkal.</p> <p>A feladatod a k\u00f6vetkez\u0151 oszt\u00e1lyok \u00e9s interf\u00e9szek l\u00e9trehoz\u00e1sa:</p> <p><code>Product</code>: Ez az alaposzt\u00e1ly mind az elektronikai cikkek, mind a ruh\u00e1zati term\u00e9kek sz\u00e1m\u00e1ra. Az al\u00e1bbi attrib\u00fatumokkal kell rendelkeznie:</p> <ul> <li><code>int</code> id (egyedi azonos\u00edt\u00f3sz\u00e1m minden term\u00e9khez)</li> <li><code>String</code> name (n\u00e9v)</li> <li><code>double</code> price (\u00e1r)</li> </ul> <p><code>Electronics</code>: Ez az oszt\u00e1ly \u00f6r\u00f6kl\u0151dik a <code>Product</code> oszt\u00e1lyb\u00f3l. Egy tov\u00e1bbi attrib\u00fatummal kell rendelkeznie:</p> <ul> <li><code>String</code> brand (m\u00e1rka)</li> </ul> <p><code>Clothing</code>: Ez az oszt\u00e1ly \u00f6r\u00f6kl\u0151dik a <code>Product</code> oszt\u00e1lyb\u00f3l. K\u00e9t tov\u00e1bbi attrib\u00fatummal kell rendelkeznie:</p> <ul> <li><code>String</code> size (m\u00e9ret)</li> <li><code>String</code> material (anyag)</li> </ul> <p><code>Review</code> Ez az oszt\u00e1ly a k\u00f6vetkez\u0151 adattagokat \u00e9s met\u00f3dusokat tartalmazza.</p> <ul> <li><code>String</code> review (v\u00e9lem\u00e9ny)</li> <li><code>int</code> rating (pontoz\u00e1s), csak 1 \u00e9s 5 k\u00f6z\u00f6tt vehet fel \u00e9rt\u00e9keket.</li> </ul> <p>A <code>Product</code> oszt\u00e1ly eg\u00e9sz\u00edtsd ki az al\u00e1bbi met\u00f3dusokkal \u00e9s attrib\u00fatumokkal.</p> <ul> <li><code>Review[]</code> reviews: A v\u00e9lem\u00e9nyek t\u00e1rol\u00e1s\u00e1ra haszn\u00e1lt t\u00f6mb.</li> <li>void <code>addReview(String review, int rating)</code> - Hozz\u00e1ad egy \u00e9rt\u00e9kel\u00e9st a term\u00e9khez.</li> <li>double <code>getAverageRating()</code> - Kisz\u00e1m\u00edtja \u00e9s visszaadja az \u00e1tlagos \u00e9rt\u00e9kel\u00e9st az \u00e9rt\u00e9kel\u00e9sek alapj\u00e1n.</li> </ul>"},{"location":"feladatok_2/","title":"Vegyes gyakorl\u00f3 feladatok","text":""},{"location":"feladatok_2/#e-mail-cimek-algoritmizalas","title":"E-mail c\u00edmek - Algoritmiz\u00e1l\u00e1s","text":"<p>A feladatod, hogy az alkalmazottaknak c\u00e9ges e-mail c\u00edmet gener\u00e1lj. A c\u00e9ges e-mail c\u00edm a k\u00f6vetkez\u0151 k\u00e9ppen n\u00e9z ki. A keresztn\u00e9v els\u0151 3 karaktere nagy bet\u0171vel majd egy alulvon\u00e1s \u00e9s a vezet\u00e9kn\u00e9v els\u0151 kett\u0151 karaktere v\u00e9g\u00fcl a @webler.hu suffix, vagyis Erick Santiago e-mail c\u00edme ERI_sa@webler.hu.</p> <p>Az e-mail c\u00edmeknek egyedinek kell lenni\u00fck, \u00edgy ha egy e-mail c\u00edm m\u00e1r l\u00e9tezik, akkor adj hozz\u00e1 egy \u00faj sz\u00e1mot. P\u00e9ld\u00e1ul Erica Santiago e-mail c\u00edme, ERI_sa_2@webler.hu.</p> <p>Olvasd be, nevek.txt f\u00e1jlt, amiben kereszt \u00e9s vezet\u00e9kn\u00e9v p\u00e1rokat tal\u00e1lsz, majd minden alkalmazottnak gener\u00e1lj egy email c\u00edmet \u00e9s ezt \u00edrd ki, az email.txt f\u00e1jlba. Figyelj oda, hogy ne lehessen kett\u0151 egyforma e-mail c\u00edm.</p> nevek.txt <pre><code>Erick Santiago\nTiffany Drake\nCamille Thornton\nBryant Farmer\nCarolyn Harmon\nTerrence Stone\nDanielle Riley\nMarvin Bates\nStewart Watkins\nFrank Jackson\nMarion Carr\nDeborah Bridges\nMarcos Garrett\nCary Allison\nDaryl Carson\nRobyn Owens\nJerome Ortega\nPerry Mcguire\nKathryn George\nMeredith Perez\nPeggy Walters\nGenevieve Wilkerson\nBessie Perry\nToni Phelps\nSophia Richardson\nLance Perkins\nDixie Cobb\nDexter Frank\nMinnie Barnett\nElsa Clark\nLionel Blake\nDoug Gonzalez\nRon Mullins\nRay Becker\nPriscilla Dennis\nMabel James\nOscar Joseph\nKeith Henry\nGrant Ellis\nVirginia Martin\nCecelia Briggs\nDiane Webb\nLela Graves\nKatherine Chambers\nNatalie Bowen\nLaurie Williamson\nBeulah Hayes\nWilson Campbell\nJamie Hansen\nDarryl Stevenson\nYolanda Garcia\nJacqueline Greene\nFlorence Bush\nGerardo Soto\nJordan Reed\nBeverly Alvarado\nEvan Robbins\nKenny Anderson\nEsther Salazar\nJavier Tucker\nMarta Stevens\nMatt Parks\nAllison Nash\nAlonzo Hale\nLorenzo Ingram\nJudy Osborne\nCheryl Silva\nTyrone Dunn\nTimothy White\nErica Fuller\nAdrienne Lyons\nMisty Wheeler\nLevi Hall\nGrace Cooper\nAmber Hodges\nGeorgia Lindsey\nSalvador Keller\nMarianne Harper\nDan Ross\nDoreen Cannon\nSheri Kelley\nKate Kelly\nJay Fields\nInez Mckenzie\nNick Andrews\nJosefina Carter\nNathan Malone\nRandolph Ramirez\nGlenda Castro\nCedric Bowers\nBrett Brooks\nLaverne Fowler\nJerald Sanchez\nJimmy Wilkins\nChristie Gutierrez\nJeffery Mccormick\nRyan Bowman\nIsabel Swanson\nAlejandro Stephens\nDella Logan\n</code></pre>"},{"location":"feladatok_2/#fotokollekcio-oop","title":"Fot\u00f3kollekci\u00f3 - OOP","text":"<p>\u00cdrj egy <code>Photo</code> oszt\u00e1lyt, melynek van egy neve \u00e9s egy min\u0151s\u00edt\u00e9se! L\u00e9tre lehet hozni csak n\u00e9vvel, vagy n\u00e9vvel \u00e9s min\u0151s\u00edt\u00e9ssel. A min\u0151s\u00edt\u00e9s egy <code>Quality</code> enum, hogy a felhaszn\u00e1l\u00f3 h\u00e1ny csillagot adott r\u00e1, lehet ez <code>Quality.NO_STAR</code>, <code>Quality.ONE_STAR</code> \u00e9s <code>Quality.TWO_STAR</code>. A <code>Photo</code> oszt\u00e1ly implement\u00e1lja a <code>Qualified</code> interf\u00e9szt, melynek defini\u00e1lt a <code>Quality getQuality()</code> \u00e9s a <code>void setQuality(Quality)</code> met\u00f3dusa.</p> <p>K\u00e9sz\u00edts egy <code>PhotoCollection</code> oszt\u00e1lyt, mely a fot\u00f3k egy list\u00e1j\u00e1t tartalmazza!</p> <p>\u00cdrj egy <code>addPhoto()</code> met\u00f3dust, amivel fot\u00f3kat lehet hozz\u00e1adni a kollekci\u00f3hoz.</p> <p>\u00cdrj egy <code>listPhotos()</code> met\u00f3dust, ami a konzolra \u00edrja az \u00f6sszes fot\u00f3 nev\u00e9t \u00e9s annyi csillagot, amilyen a min\u0151s\u00edt\u00e9se.</p> <p>\u00cdrj egy <code>starPhoto()</code> met\u00f3dust, mely kikeresi a megfelel\u0151 nev\u0171 fot\u00f3t, \u00e9s be\u00e1ll\u00edtja rajta a param\u00e9terk\u00e9nt \u00e1tadott min\u0151s\u00edt\u00e9st! Ha nem tal\u00e1l a megadott n\u00e9vvel fot\u00f3t, <code>PhotoNotFoundException</code> kiv\u00e9telt dob. Ez egy saj\u00e1t kiv\u00e9tel, terjessze ki a <code>RuntimeException</code> oszt\u00e1lyt!</p> <p>\u00cdrj egy <code>numberOfStars()</code> met\u00f3dust, mely visszaadja, hogy a k\u00e9peken \u00f6sszesen mennyi csillag van! Ha nincs min\u0151s\u00edt\u00e9se, akkor 0 csillag. Ha a min\u0151s\u00edt\u00e9se <code>Quality.ONE_STAR</code>, akkor egy csillaggal kell sz\u00e1molni. Ha a min\u0151s\u00edt\u00e9se <code>Quality.TWO_STAR</code>, akkor k\u00e9t csillaggal kell sz\u00e1molni.</p>"},{"location":"feladatok_2/#lejatszasi-listak","title":"Lej\u00e1tsz\u00e1si list\u00e1k","text":"<p>K\u00e9sz\u00edts\u00fcnk egy <code>Song</code> oszt\u00e1lyt, melynek az al\u00e1bbi mez\u0151i vannak:</p> <ul> <li><code>String name</code></li> <li><code>long lengthInSeconds</code></li> <li><code>String artist</code></li> </ul> <p>A <code>Song</code> konstruktor\u00e1ban ellen\u0151rizd, hogy a <code>name</code> \u00e9s az <code>artist</code> \u00fcres-e! Dobj kiv\u00e9telt, ha igen! Ellen\u0151rizd tov\u00e1bb\u00e1 a <code>lengthInSeconds</code>-ot is, hogy nagyobb legyen, mint <code>0</code>!</p> <p>K\u00e9sz\u00edts <code>toString</code>, <code>equals</code> \u00e9s <code>hashCode</code> met\u00f3dust a <code>Song</code> oszt\u00e1lyhoz.</p> <p>K\u00e9sz\u00edts\u00fcnk egy <code>Playlist</code> oszt\u00e1lyt, melynek van egy konstruktora, amiben <code>Song</code>-ok list\u00e1j\u00e1t fogadja el! K\u00e9sz\u00edts egy <code>addSong</code> \u00e9s <code>removeSong</code> met\u00f3dust, melynek seg\u00edts\u00e9g\u00e9vel egy dalt lehet hozz\u00e1adni a lej\u00e1tsz\u00e1si list\u00e1hoz. K\u00e9sz\u00edts egy met\u00f3dust <code>findByLengthGreaterThan</code> n\u00e9ven, mely egy <code>int</code>-et v\u00e1r param\u00e9terk\u00e9nt <code>mins</code> n\u00e9ven \u00e9s azoknak a <code>Song</code>-oknak a list\u00e1j\u00e1t adjuk vissza, melyek hosszabbak percben (!), mint a <code>Song</code> <code>lengthInSeconds</code> mez\u0151je. K\u00e9sz\u00edts egy <code>totalPlayTime</code> met\u00f3dust ami ki\u00edrja a konzolra, hogy h\u00e1ny perc \u00e9s m\u00e1sodperc a lej\u00e1tsz\u00e1si lista hossza.</p> <p>K\u00e9sz\u00edts <code>toString</code>, <code>equals</code> \u00e9s <code>hashCode</code> met\u00f3dust a <code>Playlist</code> oszt\u00e1lyhoz.</p>"},{"location":"feladatok_2/#zenei-adok","title":"Zenei ad\u00f3k","text":"<p>A r\u00e1di\u00f3hallgat\u00e1s ma m\u00e1r egyre ink\u00e1bb zene vagy h\u00edrek hallgat\u00e1s\u00e1ra korl\u00e1toz\u00f3dik. Ez a feladat h\u00e1rom, folyamatosan zen\u00e9t sug\u00e1rz\u00f3 ad\u00f3r\u00f3l sz\u00f3l, azok egyetlen napi m\u0171sor\u00e1t feldolgozva. A rekl\u00e1m elker\u00fcl\u00e9se \u00e9rdek\u00e9ben az ad\u00f3kat nev\u00fck helyett egyetlen sz\u00e1mmal azonos\u00edtottuk. A musor.txt \u00e1llom\u00e1ny minden sora n\u00e9gy, egym\u00e1st\u00f3l egyetlen sz\u00f3k\u00f6zzel elv\u00e1lasztott adatot tartalmaz: a r\u00e1di\u00f3 sorsz\u00e1m\u00e1t, amit a sz\u00e1m hossza k\u00f6vet k\u00e9t eg\u00e9sz sz\u00e1m (perc \u00e9s m\u00e1sodperc) form\u00e1ban, majd a j\u00e1tszott sz\u00e1m azonos\u00edt\u00f3ja szerepel, ami a sz\u00e1m el\u0151ad\u00f3j\u00e1b\u00f3l \u00e9s c\u00edm\u00e9b\u0151l \u00e1ll. A r\u00e1di\u00f3 sorsz\u00e1ma az 1, 2, 3 sz\u00e1mok egyike. Az ad\u00e1s minden ad\u00f3n 0 \u00f3ra 0 perckor kezd\u0151dik. Egyik sz\u00e1m sem hosszabb 30 percn\u00e9l, teh\u00e1t a perc \u00e9rt\u00e9ke legfeljebb 30, a m\u00e1sodperc pedig legfeljebb 59 lehet. A sz\u00e1m azonos\u00edt\u00f3ja legfeljebb 50 karakter hossz\u00fa, benne legfeljebb egy kett\u0151spont szerepel, ami az el\u0151ad\u00f3 \u00e9s a c\u00edm k\u00f6z\u00f6tt tal\u00e1lhat\u00f3. A sz\u00e1mok az elhangz\u00e1s sorrendj\u00e9ben szerepelnek az \u00e1llom\u00e1nyban, teh\u00e1t a k\u00e9s\u0151bb kezd\u0151d\u0151 sz\u00e1m k\u00e9s\u0151bbi sorban tal\u00e1lhat\u00f3. Az \u00e1llom\u00e1nyban minden zenesz\u00e1m legfeljebb egyszer szerepel.</p> <p>P\u00e9lda:</p> <pre><code>1 5 3 Deep Purple:Bad Attitude\n2 3 36 Eric Clapton:Terraplane Blues\n3 2 46 Eric Clapton:Crazy Country Hop\n3 3 25 Omega:Ablakok\n</code></pre> <p>Olvasd be a musor.txt file-t \u00e9s oldd meg az al\u00e1bbi feladatokat.</p> <ul> <li>K\u00e9sz\u00edts egy Zeneszam oszt\u00e1lyt \u00e9s t\u00e1rold el benne a sz\u00f6veges file-ban t\u00e1rolt sorokat.</li> <li>K\u00e9sz\u00edts egy Radio oszt\u00e1lyt \u00e9s t\u00f6ltsd fel a Zenesz\u00e1m objektumokkal.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, hogy az adott r\u00e1di\u00f3 h\u00e1ny percni zen\u00e9t j\u00e1tszott aznap.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, hogy az adott r\u00e1di\u00f3 h\u00e1ny darab zen\u00e9t j\u00e1tszott.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, a leghosszabb zenesz\u00e1mmal.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, a legr\u00f6videbb zenesz\u00e1mmal.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, a legt\u00f6bbet j\u00e1tszott el\u0151ad\u00f3val.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami param\u00e9terben kap egy \u00f3ra \u00e9s perc \u00e9rt\u00e9ket \u00e9s visszat\u00e9r az \u00e9ppen j\u00e1tszott   zenesz\u00e1mmal.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami param\u00e9terben kap egy el\u0151ad\u00f3t \u00e9s visszat\u00e9r az \u00e1ltala j\u00e1tszott sz\u00e1mokkal.</li> </ul>"},{"location":"feladatok_2/#konzolok","title":"Konzolok","text":"<ol> <li> <p>K\u00e9sz\u00edts egy Jatek oszt\u00e1lyt! T\u00e1rold egy a j\u00e1t\u00e9k nev\u00e9t,neh\u00e9zs\u00e9gi szintj\u00e9t (0-10 k\u00f6z\u00f6tti eg\u00e9sz sz\u00e1m,    be\u00e1ll\u00edt\u00e1skor ezt ellen\u0151rizd le. Ha 0-n\u00e1l kisebb \u00e9rt\u00e9ket kap, 0 legyen, ha 10-n\u00e9l nagyobbat, 10 legyen)    Tov\u00e1bb\u00e1 t\u00e1rold le azt, hogy a j\u00e1t\u00e9k milyen Konzolon! Hozz l\u00e9tre az adattagoknak megfelel\u0151en egy param\u00e9teres    konstruktort!    Hozz l\u00e9tre egy GitGud \u00e9s egy NemTamogatottJatek nev\u0171 kiv\u00e9tel oszt\u00e1lyt, melyek    rendelkezzenek egy default \u00e9s egy param\u00e9teres konstruktorral is!</p> </li> <li> <p>Hozz l\u00e9tre egy Konzol nev\u0171, absztrakt oszt\u00e1lyt! T\u00e1rold le a konzol nev\u00e9t, valamint legyen egy absztrakt    jatszik met\u00f3dusa, mely egy Jatek, valamint egy eg\u00e9sz sz\u00e1m (skill) t\u00edpus\u00fa param\u00e9tert v\u00e1r, GitGud    \u00e9s NemTamogatottJatek t\u00edpus\u00fa kiv\u00e9teleket dobhat. K\u00e9sz\u00edts egy, az adattagnak    megfelel\u0151 param\u00e9teres konstruktort is!</p> </li> <li> <p>K\u00e9sz\u00edts egy Jatekos nev\u0171 oszt\u00e1lyt is! T\u00e1rold el a j\u00e1t\u00e9kos nev\u00e9t, skillj\u00e9t (0-10 k\u00f6z\u00f6tti eg\u00e9sz sz\u00e1m,    be\u00e1ll\u00edt\u00e1skor ezt is ellen\u0151rizd le). T\u00e1rolj tov\u00e1bb\u00e1 egy darab Konzolt \u00e9s egy Jatek list\u00e1t is a j\u00e1t\u00e9kosn\u00e1l!    K\u00e9sz\u00edts megfelel\u0151 param\u00e9teres konstruktort.    Legyen egy kockul met\u00f3dusa, amely v\u00e9gigmegy a j\u00e1t\u00e9kos \u00e1ltal birtokolt j\u00e1t\u00e9kokon \u00e9s mindegyikkel    megpr\u00f3b\u00e1l j\u00e1tszani (mindegyikre megh\u00edvja a birtokolt Konzol jatek met\u00f3dus\u00e1t). Amennyiben sikeres a    j\u00e1t\u00e9k (nem dobott kiv\u00e9telt), a j\u00e1t\u00e9kos skill-je n\u00f6vekedjen eggyel. Ellenkez\u0151 esetben \u00edrd ki az alap\u00e9rtelmezett    hibakimenetre, hogy melyik j\u00e1t\u00e9kos mely j\u00e1t\u00e9kot nem tudta v\u00e9gigj\u00e1tszani.</p> </li> <li> <p>Sz\u00e1rmaztass a Konzol oszt\u00e1lyb\u00f3l egy XBOX \u00e9s egy Playstation oszt\u00e1lyt is! Mindkett\u0151 egy default    konstruktorral rendelkezzen, melyek be\u00e1ll\u00edtj\u00e1k a konzol nev\u00e9t (\u201cXBOX One\u201d vagy \u201cPlaystation 5\u201d)!    XBOX eset\u00e9ben a jatek met\u00f3dus megval\u00f3s\u00edt\u00e1sa a k\u00f6vetkez\u0151. Megkapja param\u00e9terben a j\u00e1t\u00e9kot, valamint    a j\u00e1t\u00e9kos skillj\u00e9t. Azonban csak azokkal a j\u00e1t\u00e9kokkal lehet j\u00e1tszani, melyek az adott konzolhoz val\u00f3ak. Ha    egy j\u00e1t\u00e9k nem ehhez a konzolhoz val\u00f3, dobj NemTamogatottJatek t\u00edpus\u00fa kiv\u00e9telt! Ellenkez\u0151 esetben    vizsg\u00e1ld le, hogy a j\u00e1t\u00e9kos skillje hogy alakul az aktu\u00e1lis j\u00e1t\u00e9k neh\u00e9zs\u00e9g\u00e9hez. XBOX eset\u00e9n olyan j\u00e1t\u00e9kot k\u00e9pes    v\u00e9gigj\u00e1tszani melynek neh\u00e9zs\u00e9ge maximum 2-vel nehezebb, mint    a j\u00e1t\u00e9kos aktu\u00e1lis skillje. Amennyiben nem tudja v\u00e9gigj\u00e1tszani a j\u00e1t\u00e9kot, dobj GitGud t\u00edpus\u00fa    kiv\u00e9telt!    A j\u00e1tszik met\u00f3dus az XBOX-hoz hasonl\u00f3an m\u0171k\u00f6dj\u00f6n,    azonban a j\u00e1t\u00e9kos csak olyan j\u00e1t\u00e9kokat tud v\u00e9gigj\u00e1tszani, melyek neh\u00e9zs\u00e9gi szintje maximum a j\u00e1t\u00e9kos    skillj\u00e9vel egyezik meg.</p> </li> <li> <p>Hozz l\u00e9tre egy jatekok.csv f\u00e1jlt, amiben vegy\u00e9l fel legal\u00e1bb 5-5 j\u00e1t\u00e9kot mindk\u00e9t konzolhoz, a j\u00e1t\u00e9kok adatai    pontosvessz\u0151vel legyenek elv\u00e1lasztva, pl:</p> <pre><code>    Grand Theft Auto V;4;XBOX One\n    Bloodborne;8;Playstation 5\n</code></pre> </li> <li> <p>Olvasd be a jatekok.csv -t egy list\u00e1ba. Hozz l\u00e9tre k\u00e9t Jatekos objektumot egyet Playstation a m\u00e1sikat XBOX    konzollal, a skill \u00e9rt\u00e9k\u00fck legyen 2-7 k\u00f6z\u00f6tti random eg\u00e9sz sz\u00e1m \u00e9s a lehets\u00e9ges j\u00e1t\u00e9kok list\u00e1j\u00e1b\u00f3l    v\u00e9letlenszer\u0171en rendelj hozz\u00e1 8 darab j\u00e1t\u00e9kot.</p> </li> <li> <p>H\u00edvd meg a mindk\u00e9t j\u00e1t\u00e9kos kockul met\u00f3dus\u00e1t \u00e9s \u00edrd ki melyik j\u00e1t\u00e9kokat siker\u00fclt v\u00e9gigj\u00e1tszania a konzol    kimenetre.</p> </li> </ol> <p>A megold\u00e1s sor\u00e1n \u00fcgyelj a Clean Code alapelveinek betart\u00e1s\u00e1ra. B\u00e1rmilyen k\u00fcls\u0151 k\u00f6nyvt\u00e1rat haszn\u00e1lhatsz a megold\u00e1s sor\u00e1n.</p>"},{"location":"feladatok_2/#hamburgerezo","title":"Hamburgerez\u0151","text":"<p>Az alkalmaz\u00e1s c\u00e9lja, hogy seg\u00edtsen egy Hamburgerez\u0151 c\u00e9gnek kezelni a hamburgerek \u00e9rt\u00e9kes\u00edt\u00e9s\u00e9nek folyamat\u00e1t. A men\u00fcben h\u00e1rom hamburger t\u00edpus el\u00e9rhet\u0151. Az alap hamburger, a pr\u00e9mium hamburger \u00e9s a fitnesz hamburger.</p> <p>Az alap hamburger oszt\u00e1ly konstruktor\u00e1nak 4 param\u00e9tere van. A hamburger neve, a h\u00fas t\u00edpusa, a zsemle t\u00edpusa \u00e9s a hamgurger \u00e1ra. Az \u00e1r param\u00e9ter legyen double a t\u00f6bbi pedig String.</p> <p>Extra feladat: A zsemle \u00e9s a h\u00fas t\u00edpushoz Enum haszn\u00e1lata String helyett.</p> <p>A hamburgerhez m\u00e9g tartozzon egy lista ami az extra felt\u00e9teket tartalmazza a burgerhez, maximum 4 darabot. Az extra felt\u00e9t egy String n\u00e9vb\u0151l \u00e9s egy double \u00e1rb\u00f3l \u00e1llnak. A felt\u00e9t megval\u00f3s\u00edt\u00e1s\u00e1hoz hozz l\u00e9tre egy felt\u00e9t oszt\u00e1lyt ami a felt\u00e9t nev\u00e9t \u00e9s az \u00e1r\u00e1t tartalmazza.</p> <p>Az oszt\u00e1lynak legyen egy addExtraTopping() \u00e9s egy removeExtraTopping() met\u00f3dusa, amivel az extra felt\u00e9teket lehet felvenni \u00e9s elt\u00e1vol\u00edtani a hamburgerr\u0151l. Ezen k\u00edv\u00fcl k\u00e9sz\u00edts egy toString() met\u00f3dust, ami ki\u00edrja a hamgurger adatait \u00e9s a v\u00e9gs\u0151 \u00e1r\u00e1t az extra felt\u00e9tekkel.</p> <p>A pr\u00e9mium hamburger konstruktora ne fogadjon param\u00e9tert, helyette hozzon l\u00e9tre egy pr\u00e9mium burger nev\u0151 hamburgert, pr\u00e9mium h\u00fassal, pr\u00e9mium zseml\u00e9vel \u00e9s adj hozz\u00e1 6 felt\u00e9tet. A pr\u00e9mium burger \u00e1ra, 50%-al magasabb, mint a felt\u00e9tek \u00e1r\u00e1nak \u00f6sszege. A pr\u00e9mium hamburgerhez nem lehet \u00faj felt\u00e9tet felvenni vagy elt\u00e1vol\u00edtani r\u00f3la. A toString() met\u00f3dus ugyan \u00fagy m\u0171k\u00f6dik, mint az alap hamgurgern\u00e9l.</p> <p>A fitnesz hamburger az konstruktora 3 param\u00e9tert v\u00e1r, a hamburger nev\u00e9t, az \u00e1rat \u00e9s a h\u00fas t\u00edpus\u00e1t. A zsemle t\u00edpusa legyen be\u00e1ll\u00edtva teljes ki\u0151rl\u00e9s\u0171 zseml\u00e9re alap\u00e9rtelmezetten.</p> <p>Az alap hamburgerhez hasonl\u00f3an a fitnesz hamburgert is lehessen extra felt\u00e9tekkel ell\u00e1tni, azonban ezeknek a felt\u00e9teknek eg\u00e9szs\u00e9ges felt\u00e9teknek kell lenni\u00fck, maximum 3 darab ugyan. A toString() hasonl\u00f3 az el\u0151z\u0151 k\u00e9t t\u00edpushoz.</p>"},{"location":"feladatok_2/#konyvek","title":"K\u00f6nyvek","text":"<p>K\u00e9sz\u00edts egy k\u00f6nyv oszt\u00e1lyt az al\u00e1bbi attrib\u00fatumokkal:</p> <ul> <li>Book: Egy k\u00f6nyvet reprezent\u00e1l a k\u00f6nyvt\u00e1rban.<ul> <li>String isbn - A k\u00f6nyv ISBN k\u00f3dja. Egyedinek kell lennie.</li> <li>String title - A k\u00f6nyv c\u00edme.</li> <li>String author - A k\u00f6nyv szerz\u0151je.</li> <li>String genre - A k\u00f6nyv m\u0171faja.</li> <li>boolean available - El\u00e9rhet\u0151-e a k\u00f6nyv.</li> </ul> </li> </ul> <p>Olvasd be az al\u00e1bbi books.csv f\u00e1jlt \u00e9s oldjuk meg az al\u00e1bbi feladatokat.</p> <ul> <li>Book findBookByIsbn(String isbn) : Isbn alapj\u00e1n keresse meg a k\u00f6nyvet.</li> <li>List listOfGenres() : T\u00e9rjen vissza az el\u00e9rhet\u0151 m\u0171fajok list\u00e1j\u00e1val. <li>List listOfAuthors() : T\u00e9rjen vissza az szerz\u0151k list\u00e1j\u00e1val. <li>List findBookByAuthor(String author) : Keresse meg az \u00f6sszes k\u00f6nyvet szerz\u0151 alapj\u00e1n. <li>List findBookByTitle(String title) : Keresse meg az \u00f6sszes k\u00f6nyvet c\u00edm alapj\u00e1n. <li>List findBookByGenre(String genre) : Keresse meg az \u00f6sszes k\u00f6nyvet m\u0171faj alapj\u00e1n. <li>List findAllAvailableBooks() : Keresse meg az \u00f6sszes el\u00e9rhet\u0151 k\u00f6nyvet. <li>List findAllUnAvailableBooks() : Keresse meg az \u00f6sszes nem el\u00e9rhet\u0151 k\u00f6nyvet. <li>String mostPopularAuthor() : T\u00e9rjen vissza a legt\u00f6bb k\u00f6nyvvel rendelkez\u0151 szerz\u0151vel.</li> <li>Map&gt; findAllBooksGroupedByGenre() : T\u00e9rjen vissza a k\u00f6nyvekkel m\u0171faj alapj\u00e1n csoportos\u00edtva. <li>Map&gt; findAllBooksGroupedByAuthor() : T\u00e9rjen vissza a k\u00f6nyvekkel szerz\u0151 alapj\u00e1n csoportos\u00edtva. <li>Map&gt; findAllBooksGroupedByAuthor() : T\u00e9rjen vissza a k\u00f6nyvekkel el\u00e9rhet\u0151s\u00e9g alapj\u00e1n csoportos\u00edtva. <li>Map authorsWithBookCount() : T\u00e9rjen vissza a szerz\u0151k \u00e1lltal \u00edrt k\u00f6nyvek sz\u00e1m\u00e1val."},{"location":"feladatok_alg/","title":"Algoritmiz\u00e1l\u00f3s feladatok","text":""},{"location":"feladatok_alg/#kapcsolodo-szavak","title":"Kapcsol\u00f3d\u00f3 szavak","text":"<p>\u00cdrj egy f\u00fcggv\u00e9nyt, ami \u00f6sszek\u00f6ti a szavakat az azt megel\u0151z\u0151vel a k\u00f6z\u00f6s bet\u0171k ment\u00e9n. T\u00e9rj vissza az \u00edgy kapott Stringgel \u00e9s a legkisessebb \u00e1tfed\u0151 halmazzal.</p> <pre><code>join([\"oven\", \"envier\", \"erase\", \"serious\"]) \u279e [\"ovenvieraserious\", \"2\"]\njoin([\"move\", \"over\", \"very\"]) \u279e [\"movery\", \"3\"]\njoin([\"to\", \"ops\", \"psy\", \"syllable\"]) \u279e [\"topsyllable\", \"1\"]\n\n// \"to\" and \"ops\" share \"o\" (1)\n// \"ops\" and \"psy\" share \"ps\" (2)\n// \"psy\" and \"syllable\" share \"sy\" (2)\n// the minimum overlap is 1\n\njoin([\"aaa\", \"bbb\", \"ccc\", \"ddd\"]) \u279e [\"aaabbbcccddd\", \"0\"]\n</code></pre>"},{"location":"feladatok_alg/#majdnem-palindrom","title":"Majdnem palindr\u00f3m","text":"<p>Adott egy sz\u00f3 \u00e9s n\u00e9zd meg, h\u00e1ny bet\u0171vel kell kieg\u00e9sz\u00edteni, hogy palindr\u00f3mot kapjunk bel\u0151le. Palindr\u00f3m szavakra adjon vissza 0-t.</p> <pre><code>minPalindromeSteps(\"race\") \u279e 3\n// Add 3 letters: \"car\" to make \"racecar\"\n\nminPalindromeSteps(\"mada\") \u279e 1\n// Add 1 letter: \"m\" to make \"madam\"\n\nminPalindromeSteps(\"mirror\") \u279e 3\n// Add 3 letters: \"rim\" to make \"mirrorrim\"\n</code></pre>"},{"location":"feladatok_alg/#kovetkezo-szam","title":"K\u00f6vetkez\u0151 sz\u00e1m","text":"<p>\u00cdrj egy f\u00fcggv\u00e9nyt, ami visszat\u00e9r a k\u00f6vetkez\u0151 sz\u00e1mmal, ami az input sz\u00e1m sz\u00e1mjegyeib\u0151l alkothat\u00f3. Ha nincs nagyobb sz\u00e1m t\u00e9rj vissza az inputtal.</p> <p>Pr\u00f3b\u00e1ld meg \u00fagy megoldani, hogy nem gener\u00e1lod ki az \u00f6sszes lehets\u00e9ges sz\u00e1mot.</p> <pre><code>nextNumber(19) \u279e 91\n\nnextNumber(3542) \u279e 4235\n\nnextNumber(5432) \u279e 5432\n\nnextNumber(58943) \u279e 59348\n</code></pre>"},{"location":"feladatok_alg/#kockadobas","title":"Kockadob\u00e1s","text":"<p>Amikor k\u00e9t kock\u00e1t dobunk egyszerre a 6-os eredm\u00e9ny 5x val\u00f3sz\u00edn\u0171bb mint a 2-es, mert hatost 5 k\u00fcl\u00f6nb\u00f6z\u0151 kombin\u00e1ci\u00f3b\u00f3l kaphatunk (1 + 5, 5 + 1, 2 + 4, 4 + 2, 3 + 3), m\u00edg kettest, csak egyf\u00e9lek\u00e9ppen (1 + 1).</p> <p>K\u00e9sz\u00edts egy f\u00fcggv\u00e9nyt, ami k\u00e9t argumentumot fogad. Az els\u0151 param\u00e9tere, hogy h\u00e1ny kock\u00e1val dobunk a m\u00e1sodik pedig, hogy melyik sz\u00e1mot szeretn\u00e9nk kapni \u00e9s t\u00e9rjen vissza a lehets\u00e9ges kombin\u00e1ci\u00f3k sz\u00e1m\u00e1val.</p> <pre><code>diceRoll(1, 3) \u279e 1\n\ndiceRoll(2, 5) \u279e 4\n// 1 + 4, 4 + 1, 2 + 3, 3 + 2\n\ndiceRoll(3, 4) \u279e 3\n// 1 + 1 + 2, 1 + 2 + 1, 2 + 1 + 1\n\ndiceRoll(4, 18) \u279e 80\n\ndiceRoll(6, 20) \u279e 4221\n</code></pre>"},{"location":"feladatok_alg/#legkozelebbi-maganhangzo","title":"Legk\u00f6zelebbi mag\u00e1nhangz\u00f3","text":"<p>K\u00e9sz\u00edts egy f\u00f6ggv\u00e9nyt, ami param\u00e9ter\u00fcl egy Stringet kap \u00e9s minden character poz\u00edci\u00f3j\u00e1ra kisz\u00e1molja, hogy milyen messze van a legk\u00f6zelebbi mag\u00e1nhangz\u00f3t\u00f3l.</p> <ul> <li>Minden input tartalmaz legal\u00e1bb 1 mag\u00e1nhangz\u00f3t</li> <li>A Stringek kisbet\u0171sek</li> </ul> <pre><code>distanceToNearestVowel(\"aaaaa\") \u279e [0, 0, 0, 0, 0]\n\ndistanceToNearestVowel(\"babbb\") \u279e [1, 0, 1, 2, 3]\n\ndistanceToNearestVowel(\"abcdabcd\") \u279e [0, 1, 2, 1, 0, 1, 2, 3]\n\ndistanceToNearestVowel(\"shopper\") \u279e [2, 1, 0, 1, 1, 0, 1]\n</code></pre>"},{"location":"feladatok_alg/#sorrend","title":"Sorrend","text":"<p>K\u00e9sz\u00edts egy elj\u00e1r\u00e1st, ami param\u00e9ter\u00fcl egy t\u00f6mb\u00f6t kap sz\u00e1mokkal \u00e9s ki\u00edrja a konzolra, hogy a kapott t\u00f6mbben l\u00e9v\u0151 sz\u00e1mok n\u00f6vekv\u0151, cs\u00f6kken\u0151 vagy vegyes sorrendben vannak. Ha k\u00e9t sz\u00e1m egyenl\u0151, az nem rontja el a rendez\u00e9st.</p> <pre><code>order([1 2 8 12 63]) -&gt; Ascending\n\norder([64 15 7 2 1]) -&gt; Descending\n\norder([64 15 99 2 1]) -&gt; Mixed\n</code></pre>"},{"location":"feladatok_alg/#bonusz-kaprekar-allando","title":"B\u00f3nusz Kaprekar \u00e1lland\u00f3","text":"<ul> <li>Vegy\u00fcnk b\u00e1rmilyen 4-jegy\u0171 sz\u00e1mot, amiben legal\u00e1bb kett\u0151 k\u00fcl\u00f6nb\u0151z\u0151 sz\u00e1m van.</li> <li>Rendezz\u00fck a sz\u00e1mjegyeket cs\u00f6kken\u0151 majd n\u00f6veks\u0151 sorrendbe, adjunk 0-t az elej\u00e9re, ha sz\u00fcks\u00e9ges.</li> <li>Vonjuk ki a kisebb sz\u00e1mot a nagyobb sz\u00e1mb\u00f3l.</li> <li>Menj\u00fcnk vissza a 2. ponthoz \u00e9s ism\u00e9telj\u00fck.</li> </ul> <p>A fenti elj\u00e1r\u00e1st, Kaprekar elj\u00e1r\u00e1sk\u00e9nt ismert \u00e9s mindig el\u00e9ri a fix pontj\u00e1t (6174), maximum 7 iter\u00e1ci\u00f3b\u00f3l.</p> <pre><code>N\u00e9zz\u00fck az algoritmust 3524-re:\n\n5432 \u2013 2345 = 3087\n8730 \u2013 0378 = 8352\n8532 \u2013 2358 = 6174\n7641 \u2013 1467 = 6174\n</code></pre>"},{"location":"feladatok_interju/","title":"Interj\u00fa feladatok","text":""},{"location":"feladatok_interju/#longest-substring-without-repeating-characters","title":"Longest Substring Without Repeating Characters","text":"<p>Adott egy String <code>s</code>, tal\u00e1ld meg a leghosszabb substringet, karakter ism\u00e9tl\u0151d\u00e9s n\u00e9lk\u00fcl.</p> <pre><code>class Solution {\npublic int lengthOfLongestSubstring(String s) {\n}\n}\n</code></pre>"},{"location":"feladatok_interju/#pelda-1","title":"P\u00e9lda 1:","text":"<ul> <li>Input: s = \"abcabcbb\"</li> <li>Output: 3</li> <li>Magyar\u00e1zat: A tal\u00e1lt substring az \"abc\" aminek a hossza 3.</li> </ul>"},{"location":"feladatok_interju/#pelda-2","title":"P\u00e9lda 2:","text":"<ul> <li>Input: s = \"bbbbb\"</li> <li>Output: 1</li> <li>Magyar\u00e1zat: A tal\u00e1lt substring a \"b\" aminek a hossza 1.</li> </ul>"},{"location":"feladatok_interju/#pelda-3","title":"P\u00e9lda 3:","text":"<ul> <li>Input: s = \"pwwkew\"</li> <li>Output: 3</li> <li>Magyar\u00e1zat: A tal\u00e1lt substring a \"wke\" aminek a hossza 3.</li> </ul>"},{"location":"feladatok_interju/#median-of-two-sorted-arrays","title":"Median of Two Sorted Arrays","text":"<p>Adott k\u00e9t rendezett t\u00f6mb <code>nums1</code> \u00e9s <code>nums2</code> aminek a m\u00e9rete <code>m</code> \u00e9s <code>n</code>, t\u00e9rj vissza a k\u00e9t t\u00f6mb medi\u00e1nj\u00e1val.</p> <pre><code>class Solution {\npublic double findMedianSortedArrays(int[] nums1, int[] nums2) {\n}\n}\n</code></pre>"},{"location":"feladatok_interju/#pelda-1_1","title":"P\u00e9lda 1:","text":"<ul> <li>Input: nums1 = [1,3], nums2 = [2]</li> <li>Output: 2.00000</li> <li>Magyar\u00e1zat: Az \u00f6sszekapcsolt t\u00f6mb = [1,2,3] \u00e9s a medi\u00e1n 2.</li> </ul>"},{"location":"feladatok_interju/#pelda-2_1","title":"P\u00e9lda 2:","text":"<ul> <li>Input: nums1 = [1,2], nums2 = [3,4]</li> <li>Output: 2.50000</li> <li>Magyar\u00e1zat: Az \u00f6sszekapcsolt t\u00f6mb = [1,2,3,4] \u00e9s a medi\u00e1n (2 + 3) / 2 = 2.5.</li> </ul>"},{"location":"feladatok_interju/#jump-game","title":"Jump Game","text":"<p>Adott sz\u00e1mok egy t\u00f6mbje. A t\u00f6mb minden eleme azt az \u00e9rt\u00e9k\u00e9t t\u00e1rolja, hogy az adott poz\u00edci\u00f3r\u00f3l maximum mekkor\u00e1t ugorhatsz. Kezdetben a t\u00f6mb els\u0151 elem\u00e9n ( 0. index) vagy. K\u00e9sz\u00edts egy met\u00f3dust, ami igazzal t\u00e9r vissza, ha el tudsz ugr\u00e1lni az utols\u00f3 elemig.</p> <pre><code>class Solution {\npublic boolean canJump(int[] nums) {\n}\n}\n</code></pre>"},{"location":"feladatok_interju/#pelda-1_2","title":"P\u00e9lda 1:","text":"<ul> <li>Input: nums = [2,3,1,1,4]</li> <li>Output: True</li> <li>Magyar\u00e1zat: Ugorj egyet, a 0. indexr\u0151l az 1. indexre, majd 3 at \u00e9s t\u00f6mb v\u00e9g\u00e9n vagy.</li> </ul>"},{"location":"feladatok_interju/#pelda-2_2","title":"P\u00e9lda 2:","text":"<ul> <li>Input: nums = [3,2,1,0,4]</li> <li>Output: False</li> <li>Magyar\u00e1zat: B\u00e1rhogy is ugr\u00e1lsz a 3. index\u0171 elemre fogsz \u00e9rkezni a 0. indexr\u0151l, ahonnan viszont nem tudsz   tov\u00e1bbjutni.</li> </ul>"},{"location":"feladatok_interju/#h-index","title":"H-index","text":"<p>Adott sz\u00e1moknak egy t\u00f6mbje ami az adott szerz\u0151 cikkjeire kapott hivatkoz\u00e1sokat tartalmazza. A t\u00f6mb <code>i</code>.-eik eleme, az <code>i</code>.-eik cikkj\u00e9re kapott hivatkoz\u00e1sok sz\u00e1m\u00e1t tartalmazza. Sz\u00e1m\u00edtsd ki a t\u00f6mb alapj\u00e1n a szerz\u0151 h-index\u00e9t.</p> <p>H-index</p> <p>Egy kutat\u00f3 indexe h, ha legal\u00e1bb h darab olyan cikke van, ami legal\u00e1bb h id\u00e9zetet kapott (vagyis a t\u00f6bbi cikkei enn\u00e9l kevesebbet kaptak).</p> <pre><code>class Solution {\npublic int hIndex(int[] citations) {\n}\n}\n</code></pre>"},{"location":"feladatok_interju/#pelda-1_3","title":"P\u00e9lda 1:","text":"<ul> <li>Input: citations = [3,0,6,1,5]</li> <li>Output: 3</li> <li>Magyar\u00e1zat: Mivel van 3 cikke, ami legal\u00e1bb 3 hivatkoz\u00e1st kapott \u00edgy a h indexe 3.</li> </ul>"},{"location":"feladatok_interju/#pelda-2_3","title":"P\u00e9lda 2:","text":"<ul> <li>Input: citations = [1,3,1]</li> <li>Output: 1</li> <li>Magyar\u00e1zat: Mivel van 2 cikke ami 1 hivatkoz\u00e1st kapott, ez\u00e9rt a h indexe 1.</li> </ul>"},{"location":"feladatok_interju/#legtobb-viz","title":"Legt\u00f6bb v\u00edz","text":"<p>Adott eg\u00e9sz sz\u00e1mok egy t\u00f6mbje aminek a hossza n. Az n darab sz\u00e1m, oszlopok magass\u00e1g\u00e1t reprezent\u00e1lja. Keresd meg a  legt\u00f6bb v\u00edzt\u00f6meget hat\u00e1rol\u00f3 oszlop p\u00e1rt.</p> <pre><code>class Solution {\npublic int maxArea(int[] height) {\n}\n}\n</code></pre>"},{"location":"feladatok_interju/#pelda-1_4","title":"P\u00e9lda 1:","text":"<ul> <li>Input: height = [1,8,6,2,5,4,8,3,7]</li> <li>Output: 49</li> <li>Magyar\u00e1zat: A legnagyobb tart\u00e1ly ami az oszlopokkal hat\u00e1rolni tudunk a k\u00e9pen l\u00e1that\u00f3.</li> </ul>"},{"location":"feladatok_interju/#pelda-2_4","title":"P\u00e9lda 2:","text":"<ul> <li>Input: height = [1,1]</li> <li>Output: 1</li> </ul>"},{"location":"java_se_1/","title":"Java alapok","text":""},{"location":"java_se_1/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a feladatsorban a java programoz\u00e1s alapjaival fogsz megismerdezni. Elsaj\u00e1t\u00edtjuk a v\u00e1ltoz\u00f3k kezel\u00e9s\u00e9t, megismerked\u00fcnk a m\u0171veletek \u00edr\u00e1s\u00e1val \u00e9s a line\u00e1ris programoz\u00e1s els\u0151 l\u00e9p\u00e9sivel. A feladatok elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ged lesz egy telep\u00edtett fejleszt\u0151 k\u00f6rnyezetre \u00e9s egy be\u00e1ll\u00edtott Java JDK-ra.</p>"},{"location":"java_se_1/#valtozok","title":"V\u00e1ltoz\u00f3k","text":"<p>Ebben a r\u00e9szben a programoz\u00e1s egyik legalapvet\u0151bb koncepci\u00f3j\u00e1val fogunk megismerkedni, a v\u00e1ltoz\u00f3kkal. Megtanuljuk l\u00e9trehozni, m\u00f3dos\u00edtani \u00e9s a m\u0171veleteink sor\u00e1n felhaszn\u00e1lni \u00e9s megjelent\u00edteni \u0151ket.</p>"},{"location":"java_se_1/#adattipusok","title":"Adatt\u00edpusok","text":"<p>A Java nyelvben m\u00e1s nyelvekkel ellent\u00e9tben k\u00f6telez\u0151 minden v\u00e1ltoz\u00f3nknak meghat\u00e1rozni az adatt\u00edpus\u00e1t. A rengeget be\u00e9p\u00edtett adatt\u00edpuson t\u00fal, amit a Java t\u00e1mogat lehet\u0151s\u00e9g\u00fcnk van saj\u00e1t adatt\u00edpusok l\u00e9trehoz\u00e1s\u00e1ra is, de egyel\u0151re a be\u00e9p\u00edtett alapvet\u0151 adatt\u00edpusokkal ismerked\u00fcnk meg.</p> Adatt\u00edpus M\u00e9ret Alap\u00e9rt\u00e9k P\u00e9lda \u00e9rt\u00e9kek \u00c9rt\u00e9ktartom\u00e1ny byte 1 byte 0 1, 18 -128 \u2013 127 short 2 byte 0 -13, 24 -32768 \u2013 32767 int 4 byte 0 141 -2147483648 \u2013 2147483647 long 8 byte 0 14155511 -9223372036854775808 \u2013   9223372036854775807 float 4 byte 0.0 1.4 T\u00f6rt sz\u00e1mok, 6-7 tizedes jegy   pontoss\u00e1ggal double 8 byte 0.0 1.8 T\u00f6rt sz\u00e1mok, 15 tizedes jegy   pontoss\u00e1ggal boolean 1 bit false true, false Igaz vagy Hamis char 2 byte '\\u0000' 'c', 'a' Egy karakter az ASCII t\u00e1bl\u00e1b\u00f3l String - null \"Hello\" Sz\u00f6veg"},{"location":"java_se_1/#valtozok-letrehozasa","title":"V\u00e1ltoz\u00f3k l\u00e9trehoz\u00e1sa","text":"<p>Egy v\u00e1ltoz\u00f3 l\u00e9trehoz\u00e1sa jellemz\u0151en k\u00e9t r\u00e9szb\u0151l \u00e1ll, egy deklar\u00e1ci\u00f3b\u00f3l \u00e9s egy inicializ\u00e1l\u00e1sb\u00f3l. A deklar\u00e1ci\u00f3 l\u00e9trehoz egy \u00fcres v\u00e1ltoz\u00f3t a megadott n\u00e9vvel, az inicializ\u00e1ci\u00f3 pedig megadja a v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9t.</p> <pre><code>int i=12;\n</code></pre> <p>Egy <code>int</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3 l\u00e9trehoz\u00e1sa <code>i</code> n\u00e9ven \u00e9s a v\u00e1lt\u00f3z\u00f3 \u00e9rt\u00e9k\u00e9nek be\u00e1ll\u00edt\u00e1sa 12-re.</p> <pre><code>double d=6.5;\n</code></pre> <p>Egy <code>double</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3 l\u00e9trehoz\u00e1sa <code>d</code> n\u00e9ven \u00e9s a v\u00e1lt\u00f3z\u00f3 \u00e9rt\u00e9k\u00e9nek be\u00e1ll\u00edt\u00e1sa 6.5-re.</p> <pre><code>String s=\"Hello World!\";\n</code></pre> <p>Egy <code>String</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3 l\u00e9trehoz\u00e1sa <code>s</code> n\u00e9ven \u00e9s a v\u00e1lt\u00f3z\u00f3 \u00e9rt\u00e9k\u00e9nek be\u00e1ll\u00edt\u00e1sa a Hello World! sz\u00f6vegre.</p>"},{"location":"java_se_1/#valtozok-ertekenek-modositasa","title":"V\u00e1ltoz\u00f3k \u00e9rt\u00e9k\u00e9nek m\u00f3dos\u00edt\u00e1sa","text":"<p>Egy v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9t a l\u00e9trehoz\u00e1sa ut\u00e1n m\u00f3dos\u00edthatjuk, de a t\u00edpus\u00e1t nem v\u00e1ltoztathatjuk meg. A v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9nek megv\u00e1ltoztat\u00e1s\u00e1hoz m\u00e1r nem kell az adatt\u00edpust \u00fajb\u00f3l megadni.</p> <pre><code>int i=12\ni=5\n</code></pre> <p>A kor\u00e1bban l\u00e9trehozott <code>i</code> v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9t 12-r\u0151l 5-re m\u00f3dos\u00edtjuk.</p> <pre><code>boolean b=false;\nb=true;\n</code></pre> <p>A kor\u00e1bban l\u00e9trehozott <code>b</code> v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9t hamisr\u00f3l igazra m\u00f3dos\u00edtjuk.</p>"},{"location":"java_se_1/#gyakorlo-feladatok","title":"Gyakorl\u00f3 feladatok","text":""},{"location":"java_se_1/#1-feladat","title":"1. Feladat","text":"<p>Hozz l\u00e9tre egy v\u00e1ltoz\u00f3t minden adatt\u00edpusb\u00f3l.</p>"},{"location":"java_se_1/#2-feladat","title":"2. Feladat","text":"<p>N\u00e9zd meg mi t\u00f6rt\u00e9nik ha:</p> <ul> <li>deklar\u00e1lsz egy \u00e9rt\u00e9ket, de nem inicializ\u00e1lod?</li> <li>olyan \u00e9rt\u00e9ket adsz meg egy v\u00e1ltoz\u00f3nak, ami m\u00e1s t\u00edpushoz tartozik?</li> <li><code>int</code> v\u00e1ltoz\u00f3ba egy nagyon nagy sz\u00e1mot (nagyobb mint 2147483647) mentesz?</li> </ul>"},{"location":"java_se_1/#operatorok","title":"Oper\u00e1torok","text":"<p>Ebben a fejezetben az alapvet\u0151 oper\u00e1torok haszn\u00e1lat\u00e1t t\u00e1rgyaljuk.</p>"},{"location":"java_se_1/#alap-operatorok","title":"Alap oper\u00e1torok","text":"Oper\u00e1tor Adatt\u00edpus M\u0171velet Haszn\u00e1lat = B\u00e1rmilyen t\u00edpus \u00c9rt\u00e9kad\u00e1s a = 5 + Sz\u00e1m/String \u00d6sszead\u00e1s/\u00d6sszef\u0171z\u00e9s a = 2 + 3 - Sz\u00e1m Kivon\u00e1s a = 5 \u2013 2 * Sz\u00e1m Szorz\u00e1s a = 2 * 2 / Sz\u00e1m Oszt\u00e1s a = 10 / 5 % Sz\u00e1m Marad\u00e9kk\u00e9pz\u00e9s a = 10 % 3 ! Boolean Neg\u00e1ci\u00f3 b = ! false &amp;&amp; Boolean Logikai \u00c9s true &amp;&amp; false || Boolean Logikai Vagy true || false == B\u00e1rmilyen t\u00edpus Egyenl\u0151s\u00e9g vizsg\u00e1lat 5 == 2 != B\u00e1rmilyen t\u00edpus Egyenl\u0151tlens\u00e9g vizsg\u00e1lat 5 != 2 &gt;, &gt;= Sz\u00e1m Nagyobb (egyenl\u0151) 5 &gt; 2 &lt;, &lt;= Sz\u00e1m Kisebb (egyenl\u0151) 5 &lt; 2 <p>A <code>==</code> egyenl\u0151s\u00e9g vizsg\u00e1l\u00f3 oper\u00e1tort kiz\u00e1r\u00f3lag primit\u00edv t\u00edpusokkal (pl. int, double, boolean) haszn\u00e1ljuk. Stringek \u00f6sszehasonl\u00edt\u00e1s\u00e1ra a <code>.equals()</code> f\u00fcggv\u00e9nyt haszn\u00e1ljuk. A <code>==</code> oper\u00e1tor ezeken a t\u00edpusokon a v\u00e1ltoz\u00f3 mem\u00f3riac\u00edm\u00e9t hasonl\u00edtja \u00f6ssze, \u00edgy csak akkor lesz igaz, ha a v\u00e1ltoz\u00f3t \u00f6nmag\u00e1val hasonl\u00edtjuk \u00f6ssze.</p> <pre><code>String s1=\" abcd \";\nString s2=\" abc \";\nboolean egyenloseg=s1.equals(s2);\nboolean egyenloseg2=s2.equals(s1);\n</code></pre> <p>A Stringek egyenl\u0151s\u00e9g\u00e9nek vizsg\u00e1lata a <code>.equals()</code> f\u00fcggv\u00e9nnyel.</p>"},{"location":"java_se_1/#operatorok-hasznalata","title":"Oper\u00e1torok haszn\u00e1lata","text":"<pre><code>double pi=3.14;\nint R=10;\ndouble terulet=pi*R*R;\nString eredmeny=\"A kor terulete \"+terulet+\" .\";\n</code></pre> <p>A k\u00f6r ter\u00fclet\u00e9nek kisz\u00e1m\u00edt\u00e1sa a megfelel\u0151 oper\u00e1torok haszn\u00e1lat\u00e1val.</p> <pre><code>int kor=22;\nboolean gyermek = kor &lt; 12;\nboolean serdulo = kor &gt;=12 &amp;&amp; kor &lt; 19;\nboolean felnott = kor &gt;=19 &amp;&amp; kor &lt; 60;\nboolean idos = kor &gt;= 60;\nboolean kotelezoSisak =! felnott;\nboolean kotelezoFelugyelet =! (felnott);\nboolean ingyenJegy = gyermek || idos;\n</code></pre> <p>Igazs\u00e1gi \u00e9rt\u00e9kek \u00f6sszehasonl\u00edt\u00e1sa oper\u00e1torokkal</p>"},{"location":"java_se_1/#gyakorlo-feladatok_1","title":"Gyakorl\u00f3 feladatok","text":""},{"location":"java_se_1/#1-feladat_1","title":"1. Feladat:","text":"<p>Minden oper\u00e1torral v\u00e9gezz legal\u00e1bb k\u00e9t m\u0171veletet. Tal\u00e1lj ki praktikus, val\u00f3s probl\u00e9m\u00e1kat amiket ezekkel az oper\u00e1torokkal lehet megoldani.</p>"},{"location":"java_se_1/#2-feladat_1","title":"2. Feladat:","text":"<p>N\u00e9zd meg mi t\u00f6rt\u00e9nik, ha:</p> <ul> <li>Stringet \u00f6sszef\u0171z\u00f6l egy m\u00e1sik, nem String v\u00e1ltoz\u00f3val?</li> <li>boolean oper\u00e1tort haszn\u00e1lsz int v\u00e1ltoz\u00f3kkal vagy ford\u00edtva?</li> <li>k\u00e9t \u00f6sszeadott int eredm\u00e9nye nagyobb mint 2147483647?</li> <li>int \u00e9s double v\u00e1ltoz\u00f3kkal vegyesen v\u00e9gzel m\u0171veleteket?</li> </ul>"},{"location":"java_se_1/#3-feladat","title":"3. Feladat:","text":"<p>A megfelel\u0151 oper\u00e1torok haszn\u00e1lat\u00e1val v\u00e9gezz marad\u00e9kos oszt\u00e1st. <pre><code>a = 20\nb = 4\nhanyados = ?\nmaradek = ?\n</code></pre></p>"},{"location":"java_se_1/#4-feladat","title":"4. Feladat:","text":"<p>Mi lesz a boolean B \u00e9rt\u00e9ke az al\u00e1bbi m\u0171veletek elv\u00e9gz\u00e9se ut\u00e1n?</p> <pre><code>int a = 4;\nint b = 3;\nboolean B = a &gt; b;\n</code></pre> <pre><code>int a = 4;\nint b = 3;\nboolean B = a &lt;= b || a != 3;\n</code></pre>"},{"location":"java_se_11/","title":"Verzi\u00f3kezel\u0151 rendszerek","text":""},{"location":"java_se_11/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a szekci\u00f3ban megismerked\u00fcnk a verzi\u00f3 kezel\u00e9s fogalm\u00e1val, t\u00f6bb verzi\u00f3kezel\u0151 rendszerrel \u00e9s m\u00f3dszerekkel amikkel a forr\u00e1sk\u00f3dunkat egyszerre t\u00f6bben tudj\u00e1k m\u00f3dos\u00edtani.</p> <p>Verzi\u00f3kezel\u00e9s</p> <p>Verzi\u00f3kezel\u00e9s alatt t\u00f6bb verzi\u00f3val rendelkez\u0151 adatok kezel\u00e9s\u00e9t \u00e9rtj\u00fck. Leggyakrabban a m\u00e9rn\u00f6ki tudom\u00e1nyokban \u00e9s a szoftverfejleszt\u00e9sben haszn\u00e1lnak verzi\u00f3kezel\u0151 rendszereket fejleszt\u00e9s alatt \u00e1ll\u00f3 dokumentumok, tervek, forr\u00e1sk\u00f3dok \u00e9s egy\u00e9b olyan adatok verzi\u00f3inak kezel\u00e9s\u00e9re, amelyeken t\u00f6bb ember dolgozik egyidej\u0171leg.</p> <p>A verzi\u00f3k\u00f6vet\u00e9s l\u00e9nyeg\u00e9ben valamilyen inform\u00e1ci\u00f3 - p\u00e9ld\u00e1ul a forr\u00e1sk\u00f3d - t\u00f6bb v\u00e1ltozat\u00e1nak menedzsel\u00e9se.</p> <p></p>"},{"location":"java_se_11/#verziokezelo-rendszerek-jellemzoi","title":"Verzi\u00f3kezel\u0151 rendszerek jellemz\u0151i","text":"<ul> <li>Nyomon k\u00f6vet\u00e9s, hogy mikor \u00e9s hogyan v\u00e1ltozott a k\u00f6nyvt\u00e1runk \u00e9s ki v\u00e9gezte el a v\u00e1ltoztat\u00e1st</li> <li>Vissza\u00e1ll\u00edthat\u00f3 b\u00e1rmelyik kor\u00e1bbi \u00e1llapota a k\u00f6nyvt\u00e1rnak, illetve lek\u00e9rhet\u0151 a legfrissebb verzi\u00f3</li> <li>Szinkroniz\u00e1lni tud egy m\u00e1sik g\u00e9pen lev\u0151 hasonl\u00f3 k\u00f6nyvt\u00e1rral (\u00e1tvezetve a v\u00e1ltoz\u00e1sokat) \u00e9s jelez, ha ezt nem tudja   automatikusan elv\u00e9gezni</li> <li>Minden verzi\u00f3t egy sz\u00e1m vagy hash azonos\u00edt</li> <li>A verzi\u00f3k \u00f6sszef\u00fcgg\u00e9sei egy gr\u00e1ffal vizualiz\u00e1lhat\u00f3ak a legegyszer\u0171bben</li> </ul>"},{"location":"java_se_11/#verziokezelo-rendszerek-tortenete","title":"Verzi\u00f3kezel\u0151 rendszerek t\u00f6rt\u00e9nete","text":"<ol> <li>Gener\u00e1ci\u00f3: egyszerre csak egy ember dolgozhatott egy f\u00e1jlon, amikor egy fejleszt\u0151 elkezdett dolgozni a f\u00e1jlon a    <code>lock</code> m\u0171velettel lez\u00e1rta azt, \u00edgy m\u00e1s fejleszt\u0151 azt nem szerkeszthette.</li> <li>Gener\u00e1ci\u00f3: a projekt egy k\u00f6zponti szerveren helyezkedett el, amelyben a f\u00e1jlokat <code>merge -&gt; commit</code> sorrendben    lehetett v\u00e1ltoztatni.</li> <li>Gener\u00e1ci\u00f3: megjelentek a lok\u00e1lisan t\u00e1rolt repositoryk, ezzel lev\u00e9ve a s\u00falyt a k\u00f6zponti szerverr\u0151l. Nem sz\u00fcks\u00e9ges    merge a commithoz.</li> </ol> <p>Verzi\u00f3k\u00f6vet\u00e9ssel egy\u00e9bk\u00e9nt sok helyen tal\u00e1lkozhatunk - p\u00e9ld\u00e1ul a Microsoft Word is rendelkezik be\u00e9p\u00edtett verzi\u00f3k\u00f6vet\u0151 rendszerrel - eset\u00fcnkben viszont k\u00e9t verzi\u00f3k\u00f6vet\u0151 rendszert \u00e9rdemes t\u00e1rgyalni, az a Git \u00e9s az SVN.</p>"},{"location":"java_se_11/#git-vs-svn","title":"Git vs SVN","text":"<p>Mind a Git, mind az SVN (Subversion) verzi\u00f3kezel\u0151 rendszerek, amelyek seg\u00edtenek a fejleszt\u0151knek a k\u00f3db\u00e1zis nyomon k\u00f6vet\u00e9s\u00e9ben, a v\u00e1ltoztat\u00e1sok kezel\u00e9s\u00e9ben \u00e9s a csapatmunka t\u00e1mogat\u00e1s\u00e1ban. Azonban m\u0171k\u00f6d\u00e9si \u00e9s tervez\u00e9si k\u00fcl\u00f6nbs\u00e9gek vannak k\u00f6z\u00f6tt\u00fck.</p> Git SVN Elosztott rendszer Centraliz\u00e1lt rendszer Offline   is el\u00e9rhet\u0151 H\u00e1l\u00f3zatot   ig\u00e9nyel a haszn\u00e1lata Komplexebb   rendszer Egyszer\u0171bben   \u00e1tl\u00e1that\u00f3/tanulhat\u00f3 A   fejleszt\u00e9si \u00e1gak kezel\u00e9se komplik\u00e1ltabb A   fejleszt\u00e9si \u00e1gak k\u00f6nnyen kezelhet\u0151ek A   konfliktusok sz\u00e1ma lecs\u00f6kken A   konfliktusok sz\u00e1ma nagyobb Gyorsabb   rendszer Lassabb m\u0171k\u00f6d\u00e9s\u0171 <p></p>"},{"location":"java_se_11/#git","title":"Git","text":"<p>Az elk\u00f6vetkez\u0151 \u00f3r\u00e1k sor\u00e1n a Git verzi\u00f3k\u00f6vet\u0151 rendszert fogjuk haszn\u00e1lni, \u00edgy az al\u00e1bbi fogalmak is erre a verzi\u00f3kezel\u0151 szoftverre vonatkoznak (n\u00e9h\u00e1ny fogalom m\u00e1s verzi\u00f3kezel\u0151 eset\u00e9n - p\u00e9ld\u00e1ul SVN - nem \u00e9rtelmezhet\u0151/m\u00e1st jelent). A Git verzi\u00f3kezel\u0151 rendszer a sz\u00f6veges \u00e1llom\u00e1nyok, \u00edgy tipikusan a forr\u00e1sk\u00f3d f\u00e1jlok, dokument\u00e1ci\u00f3k v\u00e1ltoz\u00e1skezel\u00e9s\u00e9ben hat\u00e9kony. Ez azt is jelenti, hogy bizonyos f\u00e1jlokat nem \u00e9rdemes verzi\u00f3k\u00f6vet\u00e9s al\u00e1 vonni Git-tel (bizonyos n\u00e9z\u0151pontb\u00f3l pedig elvi hiba, hiszen a Git nem t\u00e1rhelyszolg\u00e1ltat\u00e1sk\u00e9nt m\u0171k\u00f6dik).</p> <p>Figyelem</p> <p>\u00cdgy teh\u00e1t a k\u00f6vetkez\u0151 \u00e1llom\u00e1nyokat NE t\u00e1roljunk: rejtett f\u00e1jlokat, futtathat\u00f3 \u00e1llom\u00e1nyokat, t\u00f6m\u00f6r\u00edtett mapp\u00e1kat pl.: bin/, tmp/, node_modules/, .class, .log, .jar, .zip, .rar</p> <p> </p> Git vs SVN piaci r\u00e9szesed\u00e9s"},{"location":"java_se_11/#git-alapfogalmak","title":"Git alapfogalmak","text":"<ul> <li>Master: a f\u0151 fejleszt\u00e9si \u00e1g</li> <li>Branch: k\u00fcl\u00f6nb\u00f6z\u0151 el\u00e1gaz\u00e1sok a fejleszt\u00e9sben, amelyek k\u00e9s\u0151bb visszat\u00e9r(het)nek a master-be</li> <li>Conflict: ugyanaz a dokumentum k\u00e9t helyen megv\u00e1ltozik (pl. m\u00e1s branch-eken), \u00e9s a v\u00e1ltoztat\u00e1sok automatikusan nem   egyes\u00edthet\u0151ek</li> <li>Repository(remote, local): a forr\u00e1sk\u00f3dok, history (kor\u00e1bbi esem\u00e9nyek) t\u00e1rhelye (szerver)</li> <li>Working copy(working directory): aktu\u00e1lis munkak\u00f6nyvt\u00e1r egy adott repository-hoz n\u00e9zve</li> <li>Commit: a f\u00e1jlok elt\u00e1rol\u00e1sa a local repository-ban</li> <li>Staging area: \u00e1tmeneti ter\u00fclet a local repository \u00e9s a working directory k\u00f6z\u00f6tt, a k\u00f6vetkez\u0151 commit-ra jel\u00f6lt   f\u00e1jlokat tartalmazza</li> <li>Push, Pull: a local \u00e9s a remote repository k\u00f6z\u00f6tti commit-ok felt\u00f6lt\u00e9se/let\u00f6lt\u00e9se</li> <li>HEAD: a legutols\u00f3 commit-ra val\u00f3 hivatkoz\u00e1s az aktu\u00e1lis branch-ben</li> <li>Checkout: branch-ek k\u00f6z\u00f6tti v\u00e1lt\u00e1sra szolg\u00e1l</li> <li>Clone: remote repository lem\u00e1sol\u00e1sa a saj\u00e1t g\u00e9pre (els\u0151 alkalommal)</li> <li>Merge: branch-ek egyes\u00edt\u00e9se</li> </ul>"},{"location":"java_se_11/#git-parancsok","title":"Git parancsok","text":"<ul> <li><code>git init</code>: \u00daj Git repository l\u00e9trehoz\u00e1sa egy megl\u00e9v\u0151 projektben.</li> <li><code>git clone [url]</code>: Egy t\u00e1voli repository kl\u00f3noz\u00e1sa a helyi g\u00e9pre.</li> <li><code>git add [file(s)]</code>: F\u00e1jlok hozz\u00e1ad\u00e1sa a staging ter\u00fclethez, hogy a k\u00f6vetkez\u0151 commitban szerepeljenek.</li> <li><code>git commit -m \"[message]\"</code>: Staging ter\u00fcleten l\u00e9v\u0151 v\u00e1ltoztat\u00e1sok r\u00f6gz\u00edt\u00e9se egy \u00faj commitban.</li> <li><code>git status</code>: St\u00e1tusz lek\u00e9rdez\u00e9se a munkak\u00f6nyvt\u00e1r, a staging \u00e9s az el\u0151zm\u00e9nyek k\u00f6z\u00f6tt.</li> <li><code>git log</code>: El\u0151zm\u00e9nyek (commitok) list\u00e1z\u00e1sa id\u0151rendi sorrendben.</li> <li><code>git pull</code>: T\u00e1voli repository legfrissebb v\u00e1ltoztat\u00e1sainak let\u00f6lt\u00e9se \u00e9s a helyi \u00e1llapot friss\u00edt\u00e9se.</li> <li><code>git push</code>: Lok\u00e1lis v\u00e1ltoztat\u00e1sok felt\u00f6lt\u00e9se a t\u00e1voli repositorybe.</li> <li><code>git branch</code>: Jelenlegi \u00e1gak list\u00e1z\u00e1sa.</li> <li><code>git checkout [branch/commit]</code>: \u00c1tv\u00e1lt\u00e1s m\u00e1sik \u00e1gra vagy egy kor\u00e1bbi commit \u00e1llapot\u00e1ra.</li> <li><code>git merge [branch]</code>: Aktu\u00e1lis \u00e1gra m\u00e1sik \u00e1g beolvaszt\u00e1sa.</li> <li><code>git remote -v</code>: T\u00e1voli repositoryk list\u00e1z\u00e1sa, ahonnan vagy ahova adatokat k\u00fcldhet\u00fcnk.</li> <li><code>git diff</code>: V\u00e1ltoztat\u00e1sok megtekint\u00e9se a munkak\u00f6nyvt\u00e1r \u00e9s a staging ter\u00fclet k\u00f6z\u00f6tt.</li> <li><code>git stash</code>: A munkak\u00f6nyvt\u00e1ri v\u00e1ltoztat\u00e1sok ideiglenes ment\u00e9se, hogy \u00e1tv\u00e1lthassunk m\u00e1sik \u00e1gra.</li> <li><code>git reset [file(s)]</code>: F\u00e1jlok elt\u00e1vol\u00edt\u00e1sa a staging ter\u00fcletr\u0151l, de a munkak\u00f6nyvt\u00e1rban tartva a v\u00e1ltoztat\u00e1sokat.</li> <li><code>git remote add [name] [url]</code>: \u00daj t\u00e1voli repository hozz\u00e1ad\u00e1sa a repository list\u00e1hoz.</li> <li><code>git push -u [remote] [branch]</code>: Els\u0151 alkalommal a lok\u00e1lis \u00e1g felt\u00f6lt\u00e9se a t\u00e1voli repositorybe.</li> <li><code>git rebase [branch]</code>: Az aktu\u00e1lis \u00e1g \u00fajraalapoz\u00e1sa a m\u00e1sik \u00e1gra, ami sim\u00e1bb commit t\u00f6rt\u00e9netet eredm\u00e9nyezhet.</li> </ul> <p>Ezek csak n\u00e9h\u00e1ny alapvet\u0151 Git parancs. A Git rendelkezik tov\u00e1bbi parancsokkal \u00e9s lehet\u0151s\u00e9gekkel is.</p>"},{"location":"java_se_11/#git-elagazasi-strategiak","title":"Git el\u00e1gaz\u00e1si strat\u00e9gi\u00e1k","text":"<p>A Git el\u00e1gaz\u00e1si strat\u00e9gia egy meghat\u00e1rozott \u00e9s szervezett megk\u00f6zel\u00edt\u00e9s arra, hogy hogyan hozzunk l\u00e9tre, haszn\u00e1ljunk \u00e9s kezelj\u00fcnk \u00e1gakat (branch) egy Git verzi\u00f3kezel\u0151 rendszerben. A c\u00e9lja, hogy strukt\u00far\u00e1t adjon a fejleszt\u00e9si folyamatnak, lehet\u0151v\u00e9 tegye a p\u00e1rhuzamos munk\u00e1t, cs\u00f6kkentse a konfliktusokat \u00e9s a hib\u00e1kat, \u00e9s seg\u00edtse a fejleszt\u0151i csapatot hat\u00e9konyabban dolgozni.</p> Zero Branch Strategy / Trunk Based DevelopmentDevelop Branch StrategyFeature Branch StrategyGitflow Branch Strategy <p> </p> <ul> <li>Nem hozunk l\u00e9tre k\u00fcl\u00f6n \u00e1gakat a fejleszt\u00e9s sor\u00e1n.</li> <li>Minden m\u00f3dos\u00edt\u00e1st a master branchre commitolunk.</li> <li>Solo projekteken k\u00edv\u00fcl ker\u00fclj\u00fck ezt a megk\u00f6zel\u00edt\u00e9st.</li> </ul> <p> </p> <ul> <li>A master branchen k\u00edv\u00fcl l\u00e9trehozunk egy develop branchet, ahova commitoljuk a m\u00f3dos\u00edt\u00e1sainkat.</li> <li>A master branchet mindig release-elhet\u0151 verzi\u00f3ban tartjuk.</li> <li>Solo projekteken k\u00edv\u00fcl ker\u00fclj\u00fck ezt a megk\u00f6zel\u00edt\u00e9st is.</li> </ul> <p> </p> <ul> <li>Minden feature-nek k\u00fcl\u00f6n branchet hozunk l\u00e9tre \u00e9s arra commitoljuk a m\u00f3dos\u00edt\u00e1sainkat.</li> <li>Ha egy feature elk\u00e9sz\u00fcl, akkor az adott feature-t vissza mergelj\u00fck a master branchre. </li> <li>Lehet\u0151s\u00e9get ad feature-k p\u00e1rhuzamos fejleszt\u00e9s\u00e9re.</li> </ul> <p> </p> <ul> <li>Egyes\u00edti a develop \u00e9s feature branch strat\u00e9gia el\u0151nyeit.</li> <li>L\u00e9trehozunk egy develop branchet, \u00edgy a master branch\u00fcnket mindig release-elhet\u0151 \u00e1llapotban tudjuk tartani.</li> <li>A k\u00fcl\u00f6nb\u00f6z\u0151 fejleszt\u00e9seknek k\u00fcl\u00f6n feature brancheket nyitunk.</li> </ul> <p>Ezen strat\u00e9gi\u00e1k mindegyike k\u00fcl\u00f6nb\u00f6z\u0151 el\u0151ny\u00f6ket \u00e9s alkalmaz\u00e1si eseteket k\u00edn\u00e1l, \u00e9s a csapat m\u00e9ret\u00e9t\u0151l, a projekt t\u00edpus\u00e1t\u00f3l \u00e9s a folyamatos integr\u00e1ci\u00f3 \u00e9s deployment k\u00f6vetelm\u00e9nyeit\u0151l f\u00fcgg\u0151en v\u00e1laszthat\u00f3k. A l\u00e9nyeg, hogy a csapat j\u00f3l \u00e9rtse \u00e9s szigor\u00faan tartsa mag\u00e1t a kiv\u00e1lasztott strat\u00e9gi\u00e1hoz, hogy a fejleszt\u00e9s folyamatos \u00e9s rendezett legyen.</p>"},{"location":"java_se_11/#git-szolgaltatok","title":"Git szolg\u00e1ltat\u00f3k","text":"<p>A Git egy ny\u00edltforr\u00e1s-k\u00f3d\u00fa verzi\u00f3kezel\u0151 rendszer. GitHub, GitLab, Bitbucket pedig t\u00e1rhely szolg\u00e1ltat\u00f3k amik a Git-et haszn\u00e1lj\u00e1k. A giten t\u00fal extra szolg\u00e1ltat\u00e1sokat biztos\u00edtanak a felhaszn\u00e1l\u00f3k sz\u00e1m\u00e1ra. Mi az \u00f3r\u00e1k sor\u00e1n a GitHub-bal fogunk dolgozni mert:</p> <ul> <li>Ingyenesen haszn\u00e1lhat\u00f3</li> <li>De facto sztenderd az open-source projektek vil\u00e1g\u00e1ban</li> <li>A k\u00fcl\u00f6nb\u00f6z\u0151 szolg\u00e1ltat\u00f3k \u00e1ltal ny\u00fajtott szolg\u00e1ltat\u00e1sokra nem t\u00e9r\u00fcnk ki a tananyag sor\u00e1n.</li> </ul>"},{"location":"java_se_12/","title":"Java Swing","text":""},{"location":"java_se_12/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a szekci\u00f3ban megismerked\u00fcnk a Java Swing API-val. A Swing API grafikus komponensek egy b\u0151v\u00edthet\u0151 k\u00e9szlete, amelyek seg\u00edts\u00e9g\u00e9vel grafikus alkalmaz\u00e1sokat tudunk k\u00e9sz\u00edteni a Java nyelvben. A Swing a Java Foundation Classes (JFC) GUI-val foglalkoz\u00f3 r\u00e9sze, ami egy sz\u00e9pen megtervezett f\u00fcggv\u00e9nyk\u00f6nyvt\u00e1r, b\u00e1r m\u00e9g mindig valamennyire f\u00fcgg az a kor\u00e1bban haszn\u00e1lt AWT-t\u0151l.</p>"},{"location":"java_se_12/#jfc","title":"JFC","text":"<p>A JFC teh\u00e1t a Java Foundation Classes r\u00f6vid\u00edt\u00e9se, ami egy csom\u00f3 olyan olyan tulajdons\u00e1got foglal mag\u00e1ban, amely seg\u00edti a grafikus felhaszn\u00e1l\u00f3i interf\u00e9szek \u00f6sszerak\u00e1s\u00e1t \u00e9s a Java alkalmaz\u00e1sok interaktivit\u00e1s\u00e1t. Defin\u00edci\u00f3 szerint a JFC a k\u00f6vetkez\u0151 elemeket tartalmazza:</p> Tulajdons\u00e1g Le\u00edr\u00e1s Swing GUI komponensek Mindent tartalmaz a nyom\u00f3gombokt\u00f3l kezdve a t\u00e1bl\u00e1zatokig. K\u00fclalak pluginek (l\u00e1sd \u00e9s \u00e9rezd elemek) A Swing alkalmaz\u00e1sok pluginelhet\u0151ek \u00fagy, hogy ezzel t\u00e1mogatjuk a look and feel elemek k\u00f6z\u00f6tti v\u00e1laszt\u00e1st. P\u00e9ld\u00e1ul ugyanaz a program kin\u00e9zhet \"javasan\", vagy \"windowsosan\". R\u00e1ad\u00e1sul a Java platform t\u00e1mogatja a GTK+ look and feel elemeit, ami t\u00f6bb sz\u00e1z ilyen kin\u00e9zetet tesz el\u00e9rhet\u0151v\u00e9 a Swing programok sz\u00e1m\u00e1ra. El\u00e9rhet\u0151s\u00e9g API A fogyat\u00e9kkal \u00e9l\u0151 felhaszn\u00e1l\u00f3k sz\u00e1m\u00e1ra olyan API-kat tesz el\u00e9rhet\u0151v\u00e9, amelyek t\u00e1mogatj\u00e1k a Braille kijelz\u0151k haszn\u00e1lat\u00e1t, vagy a k\u00e9perny\u0151 felolvas\u00e1st. Java 2D API A fejleszt\u0151k sz\u00e1m\u00e1ra k\u00f6nnyen beolvaszthat\u00f3v\u00e1 teszi nagy min\u0151s\u00e9g\u0171 grafik\u00e1kat, sz\u00f6vegeket \u00e9s k\u00e9peket az alkalmaz\u00e1sokba, vagy appletekbe. A Java 2D kiterjedt API-kat tartalmaz nagy min\u0151s\u00e9g\u0171 kimenetek gener\u00e1l\u00e1s\u00e1ra \u00e9s nyomtat\u00f3 eszk\u00f6z\u00f6kre val\u00f3 tov\u00e1bb\u00edt\u00e1s\u00e1ra. Internacionaliz\u00e1l\u00e1s A fejleszt\u0151k sz\u00e1m\u00e1ra lehet\u0151v\u00e9 teszik olyan applik\u00e1ci\u00f3k fejleszt\u00e9s\u00e9t, amelyeket mindenki a maga nyelve vagy kultur\u00e1lis konvenci\u00f3i szerint haszn\u00e1lhat. T\u00f6bb ezer karakter seg\u00edts\u00e9g\u00e9vel a fejleszt\u0151k az olyan nyelveket is t\u00e1mogatni tudj\u00e1k az alkalmaz\u00e1sokban, mint a jap\u00e1n vagy a k\u00ednai."},{"location":"java_se_12/#swing-feluletek-felepitese","title":"Swing fel\u00fcletek fel\u00e9p\u00edt\u00e9se","text":"<p>A Swingben \u00edrt fel\u00fcletek val\u00f3j\u00e1ban komponensek hierarchi\u00e1i, amelyeket a legmagasabb szinten l\u00e9v\u0151 komponensekbe, kont\u00e9nerekbe helyezhet\u00fcnk el. Minden Swing komponens kont\u00e9ner is egyben, amelybe \u00fajabb komponensek tehet\u0151k, de mivel azok szint\u00e9n kont\u00e9nerek, \u00edgy \u00fajabb komponenseket rendelhet\u00fcnk hozz\u00e1juk. A <code>javax.swing.JComponent</code> oszt\u00e1ly a kor\u00e1bbi grafikusfel\u00fclet-programoz\u00e1si API egyik k\u00f6zponti oszt\u00e1ly\u00e1nak, a <code>java.awt.Container-nek</code> a lesz\u00e1rmazottja.</p> <p>A legmagasabb szinten l\u00e9v\u0151 komponensek, az ablakok a hierarchi\u00e1k gy\u00f6k\u00e9relemei. H\u00e1rom olyan kont\u00e9neroszt\u00e1ly l\u00e9tezik, amely egy gy\u00f6k\u00e9relemet reprezent\u00e1lhat: a <code>JFrame</code>, a <code>JDialog</code> \u00e9s a <code>JApplet</code>, b\u00e1r az ut\u00f3bbi m\u00e1r nem t\u00e1mogatott.</p> <p>Minden GUI komponens csak egy kont\u00e9nerben szerepelhet egyszerre: ha \u00e1thelyezz\u00fck egy m\u00e1sik kont\u00e9nerbe, akkor az el\u0151z\u0151b\u0151l automatikusan t\u00f6rl\u0151dik. Azonos t\u00edpus\u00fa objektumokb\u00f3l t\u00f6bb is szerepelhet egy kont\u00e9nerben.</p> <p>Men\u00fcsort csak legfels\u0151 szinten l\u00e9v\u0151 komponensekhez adhatunk. A men\u00fcsor a tartalompanelen k\u00edv\u00fcl helyezkedik el.</p>"},{"location":"java_se_12/#hello-world-swing-program","title":"Hello World swing program","text":"<pre><code>import javax.swing.*;\npublic class HelloWorldSwing {\npublic static void main(String[] args) {\nJFrame frame = new JFrame(\"HelloWorldSwing\"); // (1)\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // (2)\nJLabel label = new JLabel(\"Hello World\"); // (3)\nframe.add(label); // (4)\n//frame.getContentPane().add(label);  // korabban\nframe.pack(); // (5)\nframe.setVisible(true); // (6)\n}\n}\n</code></pre> <ol> <li>L\u00e9trehozunk <code>JFrame</code> objektumot, a konstruktorban kapott sz\u00f6veg lesz az ablak fejl\u00e9ce.</li> <li>A <code>setDefaultCloseOperation</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel be\u00e1ll\u00edtjuk, mi t\u00f6rt\u00e9njen, ha megnyomjuk az ablakon az  et.</li> <li>A programban defini\u00e1lunk egy <code>JLabel</code> komponenst is ami egy egyszer\u0171 c\u00edmke \u00e9s a sz\u00f6vege \"Hello world\".</li> <li>Ezt a c\u00edmk\u00e9t hozz\u00e1 kell adnunk a frame-hez, hogy megjelenjen az ablakon.</li> <li>A <code>pack()</code> met\u00f3dusa egy akkora ablakot gener\u00e1l a frame-\u00fcnk sz\u00e1m\u00e1ra, amiben elf\u00e9rnek a frame-re rakott elemek.</li> <li>A <code>setVisible(true)</code> met\u00f3dussal tudjuk megjelen\u00edteni az ablakot.</li> </ol>"},{"location":"java_se_12/#swing-komponensek","title":"Swing komponensek","text":"<p>Minden Swing komponens a <code>JComponent</code> oszt\u00e1ly lesz\u00e1rmazottja, \u00edgy \u00f6r\u00f6kli annak adattagjait \u00e9s met\u00f3dusait. A lesz\u00e1rmazott oszt\u00e1lyok egyedi jellemz\u0151in t\u00fal vannak olyan tulajdons\u00e1gok, amelyekkel minden Swing komponensnek rendelkeznie kell. Ezek a tulajdons\u00e1gok a k\u00f6z\u00f6s \u0151sben, a <code>JComponent</code> oszt\u00e1lyban tal\u00e1lhat\u00f3k, \u00e9s h\u00e9t ter\u00fcletet \u00f6lelnek fel, amelyek a k\u00f6vetkez\u0151k:</p> <ul> <li>A komponens megjelen\u00edt\u00e9s\u00e9nek testreszab\u00e1sa (keret, el\u0151t\u00e9r, h\u00e1tt\u00e9r, bet\u0171k).</li> <li>A komponens \u00e1llapot\u00e1nak lek\u00e9rdez\u00e9se \u00e9s be\u00e1ll\u00edt\u00e1sa (enged\u00e9lyez\u00e9s, l\u00e1that\u00f3s\u00e1g, szerkeszthet\u0151s\u00e9g).</li> <li>A Figyel\u0151 (Observer) \u00e9s a Parancs (Command) tervez\u00e9si mint\u00e1t megval\u00f3s\u00edt\u00f3 esem\u00e9nykezel\u0151k (k\u00fcl\u00f6nb\u00f6z\u0151 listener   objektumok) hozz\u00e1rendel\u00e9se a komponenshez.</li> <li>A komponens megjelen\u00edt\u00e9se (kirajzol\u00e1sa).</li> <li>Azon komponenshierarchia kezel\u00e9se, amelynek a komponens a gy\u00f6k\u00e9releme.</li> <li>A tartalmazott komponensek elhelyezked\u00e9s\u00e9nek (layout) kezel\u00e9se.</li> <li>Inform\u00e1ci\u00f3k \u00e9s be\u00e1ll\u00edt\u00e1sok a komponens m\u00e9ret\u00e9vel \u00e9s poz\u00edci\u00f3j\u00e1val kapcsolatban.</li> </ul> <p>Ismerkedj\u00fcnk meg n\u00e9h\u00e1ny komponens t\u00edpussal a Swingen bel\u00fcl.</p>"},{"location":"java_se_12/#alapveto-swing-komponensek","title":"Alapvet\u0151 Swing komponensek","text":""},{"location":"java_se_12/#jframe","title":"JFrame","text":"<p>Ez az oszt\u00e1ly egy ablakot reprezent\u00e1l, amely tartalmazhat m\u00e1s Swing komponenseket. Az alkalmaz\u00e1s f\u0151ablaka \u00e1ltal\u00e1ban egy JFrame.</p> <pre><code>        JFrame frame=new JFrame(); // (1)\nJFrame frame=new JFrame(\"JFrame Example\"); // (2)\n</code></pre> <ol> <li>L\u00e9trehoz egy ablakot \u00fcres c\u00edmmel.</li> <li>L\u00e9trehoz egy ablakot JFrame Example c\u00edmmel.</li> </ol>"},{"location":"java_se_12/#jpanel","title":"JPanel","text":"<p>Egy olyan kont\u00e9ner, amely m\u00e1s Swing komponenseket tartalmazhat. A JPanel seg\u00edt a fel\u00fclet elemek csoportos\u00edt\u00e1s\u00e1ban \u00e9s elrendez\u00e9s\u00e9ben.</p> <pre><code>        JPanel panel=new JPanel();// (1)\n</code></pre> <ol> <li>L\u00e9trehoz egy panelt.</li> </ol>"},{"location":"java_se_12/#jbutton","title":"JButton","text":"<p>Egy gomb, amelyet a felhaszn\u00e1l\u00f3 megnyomhat, hogy kiv\u00e1ltson egy esem\u00e9nyt vagy akci\u00f3t.</p> <pre><code>        JButton okBtn=new JButton(\u201cClick\u201d); // (1)\nJButton homeBtn=new JButton(carIcon); // (2)\nJButton homeBtn2=new JButton(carIcon, \u201cCar\u201d); // (3)\n</code></pre> <ol> <li>L\u00e9trehoz egy gombot a Click felirattal.</li> <li>L\u00e9trehoz egy gombot a carIcon k\u00e9ppel.</li> <li>L\u00e9trehoz egy gombot a Click felirattal \u00e9s carIcon k\u00e9ppel.</li> </ol>"},{"location":"java_se_12/#jlabel","title":"JLabel","text":"<p>Egy olyan c\u00edmke vagy sz\u00f6veges tartalom, amelyet a felhaszn\u00e1l\u00f3nak megjelen\u00edt\u00fcnk. Sz\u00f6veges vagy k\u00e9pi tartalomhoz haszn\u00e1lhat\u00f3.</p> <pre><code>        JLabel textLabel=new JLabel(\u201cSample text\u201d); // (1)\nJLabel imgLabel=new JLabel(carIcon); // (2)\n</code></pre> <ol> <li>L\u00e9trehoz egy c\u00edmk\u00e9t a Sample text felirattal.</li> <li>L\u00e9trehoz egy c\u00edmk\u00e9t a carIcon k\u00e9ppel.</li> </ol>"},{"location":"java_se_12/#jtextfield","title":"JTextField","text":"<p>A <code>JTextField</code> oszt\u00e1lyt haszn\u00e1ljuk, ha szerkeszthet\u0151 egysoros sz\u00f6vegbeviteli mez\u0151t szeretn\u00e9nk elhelyezni a felhaszn\u00e1l\u00f3i fel\u00fcleten. K\u00e9pes esem\u00e9nyt k\u00fcldeni, ha a felhaszn\u00e1l\u00f3 \u00edr valamit a mez\u0151be.</p> <pre><code>        JTextField txtBox=new JTextField(50); // (1)\nJTextField txtBox=new JTextField(\"Teszt\"); // (2)\nJTextField txtBox=new JTextField(\"Teszt\",50); // (3)\n</code></pre> <ol> <li>L\u00e9trehoz egy beviteli mez\u0151t 50 oszlop sz\u00e9less\u00e9ggel.</li> <li>L\u00e9trehoz egy beviteli mez\u0151t Teszt sz\u00f6veggel.</li> <li>L\u00e9trehoz egy beviteli mez\u0151t Teszt sz\u00f6veggel \u00e9s 50 oszlop sz\u00e9less\u00e9ggel.</li> </ol>"},{"location":"java_se_12/#jtextarea","title":"JTextArea","text":"<p>Egy t\u00f6bbsoros sz\u00f6vegbeviteli ter\u00fclet, amely hosszabb sz\u00f6veges tartalmak megjelen\u00edt\u00e9s\u00e9re \u00e9s szerkeszt\u00e9s\u00e9re szolg\u00e1l.</p> <pre><code>        JTextArea txtBox=new JTextArea(50); // (1)\nJTextArea txtBox=new JTextArea(\"Teszt\"); // (2)\nJTextArea txtBox=new JTextArea(\"Teszt\",50); // (3)\n</code></pre> <ol> <li>L\u00e9trehoz egy t\u00f6bbsoros beviteli mez\u0151t 50 oszlop sz\u00e9less\u00e9ggel.</li> <li>L\u00e9trehoz egy t\u00f6bbsoros beviteli mez\u0151t Teszt sz\u00f6veggel.</li> <li>L\u00e9trehoz egy t\u00f6bbsoros beviteli mez\u0151t Teszt sz\u00f6veggel \u00e9s 50 oszlop sz\u00e9less\u00e9ggel.</li> </ol>"},{"location":"java_se_12/#jcombobox","title":"JComboBox","text":"<p>Egy leg\u00f6rd\u00fcl\u0151 list\u00e1t \u00e9s egy kijel\u00f6lt elemet tartalmaz\u00f3 komponens. V\u00e1laszt\u00f3list\u00e1kat hozhatunk l\u00e9tre vele.</p> <pre><code>        String country[]={\"India\",\"Aus\",\"U.S.A\",\"England\",\"Newzealand\"};  // (1)\nJComboBox cb=new JComboBox(country);  // (2)\n</code></pre> <ol> <li>Inicializ\u00e1l egy t\u00f6mb\u00f6t a leg\u00f6rd\u00fcl\u0151 lista lehets\u00e9ges elemeinek.</li> <li>L\u00e9trehoz egy leg\u00f6rd\u00fcl\u0151 list\u00e1t a <code>country</code> t\u00f6mb elemeivel.</li> </ol>"},{"location":"java_se_12/#jcheckbox","title":"JCheckBox","text":"<p>Egy jel\u00f6l\u0151n\u00e9gyzet, amely lehet\u0151v\u00e9 teszi a felhaszn\u00e1l\u00f3nak egy vagy t\u00f6bb opci\u00f3 kiv\u00e1laszt\u00e1s\u00e1t vagy kikapcsol\u00e1s\u00e1t.</p> <pre><code>        JCheckBox checkBox=new JCheckBox(); // (1)\nJCheckBox checkBox=new JCheckBox(\"Java\"); // (2)\nJCheckBox checkBox=new JCheckBox(\"Java\",true); // (3)\n</code></pre> <ol> <li>L\u00e9trehoz egy jel\u00f6l\u0151n\u00e9gyzetet felirat n\u00e9lk\u00fcl.</li> <li>L\u00e9trehoz egy jel\u00f6l\u0151n\u00e9gyzetet Java felirattal.</li> <li>L\u00e9trehoz egy jel\u00f6l\u0151n\u00e9gyzetet Java felirattal \u00e9s alap\u00e9rtelmezetten ki lesz jel\u00f6lve.</li> </ol>"},{"location":"java_se_12/#jradiobutton","title":"JRadioButton","text":"<p>Egy olyan opci\u00f3v\u00e1laszt\u00f3 gomb, amely k\u00f6z\u00fcl csak egy lehet kiv\u00e1lasztva egy csoportban.</p> <pre><code>        ButtonGroup buttonGroup=new ButtonGroup(); // (1)\nJRadioButton jRadioButton_1=new JRadioButton(); // (2)\nJRadioButton jRadioButton_2=new JRadioButton(\"Java\"); // (3)\nbuttonGroup.add(jRadioButton_1) // (4)\nbuttonGroup.add(jRadioButton_2)\n</code></pre> <ol> <li>L\u00e9trehoz egy gomb csoportot a opci\u00f3v\u00e1laszt\u00f3 gombjaink sz\u00e1m\u00e1ra</li> <li>L\u00e9trehoz egy opci\u00f3v\u00e1laszt\u00f3 gombot felirat n\u00e9lk\u00fcl.</li> <li>L\u00e9trehoz egy opci\u00f3v\u00e1laszt\u00f3 gombot Java felirattal.</li> <li>Ahhoz, hogy egyszerre csak egy gomb lehessen kiv\u00e1lasztva hozz\u00e1 kell adnunk a gombokat a csoporthoz.</li> </ol>"},{"location":"java_se_12/#jlist","title":"JList","text":"<p>Egy lista, amelyben elemeket lehet megjelen\u00edteni \u00e9s kiv\u00e1lasztani.</p> <pre><code>        DefaultListModel&lt;String&gt; l1=new DefaultListModel&lt;&gt;(); // (1)\nl1.addElement(\"Item1\"); // (2)\nl1.addElement(\"Item2\");\nl1.addElement(\"Item3\");\nl1.addElement(\"Item4\");\nJList&lt;String&gt; list=new JList&lt;&gt;(l1); // (3)\n</code></pre> <ol> <li>L\u00e9trehoz egy lista modelt a lista elemeinek.</li> <li>A lista modelhez hozz\u00e1 adjuk a lista elemeit.</li> <li>L\u00e9trehozzuk a list\u00e1t, a lista model felhaszn\u00e1l\u00e1s\u00e1val.</li> </ol>"},{"location":"java_se_12/#jtable","title":"JTable","text":"<p>Egy t\u00e1bl\u00e1zat, amelyben elemeket lehet megjelen\u00edteni \u00e9s kiv\u00e1lasztani.</p> <pre><code>        String data[][]={{\"101\",\"Amit\",\"670000\"},{\"102\",\"Jai\",\"780000\"},{\"101\",\"Sachin\",\"700000\"}}; // (1)\nString column[]={\"ID\",\"NAME\",\"SALARY\"}; // (2)\nJTable jt=new JTable(data,column); // (3)\n</code></pre> <ol> <li>L\u00e9trehoz egy k\u00e9tdimenzi\u00f3s t\u00f6mb\u00f6t a t\u00e1bl\u00e1zat adataival.</li> <li>L\u00e9trehoz egy t\u00f6mb\u00f6t a t\u00e1bl\u00e1zat oszlopneveinek.</li> <li>L\u00e9trehozzuk a t\u00e1bl\u00e1zatot az adatok \u00e9s oszlopnevek felhaszn\u00e1l\u00e1s\u00e1val.</li> </ol>"},{"location":"java_se_12/#esemenykezeles","title":"Esem\u00e9nykezel\u00e9s","text":"<p>A GUI haszn\u00e1lhat\u00f3s\u00e1g\u00e1nak egyik alapja, hogy az egyes komponensek k\u00fcl\u00f6nb\u00f6z\u0151 esem\u00e9nyeket tudnak kiv\u00e1ltani, amelyek hat\u00e1s\u00e1ra majd \"t\u00f6rt\u00e9nik valami\", azaz valami aktiv\u00e1l\u00f3dik, esetleg megny\u00edlik, vagy bez\u00e1rul egy ablak, stb.</p> <p>Minden esem\u00e9nyt, illetve az esem\u00e9ny bek\u00f6vezt\u00e9t figyelheti egy, vagy t\u00f6bb hallgat\u00f3 (a tov\u00e1bbiakban maradjunk ink\u00e1bb a listener elnevez\u00e9sn\u00e9l), amely listenerek reag\u00e1lhatnak arra, hogy az esem\u00e9ny bek\u00f6vetkezett.</p> <p>A listenerek olyan speci\u00e1lis oszt\u00e1lyok, amelyek \u00e9rtelemszer\u0171en megval\u00f3s\u00edtanak valamilyen <code>Listener</code> interface-t. A listener objektumokat az adott komponensn\u00e9l be kell jegyezz\u00fck, ehhez minden komponensnek vannak k\u00fcl\u00f6nb\u00f6z\u0151 <code>add</code> met\u00f3dusai, amelyek az esem\u00e9ny t\u00edpus\u00e1t\u00f3l f\u00fcggnek, amihez hozz\u00e1 akarjuk rendelni a listenert.</p> <p>Minden esem\u00e9ny egy objektum, amely inform\u00e1ci\u00f3kat tartalmaz az esem\u00e9nyr\u0151l \u00e9s az esem\u00e9ny forr\u00e1sobjektum\u00e1r\u00f3l. Az esem\u00e9nyek forr\u00e1sa legt\u00f6bbsz\u00f6r komponens vagy modell, de b\u00e1rmely objektumt\u00edpus funkcion\u00e1lhat esem\u00e9nyforr\u00e1sk\u00e9nt.</p> <p>Mivel minden Swing komponens az <code>AWT Compoment</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik, ez\u00e9rt mindegyik\u00fck t\u00e1mogatja az al\u00e1bbi alacsonyszint\u0171 listenerek:</p> <ul> <li><code>component listener</code> - A komponens m\u00e9ret- poz\u00edci\u00f3- vagy l\u00e1that\u00f3s\u00e1g v\u00e1ltoz\u00e1s\u00e1t figyeli.</li> <li><code>focus listener</code> - Figyeli, hogy a kompomens f\u00f3kuszba ker\u00fcl, vagy kiker\u00fcl a f\u00f3kuszb\u00f3l.</li> <li><code>key listener</code> - A gomb lenyom\u00e1sokat figyeli, csak akkor t\u00fczel, ha a kompomens f\u00f3kuszban van.</li> <li><code>mouse listener</code> - Az eg\u00e9r kattint\u00e1sokat, lenyom\u00e1sokat figyeli, tov\u00e1bb\u00e1 ha az eg\u00e9r mozg\u00e1s\u00e1t a komponensen.</li> <li><code>mouse-motion listener</code> - Az eg\u00e9r poz\u00edci\u00f3j\u00e1t figyeli a komponensen bel\u00fcl.</li> <li><code>mouse-wheel listener</code> - Az eg\u00e9r g\u00f6rg\u0151t figyeli a komponensen.</li> </ul> <p>Lehet\u0151s\u00e9g\u00fcnk van magasabb szint\u0171 semantikus esem\u00e9nyekre is feliratkozni. A szemantikus esem\u00e9nyeket felhaszn\u00e1l\u00f3i bemenet v\u00e1ltja ki: p\u00e9ld\u00e1ul a felhaszn\u00e1l\u00f3 r\u00e1kattint egy gombra. Jellemz\u0151, hogy egy szemantikus esem\u00e9ny m\u00f6g\u00f6tt alacsony szint\u0171 esem\u00e9nyek eg\u00e9sz sorozata h\u00faz\u00f3dik meg: egy gombnyom\u00e1shoz, mint szemantikus esem\u00e9nyhez az eg\u00e9rkurzor poz\u00edcion\u00e1l\u00e1s\u00e1ra, az eg\u00e9rgomb lenyom\u00e1s\u00e1ra \u00e9s felenged\u00e9s\u00e9re is sz\u00fcks\u00e9g van (ezek mind alacsony szint\u0171 m\u0171veletek). R\u00e1ad\u00e1sul ugyanazt a szemantikus esem\u00e9nyt t\u00f6bb alacsony szint\u0171 esem\u00e9nysorozattal is el\u00e9rhetj\u00fck, hiszen a gombnyom\u00e1s szemantikus esem\u00e9ny puszt\u00e1n a billenty\u0171zet seg\u00edts\u00e9g\u00e9vel is kiv\u00e1lthat\u00f3: a Tab billenty\u0171vel kiv\u00e1lasztva a gombot a Space illetve az Enter billenty\u0171 lenyom\u00e1s\u00e1val.</p> <p>A szemantikus esem\u00e9nyeket n\u00e9gy oszt\u00e1ly reprezent\u00e1lja:</p> <ul> <li><code>ActionEvent</code> - amely ezek k\u00f6z\u00fcl a leggyakoribb, gombnyom\u00e1skor, men\u00fcv\u00e1laszt\u00e1skor, listaelem-kiv\u00e1laszt\u00e1skor, illetve a   sz\u00f6vegmez\u0151n Enter le\u00fct\u00e9sekor keletkezik ilyen esem\u00e9ny.</li> <li><code>AdjustmentEvent</code> - amely egy g\u00f6rget\u0151s\u00e1v (scroll bar) haszn\u00e1lata sor\u00e1n k\u00f6vetkezik be.</li> <li><code>ItemEvent</code> - akkor \u00e1ll el\u0151, ha a felhaszn\u00e1l\u00f3 jel\u00f6l\u0151n\u00e9gyzetek seg\u00edts\u00e9g\u00e9vel vagy listaelemekb\u0151l kiv\u00e1laszt valamit.</li> <li><code>TextEvent</code> - akkor j\u00f6n l\u00e9tre, ha egy sz\u00f6vegmez\u0151 vagy sz\u00f6vegter\u00fclet tartalma megv\u00e1ltozik.</li> </ul> <p>Ha csak lehet, a szemantikus esem\u00e9nyekre kell feliratkoznunk, nem pedig az alacsony szint\u0171ekre. Ennek t\u00f6bb el\u0151nye is van: egyr\u00e9szt \u00edgy tudjuk a k\u00f3dunkat a legink\u00e1bb hordozhat\u00f3v\u00e1 \u00e9s robusztuss\u00e1 tenni, m\u00e1sr\u00e9szt pedig \u00edgy akkor is \u00e9rtes\u00fcl\u00fcnk egy esem\u00e9nyr\u0151l (p\u00e9ld\u00e1ul egy nyom\u00f3gombra kattint\u00e1sr\u00f3l), ha azt nem az elv\u00e1rt m\u00f3don v\u00e9gezt\u00e9k. Egy nyom\u00f3gomb megnyom\u00e1s\u00e1t p\u00e9ld\u00e1ul csak eg\u00e9rrel \u00e9rhetj\u00fck el, hanem a billenty\u0171zettel is. Ha ekkor a szemantikus esem\u00e9ny helyett csup\u00e1n arra iratkoztunk volna fel, hogy egy adott ter\u00fcleten (ahol a gomb van) t\u00f6rt\u00e9nik-e kattint\u00e1s \u00e9s felenged\u00e9s eg\u00e9rgomb seg\u00edts\u00e9g\u00e9vel, akkor a billenty\u0171zet seg\u00edts\u00e9g\u00e9vel v\u00e9gzett \u201egombnyom\u00e1sr\u00f3l\u201d bizony lemaradn\u00e1nk.</p> <p>A k\u00f6vetkez\u0151 t\u00e1bl\u00e1zat a komponensek \u00e9s a hozz\u00e1juk rendelhet\u0151 figyel\u0151 objektumok t\u00edpus\u00e1t tartalmazza:</p> Komponens ActionListener CaretListener ChangeListener DocumentListener,UndoableEditListener ItemListener ListSelectionListener WindowListener button check box color chooser combo box dialog file chooser frame list password field radio button table text area text field"},{"location":"java_se_12/#gomb-esemenykezelese","title":"Gomb esem\u00e9nykezel\u00e9se","text":"<pre><code>public class SwingApplication {\npublic static void main(String[] args) {\nJFrame frame = new JFrame(\"SwingApplication\"); // (1)\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // (2)\nJPanel panel = new JPanel(); // (3)\nJButton button = new JButton(\"Swing button\"); // (4)\nbutton.addActionListener(new ActionListener() { // (5)\n@Override\npublic void actionPerformed(ActionEvent e) { // (6)\nSystem.out.println(\"Hello World!\"); // (7)\n}\n});\npanel.add(button); // (8)\nframe.add(panel); // (9)\nframe.pack(); // (10)\nframe.setVisible(true); // (11)\n}\n}\n</code></pre> <ol> <li>L\u00e9trehozunk <code>JFrame</code> objektumot, a konstruktorban kapott sz\u00f6veg lesz az ablak fejl\u00e9ce.</li> <li>A <code>setDefaultCloseOperation</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel be\u00e1ll\u00edtjuk, mi t\u00f6rt\u00e9njen, ha megnyomjuk az ablakon az  et.</li> <li>L\u00e9trehozunk egy <code>JPanel</code> objektumot, amin a gombot szeretn\u00e9nk majd elhelyezni.</li> <li>L\u00e9trehozunk egy <code>JButton</code> objektumot, a Swing button felirattal.</li> <li>A <code>JButton</code> objektumhoz hozz\u00e1adunk egy <code>ActionListener</code> objektumot, ami a gombnyom\u00e1st fogja kezelni.</li> <li>A gomb megnyom\u00e1sa eset\u00e9n az <code>ActionListener</code> objektumunk <code>actionPerformed</code> met\u00f3dusa fog megh\u00edv\u00f3dni.</li> <li>Az <code>actionPerformed</code> met\u00f3dusban ki\u00edrjuk a konzolra a Hello World! sz\u00f6veget.</li> <li>A panelhez hozz\u00e1adjuk a gombot.</li> <li>Az <code>actionPerformed</code> met\u00f3dusban ki\u00edrjuk a konzolra a Hello World! sz\u00f6veget.</li> <li>Az <code>actionPerformed</code> met\u00f3dusban ki\u00edrjuk a konzolra a Hello World! sz\u00f6veget.</li> <li>Az <code>actionPerformed</code> met\u00f3dusban ki\u00edrjuk a konzolra a Hello World! sz\u00f6veget.</li> </ol>"},{"location":"java_se_12/#elrendezeskezelok-layout-menedzserek","title":"Elrendez\u00e9skezel\u0151k (Layout menedzserek)","text":"<p>Egy elrendez\u00e9skezel\u0151 vagy elhelyez\u00e9skezel\u0151 a <code>LayoutManager</code> interf\u00e9szt implement\u00e1l\u00f3 objektum, amely a komponensek m\u00e9ret\u00e9t \u00e9s poz\u00edci\u00f3j\u00e1t hat\u00e1rozza meg egy t\u00e1rol\u00f3n bel\u00fcl.A Swing komponensek alap\u00e9rtelmezett elrendez\u00e9skezel\u0151vel rendelkeznek, amely p\u00e9ld\u00e1ul panelek eset\u00e9ben a <code>FlowLayout</code>, m\u00edg tartalompanelekn\u00e9l a <code>BorderLayout</code>. Az alap\u00e9rtelmezett elrendez\u00e9skezel\u0151k lev\u00e1lthat\u00f3k, erre azonban legt\u00f6bbsz\u00f6r nincs sz\u00fcks\u00e9g.</p> <p>Amennyiben nem haszn\u00e1lunk elhelyez\u00e9skezel\u0151t, abszol\u00fat poz\u00edcion\u00e1l\u00e1st kell v\u00e9gezn\u00fcnk, amely \u00e9rtelm\u00e9ben minden komponensnek explicit m\u00f3don kell megadnunk a m\u00e9ret\u00e9t \u00e9s a poz\u00edci\u00f3j\u00e1t a t\u00e1rol\u00f3n bel\u00fcl. Ezek az \u00e9rt\u00e9kek r\u00f6gz\u00edtettek, amelyek p\u00e9ld\u00e1ul az ablak \u00e1tm\u00e9retez\u00e9sekor sem friss\u00fclnek. \u00c9ppen ez\u00e9rt ez ker\u00fclend\u0151.</p>"},{"location":"java_se_12/#border-layout","title":"Border Layout","text":"<p>A <code>BorderLayout</code> a tartalompanelek (content pane) alap\u00e9rtelmezett elrendez\u00e9skezel\u0151je, \u00edgy az \u00f6sszes legfels\u0151 szint\u0171 kont\u00e9nerben (ablakkeretben, dial\u00f3gusablakban \u00e9s appletben) ezt haszn\u00e1lhatjuk alapb\u00f3l. A rendelkez\u00e9sre \u00e1ll\u00f3 ter\u00fcletet \u00f6t r\u00e9szre osztja fel: fels\u0151, als\u00f3, jobb oldali, bal oldali \u00e9s k\u00f6z\u00e9ps\u0151, ahogyan az az \u00e1br\u00e1n is l\u00e1that\u00f3.</p> <p> </p> Border Layout"},{"location":"java_se_12/#box-layout","title":"Box Layout","text":"<p>A <code>BoxLayout</code> a komponenseket egy sorba vagy egy oszlopba helyezi, figyelembe v\u00e9ve a komponens \u00e1ltal ig\u00e9nyelt maxim\u00e1lis m\u00e9retet.</p> <p> </p> Box Layout"},{"location":"java_se_12/#card-layout","title":"Card Layout","text":"<p>A <code>CardLayout</code> seg\u00edts\u00e9g\u00e9vel olyan fel\u00fclet val\u00f3s\u00edthat\u00f3 meg, ahol a k\u00fcl\u00f6nb\u00f6z\u0151 id\u0151pontokban k\u00fcl\u00f6nf\u00e9le komponensek jelennek meg. Tulajdonk\u00e9ppen f\u00fclek seg\u00edts\u00e9g\u00e9vel el\u00e9rt lapokk\u00e9nt gondolhatnuk r\u00e1, ahol sokszor t\u00e9nyleges f\u00fclek helyett egy combobox seg\u00edts\u00e9g\u00e9vel v\u00e1lthatunk az egyes lapok k\u00f6z\u00f6tt.</p> <p> </p> Card Layout"},{"location":"java_se_12/#flow-layout","title":"Flow Layout","text":"<p>A <code>FlowLayout</code> a <code>JPanel</code>-ek alap\u00e9rtelmezett elrendez\u00e9skezel\u0151je, sorfolytonosan t\u00f6lti ki a rendelkez\u00e9sre \u00e1ll\u00f3 teret. Ha egy sorban m\u00e1r nincs elegend\u0151 helye egy elhelyezend\u0151 komponens sz\u00e1m\u00e1ra, akkor \u00faj sort kezd.</p> <p> </p> Flow Layout"},{"location":"java_se_12/#grid-layout","title":"Grid Layout","text":"<p>A <code>GridLayout</code> a komponensek sz\u00e1m\u00e1ra azonos m\u00e9retet hat\u00e1roz meg egy n\u00d7m-es r\u00e1csh\u00e1l\u00f3ban.</p> <p> </p> Grid Layout"},{"location":"java_se_12/#gridbag-layout","title":"GridBag Layout","text":"<p>A <code>GridBagLayout</code> nagyon fejlett \u00e9s rugalmas elrendez\u00e9skezel\u0151, a <code>GridLayout</code> tov\u00e1bbfejleszt\u00e9sekn\u00e9t j\u00f6tt l\u00e9tre. A komponenseket szint\u00e9n egy r\u00e1csh\u00e1l\u00f3 alapj\u00e1n helyezi el, de megengedi, hogy egy-egy komponens t\u00f6bb sort, illetve oszlopot is elfoglaljon. A r\u00e1csh\u00e1l\u00f3 egyes sorai ak\u00e1r elt\u00e9r\u0151 magass\u00e1g\u00faak, oszlopai pedig ak\u00e1r elt\u00e9r\u0151 sz\u00e9less\u00e9g\u0171ek is lehetnek. Nagyfok\u00fa rugalmass\u00e1ga mellett az egyik legnehezebben haszn\u00e1lhat\u00f3 elrendez\u00e9skezel\u0151 is egyben.</p> <p> </p> GridBag Layout"},{"location":"java_se_12/#group-layout","title":"Group Layout","text":"<p>A <code>GroupLayout</code> a grafikus felhaszn\u00e1l\u00f3i fel\u00fcletet drag-and-drop m\u00f3dszerrel \u00f6sze\u00e1ll\u00edt\u00f3 integr\u00e1lt fejleszt\u0151i keretrendszerek sz\u00e1m\u00e1ra j\u00f6tt l\u00e9tre. K\u00fcl\u00f6n-k\u00fcl\u00f6n foglalkozik a v\u00edzszintes \u00e9s a f\u00fcgg\u0151leges elrendez\u00e9ssel, vagyis minden komponens hely\u00e9t k\u00e9tszer kell defini\u00e1lni: egyszer v\u00edzszintesen, egyszer pedig f\u00fcgg\u0151legesen kell elhelyezni.</p> <p> </p> Group Layout"},{"location":"java_se_12_ex/","title":"Java Swing gyakorl\u00f3 feladatok","text":""},{"location":"java_se_12_ex/#1-feladat","title":"1. Feladat","text":"<p>K\u00e9sz\u00edts egy Java Swing alkalmaz\u00e1st, amiben pozit\u00edv eg\u00e9sz sz\u00e1mok faktori\u00e1lis\u00e1t sz\u00e1molod ki. K\u00e9sz\u00edts egy beviteli mez\u0151t, ahol a felhaszn\u00e1l\u00f3 meg tudja adni a sz\u00e1mot aminek a faktori\u00e1lis\u00e1t ki szeretn\u00e9 sz\u00e1molni \u00e9s legyen egy sz\u00f6veg mez\u0151, ahol megjelen\u00edted a sz\u00e1m faktori\u00e1lis\u00e1t. A megval\u00f3s\u00edt\u00e1s t\u00f6rt\u00e9nhez gomb seg\u00edts\u00e9g\u00e9vel vagy a sz\u00f6vegmez\u0151 esem\u00e9nyfigyel\u00e9s\u00e9vel is.</p> <p>     P\u00e9lda megval\u00f3s\u00edt\u00e1s</p>"},{"location":"java_se_12_ex/#2-feladat","title":"2. Feladat","text":"<p>K\u00e9sz\u00edts egy Java Swing alkalmaz\u00e1st, ahol kocka dob\u00e1st kell szimul\u00e1lnod. A felhaszn\u00e1l\u00f3 megadhatja a kocka t\u00edpus\u00e1t \u00e9s hogy h\u00e1ny darab kock\u00e1t szeretne dobni. A gomb megnyom\u00e1s\u00e1ra pedig egy el\u0151ugr\u00f3 \u00fczenetbe jelen\u00edtsd meg a kapott sz\u00e1mot.</p> <p>     P\u00e9lda megval\u00f3s\u00edt\u00e1s</p>"},{"location":"java_se_12_ex/#3-feladat","title":"3. Feladat","text":"<p>K\u00e9sz\u00edts egy programot, ami k\u00fcl\u00f6nb\u00f6z\u0151 aut\u00f3k C02 kibocs\u00e1jt\u00e1si adatait olvassa be \u00e9s dolgozza fel. Az alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se sor\u00e1n a <code>FuelType</code> enumot \u00e9s a <code>CarEmissionInfo</code> oszt\u00e1lyt haszn\u00e1ld.</p> <pre><code>public enum FuelType {\nREGULAR_GASOLINE, //X\nPREMIUM_GASOLINE, //Z\nDIESEL, // D\nE85, //E\nNATURAL_GAS, // N\nUNKNOWN\n}\n</code></pre> <p>Egy enum a k\u00fcl\u00f6nb\u00f6z\u0151 \u00fczemanyag t\u00edpusokkal.</p> <pre><code>public class CarEmissionInfo {\nprivate final String manufacturer;\nprivate final String model;\nprivate final double engineSize;\nprivate final FuelType fuelType;\nprivate final int co2Emission;\npublic CarEmissionInfo(String manufacturer, String model, double engineSize, FuelType fuelType, int co2Emission) {\nthis.manufacturer = manufacturer;\nthis.model = model;\nthis.engineSize = engineSize;\nthis.fuelType = fuelType;\nthis.co2Emission = co2Emission;\n}\n//... Getter, setter, toString met\u00f3dusok\n}\n</code></pre> <p>Az aut\u00f3 adatait tartalmaz\u00f3 oszt\u00e1ly.</p> <p>A feladatod az emission.csv f\u00e1jl beolvas\u00e1sa \u00e9s a megfelel\u0151 objektumot l\u00e9trehoz\u00e1sa a rekordok alapj\u00e1n.</p> emission.csv<pre><code>Make,Model,Vehicle Class,Engine Size(L),Cylinders,Transmission,Fuel Type,Fuel Consumption City (L/100 km),Fuel Consumption Hwy (L/100 km),Fuel Consumption Comb (L/100 km),Fuel Consumption Comb (mpg),CO2 Emissions(g/km)\nACURA,ILX,COMPACT,2,4,AS5,Z,9.9,6.7,8.5,33,196\nACURA,ILX,COMPACT,2.4,4,M6,Z,11.2,7.7,9.6,29,221\nACURA,ILX HYBRID,COMPACT,1.5,4,AV7,Z,6,5.8,5.9,48,136\nACURA,MDX 4WD,SUV - SMALL,3.5,6,AS6,Z,12.7,9.1,11.1,25,255\n...\n</code></pre> <p>A feldolgoz\u00e1s sor\u00e1n, nem kell az \u00f6sszes oszlopot felhaszn\u00e1lni!</p> <p>A feldolgozott adatokat jelen\u00edtsd meg egy Swing alkalmaz\u00e1sban. K\u00e9sz\u00edts egy <code>JFrame</code>-t, ami egy t\u00e1bl\u00e1zatot tartalmaz \u00e9s egy gombot. A t\u00e1bl\u00e1zatban jelen\u00edtsd meg a beolvasott <code>CarEmissionInfo</code> lista elemeit a gomb megnyom\u00e1s\u00e1ra pedig ny\u00edljon meg egy \u00faj <code>JDialog</code>. ahol egy \u00faj <code>CarEmissionInfo</code> objektum adatait lehet megadni \u00e9s az Ok gomb megnyom\u00e1s\u00e1ra ker\u00fclj\u00f6n be a t\u00e1bl\u00e1zatba.</p> <p> A f\u0151 ablak</p> <p> Dial\u00f3gus ablak az \u00faj rekord felv\u00e9tel\u00e9hez</p>"},{"location":"java_se_13_date/","title":"Date","text":""},{"location":"java_se_13_date/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A Java 8 \u00faj API-kat vezetett be a <code>Date</code> \u00e9s <code>Time</code> funkci\u00f3khoz, hogy kik\u00fcsz\u00f6b\u00f6lje a r\u00e9gebbi <code>java.util.Date</code> \u00e9s <code>java.util.Calendar</code> hi\u00e1nyoss\u00e1gait. Ebben a szekci\u00f3ban megismed\u00fcnk az \u00faj d\u00e1tum kezel\u0151 oszt\u00e1lyokkal \u00e9s megn\u00e9zz\u00fck milyen hi\u00e1nyoss\u00e1gokat oldott meg az \u00faj API.</p>"},{"location":"java_se_13_date/#problemak-a-regebbi-datum-api-val","title":"Probl\u00e9m\u00e1k a r\u00e9gebbi D\u00e1tum API-val","text":"<ul> <li>Sz\u00e1l biztons\u00e1g \u2013 A <code>Date</code> \u00e9s <code>Calendar</code> oszt\u00e1lyok nem voltak sz\u00e1lbiztosak, \u00edgy a fejleszt\u0151kre h\u00e1rult a feladat,   hogy megoldj\u00e1k a konkurenci\u00e1b\u00f3l fakad\u00f3 gondokat. Az \u00faj keretrendszerben a d\u00e1tum kezel\u0151 oszt\u00e1lyok m\u00e1r immutable   objektumok, vagyis a l\u00e9trehoz\u00e1s ut\u00e1n nem lehet m\u00f3dos\u00edtani az \u00e9rt\u00e9k\u00fcket \u00e9s sz\u00e1lbiztosak, \u00edgy a konkurencia felold\u00e1s\u00e1ra   m\u00e1r nem kell a fejleszt\u0151knek saj\u00e1t megold\u00e1sokat implement\u00e1lniuk.</li> <li>Rosszul megtervezett API \u2013 A kor\u00e1bbi API rosszul volt megtervezve \u00e9s nem t\u00e1mogattak megfelel\u0151 met\u00f3dusokat a   d\u00e1tumok megfelel\u0151 haszn\u00e1lat\u00e1hoz. Az \u00faj Date/Time API ISO-k\u00f6zpont\u00fa, \u00e9s konzisztens modelleket haszn\u00e1l a d\u00e1tum,   id\u0151, id\u0151tartam \u00e9s id\u0151szakok haszn\u00e1lathoz. A leg\u00e1ltal\u00e1nosabb m\u0171veleteket t\u00e1mogat\u00f3 seg\u00e9dmet\u00f3dusok sz\u00e9les sk\u00e1l\u00e1ja   seg\u00edti a d\u00e1tumok haszn\u00e1lat\u00e1t.</li> <li>Id\u0151z\u00f3n\u00e1k \u2013 A r\u00e9gebbi d\u00e1tum modellek nem t\u00e1mogattak id\u0151z\u00f3n\u00e1kat \u00edgy a fejleszt\u0151knek kellett saj\u00e1t megold\u00e1sokat   implement\u00e1lni, ha id\u0151z\u00f3n\u00e1kat szerettek volna kezelni. A Java 8 -ban behozott \u00faj d\u00e1tum oszt\u00e1lyok m\u00e1r k\u00e9pesek k\u00fcl\u00f6nb\u00f6z\u0151   id\u0151z\u00f3n\u00e1kat kezelni.</li> </ul>"},{"location":"java_se_13_date/#localdate-localtime-es-localdatetime","title":"LocalDate, LocalTime \u00e9s LocalDateTime","text":"<p>A leggyakrabban haszn\u00e1lt oszt\u00e1lyok a <code>LocalDate</code>, <code>LocalTime</code> \u00e9s <code>LocalDateTime</code>. Ahogy a nev\u00fck is mutatja, a helyi d\u00e1tumot/id\u0151t reprezent\u00e1lj\u00e1k a haszn\u00e1l\u00f3 kontexus\u00e1ban. Ezeket az oszt\u00e1lyokat f\u0151leg akkor haszn\u00e1ljuk, ha az id\u0151z\u00f3n\u00e1kat nem kell kifejezetten megadni.</p>"},{"location":"java_se_13_date/#localdate","title":"LocalDate","text":"<p>A <code>LocalDate</code> egy d\u00e1tumot reprezent\u00e1l ISO form\u00e1tumban (\u00e9\u00e9\u00e9\u00e9-hh-nn) id\u0151 n\u00e9lk\u00fcl. Haszn\u00e1lhatjuk olyan d\u00e1tumok t\u00e1rol\u00e1s\u00e1ra, mint p\u00e9ld\u00e1ul a sz\u00fclet\u00e9snapok.</p> <pre><code>        LocalDate localDate=LocalDate.now(); // (1)\nlocalDate=LocalDate.of(2015,2,20); // (2)\nlocalDate=LocalDate.parse(\"2015-02-20\"); // (3)\n</code></pre> <ol> <li>L\u00e9trehozhatunk <code>LocalDate</code> objektumot az aktu\u00e1lis d\u00e1tummal</li> <li>Haszn\u00e1lhatjuk a konstruktor\u00e1t</li> <li>El\u0151\u00e1ll\u00edthatjuk egy String-b\u0151l is</li> </ol> <p>A <code>LocalDate</code> oszt\u00e1ly sz\u00e1mos extra met\u00f3dust tartalmaz amivel m\u00f3dos\u00edtani tudjuk a d\u00e1tum objektumot.</p> <pre><code>        LocalDate tomorrow=LocalDate.now().plusDays(1); // (1)\nLocalDate previousMonthSameDay=LocalDate.now().minus(1,ChronoUnit.MONTHS); // (2)\n</code></pre> <ol> <li>A megl\u00e9v\u0151 d\u00e1tumhoz hozz\u00e1adhatunk egy napot</li> <li>Vagy kivonhatunk egy h\u00f3napot</li> </ol> <p>Tov\u00e1bbi d\u00e1tum manupul\u00e1ci\u00f3s met\u00f3dusok</p> <pre><code>        DayOfWeek today=LocalDate.now().getDayOfWeek();\nint todayInt=LocalDate.now().getDayOfMonth();\nboolean leapYear=LocalDate.now().isLeapYear();\nboolean notBefore=LocalDate.parse(\"2016-06-12\")\n.isBefore(LocalDate.parse(\"2016-06-11\"));\nboolean isAfter=LocalDate.parse(\"2016-06-12\")\n.isAfter(LocalDate.parse(\"2016-06-11\"));\n</code></pre>"},{"location":"java_se_13_date/#localtime","title":"LocalTime","text":"<p>A <code>LocalTime</code> d\u00e1tum n\u00e9lk\u00fcli id\u0151pontot reprezent\u00e1l.</p> <pre><code>        LocalTime now=LocalTime.now(); // (1)\nnow=LocalTime.of(6,30); // (2)\nnow=LocalTime.parse(\"06:30\"); // (3)\n</code></pre> <ol> <li>L\u00e9trehozhatunk <code>LocalTime</code> objektumot az aktu\u00e1lis id\u0151ponttal</li> <li>Haszn\u00e1lhatjuk a konstruktor\u00e1t</li> <li>Vagy el\u0151\u00e1ll\u00edthatjuk egy String-b\u0151l is</li> </ol>"},{"location":"java_se_13_date/#localdatetime","title":"LocalDateTime","text":"<p>A <code>LocalDateTime</code> a d\u00e1tum \u00e9s id\u0151pont kombin\u00e1ci\u00f3j\u00e1t tartalmazza.</p> <pre><code>        LocalDateTime localDateTime=LocalDateTime.now();  // (1)\nLocalDateTime.of(2015,Month.FEBRUARY,20,06,30);  // (2)\nLocalDateTime.parse(\"2015-02-20T06:30:00\");  // (3)\n</code></pre> <ol> <li>L\u00e9trehozhatunk <code>LocalTime</code> objektumot az aktu\u00e1lis d\u00e1tummal \u00e9s id\u0151vel</li> <li>Haszn\u00e1lhatjuk a LocalDateTime</li> <li>Vagy el\u0151\u00e1ll\u00edthatjuk egy String-b\u0151l is</li> </ol>"},{"location":"java_se_13_date/#zoneddatetime-api","title":"ZonedDateTime API","text":"<p>A Java 8 biztos\u00edtja a <code>ZonedDateTime</code>-ot, amikor az id\u0151z\u00f3na-specifikus d\u00e1tummal \u00e9s id\u0151ponttal kell foglalkoznunk. A <code>ZoneId</code> egy azonos\u00edt\u00f3, amely k\u00fcl\u00f6nb\u00f6z\u0151 z\u00f3n\u00e1kat jel\u00f6l. K\u00f6r\u00fclbel\u00fcl 40 k\u00fcl\u00f6nb\u00f6z\u0151 id\u0151z\u00f3na l\u00e9tezik, \u00e9s a <code>ZoneId</code> ezeket a k\u00f6vetkez\u0151k\u00e9ppen \u00e1br\u00e1zolja.</p> <p>A lehets\u00e9ges id\u0151z\u00f3n\u00e1kat az al\u00e1bbi met\u00f3dussal kaphatjuk meg:</p> <pre><code>        Set&lt;String&gt; allZoneIds=ZoneId.getAvailableZoneIds();\n</code></pre> <p>Vagy elk\u00e9rhetj\u00fck egy id\u0151z\u00f3na azonos\u00edt\u00f3j\u00e1t a k\u00f6vetkez\u0151 met\u00f3dussal:</p> <pre><code>        ZoneId zoneId=ZoneId.of(\"Europe/Paris\");\n</code></pre> <p>Maga a <code>ZonedDateTime</code>-t pedig egy <code>LocalDateTime</code> \u00e9s <code>ZoneId</code> felhaszn\u00e1l\u00e1s\u00e1val tudjuk l\u00e9trehozni vagy feldolgozhatunk egy Stringet is.</p> <pre><code>        ZonedDateTime zonedDateTime=ZonedDateTime.of(localDateTime,zoneId);\nZonedDateTime.parse(\"2015-05-03T10:15:30+01:00[Europe/Paris]\");\n</code></pre>"},{"location":"java_se_13_date/#period-es-duration","title":"Period \u00e9s Duration","text":"<p>A <code>Period</code> oszt\u00e1ly id\u0151mennyis\u00e9g\u00e9t tartalmaz \u00e9vekben, h\u00f3napokban \u00e9s napokban kifejezve, a <code>Duration</code> oszt\u00e1ly pedig m\u00e1sodpercben \u00e9s nanoszekundumban kifejezve.</p> <p>A <code>Period</code> oszt\u00e1lyt arra haszn\u00e1ljuk, hogy m\u00f3dos\u00edtsunk egy megl\u00e9v\u0151 d\u00e1tumon vagy a k\u00fcl\u00f6nbs\u00e9g kisz\u00e1m\u00edt\u00e1s\u00e1ra k\u00e9t d\u00e1tum k\u00f6z\u00f6tt.</p> <pre><code>        LocalDate initialDate=LocalDate.parse(\"2007-05-10\");\n</code></pre> <p>M\u00f3dos\u00edthatjuk a d\u00e1tumot a Period seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>        LocalDate finalDate=initialDate.plus(Period.ofDays(5));\n</code></pre> <p>A <code>Period</code> oszt\u00e1ly sz\u00e1mos lek\u00e9rdez\u0151 met\u00f3dust tartalmaz a k\u00fcl\u00f6nb\u00f6z\u0151 id\u0151egys\u00e9gek lek\u00e9r\u00e9shez, p\u00e9ld\u00e1ul: <code>getYears</code> , <code>getMonths</code> \u00e9s <code>getDays</code>.</p> <pre><code>        int daysBetween=Period.between(initialDate,finalDate).getDays();\n</code></pre> <p>A <code>Period</code> oszt\u00e1lyhoz haszonl\u00f3an a <code>Duration</code> oszt\u00e1lyt haszn\u00e1ljuk, amikor <code>Time</code> objektumokkal dolgozunk.</p> <p>Hozzunk l\u00e9tre egy <code>LocalTime</code> objektumot, majd k\u00e9sz\u00edts\u00fcnk egy m\u00e1sikat, ami 30 m\u00e1sodperccel k\u00e9s\u0151bbi id\u0151pontot tartalmaz.</p> <pre><code>        LocalTime initialTime=LocalTime.of(6,30,0);\nLocalTime finalTime=initialTime.plus(Duration.ofSeconds(30));\n</code></pre> <p>Majd a <code>Duration</code> oszt\u00e1ly felhaszn\u00e1l\u00e1s\u00e1val megn\u00e9zhetj\u00fck a k\u00fcl\u00f6nbs\u00e9get m\u00e1sodpercben a k\u00e9t <code>Time</code> objektumunk k\u00f6z\u00f6tt.</p> <pre><code>        long differenceInSeconds=Duration.between(initialTime,finalTime).getSeconds();\n</code></pre>"},{"location":"java_se_13_ex/","title":"String \u00e9s Date gyakorl\u00f3 feladatok","text":""},{"location":"java_se_13_ex/#string","title":"String","text":""},{"location":"java_se_13_ex/#1-feladat","title":"1. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>isPalindrome(String s)</code> f\u00fcggv\u00e9nyt, ami ellen\u0151rzi, hogy a param\u00e9ter\u00fcl kapott String palindr\u00f3m-e.</p>"},{"location":"java_se_13_ex/#2-feladat","title":"2. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>occurences(String s, String substring)</code> f\u00fcggv\u00e9nyt, aminek vissza kell t\u00e9rnie a param\u00e9ter\u00fcl kapott substring el\u0151fordul\u00e1si sz\u00e1m\u00e1val az eredeti sz\u00f6vegben.</p>"},{"location":"java_se_13_ex/#3-feladat","title":"3. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>reverse(String s)</code> f\u00fcggv\u00e9nyt, ami visszat\u00e9r a megford\u00edtott Stringgel.</p>"},{"location":"java_se_13_ex/#4-feladat","title":"4. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>longestCommonPrefix(List&lt;String&gt; stringList)</code> f\u00fcggv\u00e9nyt, ami visszat\u00e9r a leghosszabb prefixxel, ami illeszkedik a param\u00e9ter\u00fcl kapott String lista \u00f6sszes elem\u00e9re.</p>"},{"location":"java_se_13_ex/#5-feladat","title":"5. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>isIsomorphic(String s1, String s2)</code> f\u00fcgggv\u00e9nyt, ami ellen\u0151rzi, hogy a k\u00e9t String izomorf-e.</p> String izomorfizmus <p>K\u00e9t string izomorf, ha a bet\u0171k az egyikb\u0151l lek\u00e9pezhet\u0151ek a m\u00e1sikba.</p> <ul> <li>aab \u00e9s xxy Stringek izomorfak, a lek\u00e9pez\u00e9s a-&gt;x \u00e9s b-&gt;y</li> <li>aab \u00e1s xyy Stringek nem izomorfak, mert nincs olyan lek\u00e9pez\u00e9s, ami egyenl\u0151v\u00e9 tenn\u00e9 a k\u00e9t stringet</li> </ul>"},{"location":"java_se_13_ex/#6-feladat","title":"6. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>isAnagram(String s1, String s2)</code> f\u00fcgggv\u00e9nyt, ami ellen\u0151rzi, hogy a k\u00e9t String egym\u00e1s anagramm\u00e1ja-e.</p> Anagram <p>A bet\u0171k \u00e1trendez\u00e9s\u00e9vel az egyik sz\u00f3b\u00f3l a m\u00e1sikat kapjuk (\u00e9let -&gt; \u00e9tel)</p>"},{"location":"java_se_13_ex/#7-feladat","title":"7. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>caesarCode(String message, int offset)</code> f\u00fcgggv\u00e9nyt, ami Ceaser k\u00f3dol\u00e1st haszn\u00e1lva, titkos\u00edtja az eredeti Stringet.</p>"},{"location":"java_se_13_ex/#8-feladat","title":"8. Feladat","text":"<p>N\u00e9zd meg h\u00e1ny nap telt a sz\u00fclet\u00e9snapod \u00e9s a mai d\u00e1tum k\u00f6z\u00f6tt.</p>"},{"location":"java_se_13_ex/#9-feladat","title":"9. Feladat","text":"<p>N\u00e9zd meg milyen napra fog esni a 100. sz\u00fclet\u00e9snapod.</p>"},{"location":"java_se_13_string/","title":"String","text":""},{"location":"java_se_13_string/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A Java programoz\u00e1si nyelv egyik legfontosabb \u00e9s leggyakrabban haszn\u00e1lt adatt\u00edpusa a String. A String az egyszer\u0171 karakterl\u00e1ncokat, szavakat, mondatokat \u00e9s ak\u00e1r hosszabb sz\u00f6vegeket is k\u00e9pes reprezent\u00e1lni. Ebben a fejezetben \u00e1ttekintj\u00fck a Java String oszt\u00e1ly\u00e1nak alapvet\u0151 jellemz\u0151it, m\u0171veleteit, \u00e9s bemutatjuk, hogy hogyan lehet hat\u00e9konyan haszn\u00e1lni a sz\u00f6vegek kezel\u00e9s\u00e9re.</p>"},{"location":"java_se_13_string/#string-osztaly","title":"String oszt\u00e1ly","text":"<p>A String oszt\u00e1ly egy kiemelten fontos adatt\u00edpus a Java-ban, \u00e9s a <code>Java Standard k\u00f6nyvt\u00e1r</code> r\u00e9sze. Az oszt\u00e1ly immut\u00e1bilis, vagyis egyszer l\u00e9trehozott String objektumot nem lehet megv\u00e1ltoztatni. Ez azt jelenti, hogy a String objektumok \u00e9rt\u00e9ke nem m\u00f3dos\u00edthat\u00f3, csak \u00faj String objektumok hozhat\u00f3k l\u00e9tre.</p> <p>Stringet t\u00f6bb f\u00e9le m\u00f3don tudunk l\u00e9trehozni:</p> <pre><code>        String szoveg1=\"Hello, World!\"; // (1)\nString szoveg2=new String();     // (2)\nString szoveg3=new String(\"Java\"); // (3)\n</code></pre> <ol> <li>\u00c9rt\u00e9kad\u00e1ssal t\u00f6rt\u00e9n\u0151 inicializ\u00e1ci\u00f3</li> <li>\u00dcres sztring l\u00e9trehoz\u00e1sa konstuktor h\u00edv\u00e1ssal</li> <li>L\u00e9trehoz\u00e1s liter\u00e1lb\u00f3l</li> </ol> <p>Mivel a String az egyik leggyakrabban haszn\u00e1lt oszt\u00e1ly, \u00edgy a nyelv az automatikus konstruktorh\u00edv\u00e1s lehet\u0151s\u00e9g\u00e9t is felk\u00edn\u00e1lja, azaz new h\u00edv\u00e1s n\u00e9lk\u00fcl, egyszer\u0171 \u00e9rt\u00e9kad\u00e1ssal is inicializ\u00e1lhat\u00f3 a String egy karaktersorozattal, vagy sztring konstanssal.</p> <p>Azonban a Stringek annyival t\u00f6bbek m\u00e1r \u00edgy is a karakter sorozatokn\u00e1l, hogy \u00e9rtelmezve van rajtuk a \"+\" oper\u00e1tor, aminek hat\u00e1s\u00e1ra k\u00e9t sztring \u00f6sszef\u0171zhet\u0151, \u00e9s eredm\u00e9ny\u00fcl keletkezik egy harmadik String. Ez a \"+\" oper\u00e1tor igen \u00e9rdekes olyan \u00e9rtelemben, hogy a Java a String kiv\u00e9tel\u00e9vel nem teszi lehet\u0151v\u00e9 ennek az oper\u00e1tornak a fel\u00fcldefini\u00e1l\u00e1s\u00e1t.</p>"},{"location":"java_se_13_string/#string-osztaly-metodusai","title":"String oszt\u00e1ly met\u00f3dusai","text":"<p>A String oszt\u00e1ly sz\u00e1mos be\u00e9p\u00edtett met\u00f3dust k\u00edn\u00e1l a sz\u00f6vegek manipul\u00e1l\u00e1s\u00e1hoz:</p> <p><code>length()</code> - Ez a met\u00f3dus visszaadja a String hossz\u00e1t, azaz a benne tal\u00e1lhat\u00f3 karakterek sz\u00e1m\u00e1t.</p> <pre><code>    String szoveg=\"Hello, World!\";\nint hossz=szoveg.length(); // (1)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke 12</li> </ol> <p><code>charAt(index)</code> - Ez a met\u00f3dus visszaadja a megadott indexen tal\u00e1lhat\u00f3 karaktert a String-b\u0151l. Az index 0-t\u00f3l indul.</p> <pre><code>        String szoveg=\"Hello, World!\";\nchar karakter=szoveg.charAt(4); // (1)\n</code></pre> <ol> <li>A karakter \u00e9rt\u00e9ke 'o'</li> </ol> <p><code>substring(start, end)</code> - Ez a met\u00f3dus visszaad egy r\u00e9szsz\u00f6veget a String-b\u0151l, a megadott kezdeti \u00e9s z\u00e1r\u00f3 index k\u00f6z\u00f6tt. A kezdeti index beletartozik a r\u00e9szsz\u00f6vegbe, a z\u00e1r\u00f3 index viszont m\u00e1r nem.</p> <pre><code>        String szoveg=\"Hello, World!\";\nString reszszoveg=szoveg.substring(0,5); // (1)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"Hello\"</li> </ol> <p><code>toUpperCase()</code> \u00e9s <code>toLowerCase()</code> - Ezek a met\u00f3dusok a sz\u00f6veget \u00e1talak\u00edtj\u00e1k nagybet\u0171ss\u00e9 vagy kisbet\u0171ss\u00e9</p> <pre><code>        String szoveg=\"Hello, World!\";\nString nagybetus=szoveg.toUpperCase(); // (1)\nString kisbetus=szoveg.toLowerCase(); // (2)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"HELLO, WORLD!\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"hello, world!\"</li> </ol> <p><code>equals(other)</code> - Ez a met\u00f3dus \u00f6sszehasonl\u00edtja k\u00e9t String-et tartalmilag. Visszaadja true-t, ha a k\u00e9t sz\u00f6veg azonos, egy\u00e9bk\u00e9nt false-t.</p> <pre><code>        String szoveg1=\"Hello, World!\";\nString szoveg2=\"Hello, World!\";\nboolean azonos=szoveg1.equals(szoveg2); // (1)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke <code>true</code></li> </ol> <p><code>indexOf(str)</code> - Ez a met\u00f3dus megtal\u00e1lja az els\u0151 el\u0151fordul\u00e1st a megadott r\u00e9szsz\u00f6vegnek a String-ben, \u00e9s visszaadja az els\u0151 el\u0151fordul\u00e1s index\u00e9t. Ha nem tal\u00e1lja meg, <code>-1</code>-et ad vissza.</p> <pre><code>        String szoveg=\"Hello, World!\";\nint index=szoveg.indexOf(\"World\"); // (1)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke 7</li> </ol> <p><code>replace(oldStr, newStr)</code> - Ez a met\u00f3dus kicser\u00e9li az \u00f6sszes el\u0151fordul\u00e1st a r\u00e9gi sz\u00f6vegb\u0151l az \u00faj sz\u00f6vegre a String-ben.</p> <pre><code>        String szoveg=\"Hello, World!\";\nString ujSzoveg=szoveg.replace(\"World\",\"Java\"); // (1)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"Hello, Java!\"</li> </ol> <p><code>split(delimiter)</code> - Ez a met\u00f3dus feldarabolja a String-et egy megadott elv\u00e1laszt\u00f3 (delimiter) alapj\u00e1n, \u00e9s egy t\u00f6mbben t\u00e1rolja az eredm\u00e9nyeket.</p> <pre><code>        String szoveg=\"Alma,K\u00f6rte,Szilva\";\nString[]gyumolcsok=szoveg.split(\",\"); // (1)\n</code></pre> <ol> <li>A t\u00f6mb tartalma: [\"Alma\", \"K\u00f6rte\", \"Szilva\"]</li> </ol> <p><code>trim()</code> - Ez a met\u00f3dus elt\u00e1vol\u00edtja a String elej\u00e9r\u0151l \u00e9s v\u00e9g\u00e9r\u0151l az extra sz\u00f3k\u00f6z\u00f6ket (\u00e9s m\u00e1s vez\u00e9rl\u0151 karaktereket). Ez hasznos, ha a sz\u00f6veget tiszt\u00edtani szeretn\u00e9nk a felesleges sz\u00f3k\u00f6z\u00f6kt\u0151l.</p> <pre><code>        String szoveg=\"   Java is awesome   \";\nString trimmed=szoveg.trim(); // (1)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"Java is awesome\"</li> </ol> <p><code>startsWith(prefix)</code> \u00e9s <code>endsWith(suffix)</code> - Ezek a met\u00f3dusok ellen\u0151rzik, hogy a String a megadott prefixszel kezd\u0151dik vagy a megadott suffixszel v\u00e9gz\u0151dik.</p> <pre><code>        String szoveg=\"Hello, World!\";\nboolean starts=szoveg.startsWith(\"Hello\"); // (1)\nboolean ends=szoveg.endsWith(\"Java\"); // (2)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke <code>true</code></li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke <code>false</code></li> </ol> <p><code>isEmpty()</code> - Ez a met\u00f3dus ellen\u0151rzi, hogy a String \u00fcres-e (nincsenek benne karakterek). Visszaadja a true \u00e9rt\u00e9ket, ha a String \u00fcres, egy\u00e9bk\u00e9nt false-t.</p> <pre><code>        String uresSzoveg=\"\";\nboolean ures=uresSzoveg.isEmpty(); // (1)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke <code>true</code></li> </ol> <p><code>isBlank()</code> - Ez a met\u00f3dus ellen\u0151rzi, hogy a String \u00fcres vagy csak vez\u00e9rl\u0151 karakterekb\u0151l \u00e1ll. Visszaadja a true \u00e9rt\u00e9ket, ha a String \u00fcres, egy\u00e9bk\u00e9nt false-t.</p> <pre><code>        String uresSzoveg=\"  \";\nString uresTabulator=\"\\t\";\nboolean ures=uresSzoveg.isBlank(); // (1)\nboolean uresTab=uresTabulator.isBlank(); // (2)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke <code>true</code></li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke <code>true</code></li> </ol> <p><code>valueOf(data)</code> - Ez a met\u00f3dus egy String objektumot hoz l\u00e9tre az adat m\u00e1s t\u00edpus\u00e1b\u00f3l (pl. int, double) a String reprezent\u00e1ci\u00f3val.</p> <pre><code>        int szam=42;\nString szoveg=String.valueOf(szam); // (1)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"42\"</li> </ol>"},{"location":"java_se_13_string/#stringbuilder-es-stringbuffer","title":"StringBuilder \u00e9s StringBuffer","text":"<p>Ahogy a kor\u00e1bbiakban t\u00e1rgyaltuk, a String oszt\u00e1ly objektumai immutable (m\u00f3dos\u00edthatatlan) objektumok.</p> <pre><code>        String immutable=\"abc\";\nimmutable=immutable+\"def\";\n</code></pre> <p>M\u00e9gha \u00fagy is t\u0171nik, hogy az String v\u00e1ltoz\u00f3nk \u00e9rt\u00e9ke megv\u00e1ltozik, a val\u00f3s\u00e1gban az eredeti v\u00e1ltoz\u00f3nk referenci\u00e1ja fel\u00fcl\u00edr\u00e1sra ker\u00fcl egy \u00faj String objektummal, ami az \"abcdef\" karakterl\u00e1ncot tartalmazza. A String m\u00f3dos\u00edthatatlans\u00e1g\u00e1nak t\u00f6bb oka is van legink\u00e1bb teljes\u00edtm\u00e9ny \u00e9s biztons\u00e1gi okai, de ezekkel ebben a fejezetben nem foglalkozunk.</p> <p>N\u00e9ha azonban nem praktikus, ha minden m\u00f3dos\u00edt\u00e1sunk ut\u00e1n \u00faj String objektum j\u00f6n l\u00e9tre. Ha gyakran m\u00f3dos\u00edtunk az adott karakterl\u00e1ncon felesleges, hogy mindig egy \u00faj String objektumot hozunk l\u00e9tre a m\u00f3dos\u00edt\u00e1sainkal. Ennek a probl\u00e9m\u00e1nak a megold\u00e1s\u00e1ra k\u00e9sz\u00fclt a <code>StringBuilder</code> \u00e9s <code>StringBuffer</code> oszt\u00e1ly.</p> <pre><code>        StringBuffer sb=new StringBuffer(\"abc\");\nsb.append(\"def\");\n</code></pre> <p>Az al\u00e1bbi p\u00e9lda eset\u00e9n az <code>append()</code> met\u00f3dussal b\u0151v\u00edtj\u00fck az eredeti karakterl\u00e1ncunkat, nem j\u00f6n l\u00e9tre \u00faj objektum, hanem a megl\u00e9v\u0151 objektum b\u0151v\u00fcl az \u00faj liter\u00e1llal.</p> <p>A <code>StringBuffer</code> szinkroniz\u00e1lt, vagyis sz\u00e1lbiztos, <code>StringBuilder</code> kompatiblis a <code>StringBuffer</code> API-val, de nem garant\u00e1lja a sz\u00e1lbiztons\u00e1got. Mivel nem sz\u00e1lbiztos implement\u00e1ci\u00f3, ez\u00e9rt valamivel gyorsabb a <code>StringBuffer</code>-n\u00e9l, \u00edgy, ha nem fontos a sz\u00e1lbiztons\u00e1g haszn\u00e1ljuk ezt.</p>"},{"location":"java_se_13_string/#stringformat","title":"String.format()","text":"<p>A String oszt\u00e1ly rendelkez\u00e9s\u00fcnkre bocs\u00e1jt egy statikus <code>format()</code> met\u00f3dust melynek seg\u00edts\u00e9g\u00e9vel a karakterl\u00e1ncunkat form\u00e1zhatjuk. N\u00e9zz\u00fck az al\u00e1bbi p\u00e9ld\u00e1t:</p> <pre><code>        String greetings=String.format(\"Hello %s !\",\"World\"); // (1)\n</code></pre> <ol> <li>A kapott String a \"Hello World !\" lesz.</li> </ol> <p>A minta String statikus sz\u00f6veget tartalmaz \u00e9s egy vagy t\u00f6bb form\u00e1z\u00e1si param\u00e9tert, amit be tudunk helyettes\u00edteni k\u00fcl\u00f6nb\u00f6z\u0151 \u00e9rt\u00e9kekkel. Ebben az esetben egy szimpla \"%s\" karaktert tartalmazott, ami a param\u00e9terben kapott v\u00e1ltoz\u00f3t annak String reprezent\u00e1ci\u00f3j\u00e1val illeszti be a sz\u00f6vegbe.</p>"},{"location":"java_se_13_string/#altalanos-szintaxis","title":"\u00c1ltal\u00e1nos szintaxis","text":"<p>A form\u00e1z\u00e1s \u00e1ltal\u00e1nos szintaxisa az al\u00e1bbi:</p> <pre><code>%[argument_index$][flags][width][.precision]conversion\n</code></pre> <p>Az argument_index, flags, width, precision r\u00e9szek opcion\u00e1lisan elhagyhat\u00f3ak</p> <ul> <li>argument_index egy sz\u00e1m, ami meghat\u00e1rozza, hogy hanyadik param\u00e9terre hivatkozunk.</li> <li>flags karakterek halmaza, amivel m\u00f3dos\u00edtani tudunk a form\u00e1tumon</li> <li>width seg\u00edts\u00e9g\u00e9vel megadhatjuk, hogy minimum h\u00e1ny karaktert foglaljon az adott behelyettes\u00edt\u00e9s</li> <li>precision seg\u00edts\u00e9g\u00e9vel megadhatjuk, hogy maximum h\u00e1ny karakter jelenjen meg</li> <li>conversion az egyetlen k\u00f6telez\u0151 r\u00e9sz, melynek seg\u00edts\u00e9g\u00e9vel megadhatjuk, hogy a v\u00e1ltoz\u00f3 milyen reprezent\u00e1ci\u00f3ban   jelenjen meg a sz\u00f6vegben. A lehets\u00e9ges karakterek halmaza att\u00f3l f\u00fcgg, hogy milyen t\u00edpus\u00fa a v\u00e1ltoz\u00f3.</li> </ul> <pre><code>        String greetings_2=String.format(\"%2$s %1$s !\",\"World\",\"Hello\"); // (1)\n</code></pre> <ol> <li>A kapott String a \"Hello World !\" lesz.</li> </ol>"},{"location":"java_se_13_string/#string-formatter-hasznalata","title":"String formatter haszn\u00e1lata","text":"<p>N\u00e9zz\u00fcnk p\u00e1r p\u00e9ld\u00e1t a String formatter haszn\u00e1lat\u00e1ra.</p> <pre><code>        String s=String.format(\"The correct answer is %s\",false); // (1)\ns=String.format(\"The correct answer is %b\",null); // (2)\ns=String.format(\"The correct answer is %B\",true); // (3)\ns=String.format(\"The correct answer is %c\",'a'); // (4)\ns=String.format(\"The correct answer is %c\",null); // (5)\ns=String.format(\"The correct answer is %C\",'b'); // (6)\ns=String.format(\"The valid unicode character: %c\",0x0400); // (7)\ns=String.format(\"The number 25 in decimal = %d\",25); // (8)\ns=String.format(\"The number 25 in octal = %o\",25); // (9)\ns=String.format(\"The number 25 in hexadecimal = %x\",25); // (10)\ns=String.format(\"The computerized scientific format of 10000.00 \"+\"= %e\",10000.00); // (11)\ns=String.format(\"The decimal format of 10.019 = %f\",10.019); // (12)\ns=String.format(\"First Line %nSecond Line\"); // (13)\ns=String.format(\"Without left justified flag: %5d\",25); // (14)\ns=String.format(\"With left justified flag: %-5d\",25); // (15)\ns=String.format(\"Output of 25.09878 with Precision 2: %.2f\",25.09878); // (16)\ns=String.format(\"Output of general conversion type with Precision 2: %.2b\",true); // (17)\n</code></pre> <ol> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The correct answer is false\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The correct answer is false\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The correct answer is TRUE\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The correct answer is a\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The correct answer is null\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The correct answer is B\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The valid unicode character: \u0400\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The number 25 in decimal = 25\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The number 25 in octal = 31\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The number 25 in hexadecimal = 19\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The computerized scientific format of 10000.00 = 1,000000e+04\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"The decimal format of 10.019 = 10,019000\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"First line\"  \"Second line\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"Without left justified flag:    25\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"With left justified flag: 25   \"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"Output of 25.09878 with Precision 2: 25,10\"</li> <li>A v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke \"Output of general conversion type with Precision 2: tr\"</li> </ol> <p>Tov\u00e1bbi p\u00e9ld\u00e1k \u00e9s dokument\u00e1ci\u00f3 a https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html oldalon tal\u00e1lhat\u00f3.</p>"},{"location":"java_se_13_string/#string-joiner","title":"String joiner","text":"<p>A <code>StringJoiner</code> oszt\u00e1ly a Java 8-as verzi\u00f3j\u00e1ba ker\u00fclt be a <code>java.util</code> package-be. Haszn\u00e1lat\u00e1val Stringeket tudunk \u00f6sszef\u0171zni el\u0151re defini\u00e1lt elv\u00e1laszt\u00f3 karakter, prefix \u00e9s suffix seg\u00edts\u00e9g\u00e9ve.</p> <pre><code>        StringJoiner joiner=new StringJoiner(\",\",\"[\",\"]\"); //(1)\njoiner.add(\"Red\").add(\"Green\").add(\"Blue\"); //(2)\nString joined=joiner.toString(); //(3)\n</code></pre> <ol> <li>L\u00e9trehozzunk a <code>StringJoiner</code> objektumot a konstruktor (<code>new StringJoiner(DELIMETER,PREFIX,SUFFIX)</code>) h\u00edv\u00e1ssal.</li> <li>Az <code>add()</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel, hozz\u00e1adunk 3 karakterl\u00e1ncot, amit \u00f6ssze szeretn\u00e9nk f\u0171zni.</li> <li>V\u00e9g\u00fcl a <code>toString()</code> met\u00f3dust megh\u00edvva elk\u00e9sz\u00fcl a String objektumunk aminek \u00e9rt\u00e9ke \"[Red,Green,Blue]\"</li> </ol> <p>Ahogy a p\u00e9ld\u00e1ba l\u00e1ttuk az \u00e1ltal\u00e1nos form\u00e1ja a <code>StringJoiner</code> konstruktor\u00e1nak a <code>new StringJoiner(DELIMETER,PREFIX,SUFFIX)</code>, azonban a <code>PREFFIX</code> \u00e9s <code>SUFFIX</code> tag opcion\u00e1lis.</p>"},{"location":"java_se_14/","title":"Java Sz\u00e1lkezel\u00e9s","text":""},{"location":"java_se_14/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A modern szoftvertervez\u00e9s egyik kulcsfontoss\u00e1g\u00fa aspektusa az egyszerre t\u00f6bb feladat, vagyis t\u00f6bbsz\u00e1l\u00fa v\u00e9grehajt\u00e1s kezel\u00e9se. A t\u00f6bbsz\u00e1l\u00fa sz\u00e1m\u00edt\u00e1sok lehet\u0151v\u00e9 teszik egy alkalmaz\u00e1s sz\u00e1m\u00e1ra, hogy hat\u00e9konyabban haszn\u00e1lja ki a rendelkez\u00e9sre \u00e1ll\u00f3 hardver er\u0151forr\u00e1sokat. A Java programoz\u00e1si nyelv er\u0151teljes eszk\u00f6z\u00f6ket \u00e9s oszt\u00e1lyokat k\u00edn\u00e1l a t\u00f6bbsz\u00e1l\u00fa programoz\u00e1s megval\u00f3s\u00edt\u00e1s\u00e1ra. Ebben a fejezetben a Java sz\u00e1lkezel\u00e9s alapjait \u00e9s az ehhez kapcsol\u00f3d\u00f3 konstrukci\u00f3kat vizsg\u00e1ljuk meg.</p>"},{"location":"java_se_14/#multithreading","title":"Multithreading","text":"<p>A multithreading a t\u00f6bb sz\u00e1l egyidej\u0171 v\u00e9grehajt\u00e1s\u00e1t jelenti egyetlen program vagy folyamaton bel\u00fcl. Minden sz\u00e1l egy \u00f6n\u00e1ll\u00f3 ir\u00e1ny\u00edt\u00e1si folyamot k\u00e9pvisel, amely k\u00e9pes feladatokat p\u00e1rhuzamosan v\u00e9grehajtani a t\u00f6bbi sz\u00e1llal. Ez a fogalom lehet\u0151v\u00e9 teszi az alkalmaz\u00e1sok hat\u00e9kony t\u00f6bbfeladatos kezel\u00e9s\u00e9t.</p>"},{"location":"java_se_14/#szalak","title":"Sz\u00e1lak","text":"<p>A thread (sz\u00e1l) a Java nyelv egy olyan v\u00e9grehajt\u00e1si egys\u00e9ge, amely k\u00e9pes egym\u00e1st\u00f3l f\u00fcggetlen\u00fcl futni. Ez azt jelenti, hogy t\u00f6bb feladatot lehet egyszerre elv\u00e9gezni a programon bel\u00fcl, ami jav\u00edtja az alkalmaz\u00e1sok hat\u00e9konys\u00e1g\u00e1t \u00e9s teljes\u00edtm\u00e9ny\u00e9t. Egy egyszer\u0171 szekvenci\u00e1lis program eset\u00e9ben az egysz\u00e1l\u00fa programunk m\u0171k\u00f6d\u00e9s\u00e9t a <code>main</code> met\u00f3dus defini\u00e1lja, \u00edgy ez sz\u00fcl\u0151 sz\u00e1lnak tekinthet\u0151.</p>"},{"location":"java_se_14/#szalak-letrehozasa","title":"Sz\u00e1lak l\u00e9trehoz\u00e1sa","text":"<p>Minden sz\u00e1lat egy <code>Thread</code> objektum kezel, \u00edgy ha \u00faj sz\u00e1lat szeretn\u00e9nk ind\u00edtani akkor a <code>Thread</code> oszt\u00e1lyt kell p\u00e9ld\u00e1nyos\u00edtanunk. A Java nyelv k\u00e9t lehet\u0151s\u00e9get ad saj\u00e1t sz\u00e1l l\u00e9trehoz\u00e1s\u00e1ra l\u00e9trehozhatunk egy saj\u00e1t sz\u00e1l oszt\u00e1lyt, ami a <code>Thread</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik, vagy az oszt\u00e1lyunk implement\u00e1lhatja a <code>Runnable</code> interf\u00e9szt.</p> <pre><code>class MyThread extends Thread {\n@Override\npublic void run() {\n}\n}\nclass MyRunnable implements Runnable {\n@Override\npublic void run() {\n}\n}\n</code></pre> <p>B\u00e1rmelyik m\u00f3dszert is v\u00e1lasszuk, a logik\u00e1t, amit szeretn\u00e9nk p\u00e1rhuzamosan futtatni a <code>run()</code> met\u00f3dusba kell meg\u00edrnunk.</p>"},{"location":"java_se_14/#szalak-kezelese","title":"Sz\u00e1lak kezel\u00e9se","text":"<pre><code>public class Main {\npublic static void main(String[] args) {\nThread myThread = new MyThread(); // (1)\nThread myThread2 = new Thread(new MyRunnable()); // (2)\nmyThread.start();\nmyThread2.start();\n}\n}\n</code></pre> <ol> <li>Sz\u00e1l l\u00e9trehoz\u00e1sa, a saj\u00e1t <code>Thread</code> oszt\u00e1lyunkb\u00f3l.</li> <li>Sz\u00e1l l\u00e9trehoz\u00e1sa, a <code>Runnable</code> interf\u00e9szt megval\u00f3s\u00edt\u00f3 oszt\u00e1lyunkb\u00f3l.</li> </ol> <p>A sz\u00e1lak elind\u00edt\u00e1sa a <code>Thread</code> objektum <code>start()</code> met\u00f3dus\u00e1val t\u00f6rt\u00e9nik.</p> <p>Lehet\u0151s\u00e9g\u00fcnk van a sz\u00e1l fut\u00e1s\u00e1nak ideiglenes felf\u00fcggeszt\u00e9s\u00e9re is, ezt a <code>sleep()</code> met\u00f3dussal tehetj\u00fck meg. Az al\u00e1bbi k\u00f3dr\u00e9szlet ind\u00edt egy sz\u00e1lat, ami ki\u00edrja a \"Start!\" sz\u00f6veget, majd v\u00e1rakozik 2 m\u00e1sodpercig, v\u00e9g\u00fcl ki\u00edrja az \" End!\" sz\u00f6veget a konzolra. A sz\u00e1l altat\u00e1sa a <code>sleep</code> met\u00f3dussal <code>InterruptedException</code>-t dobhat, amit le kell kezeln\u00fcnk.</p> <pre><code>public class Main {\npublic static void main(String[] args) {\nnew Thread(new Runnable() {\n@Override\npublic void run() {\nSystem.out.println(\"Start!\");\ntry {\nThread.sleep(2000);\n} catch (InterruptedException e) {\nthrow new RuntimeException(e);\n}\nSystem.out.println(\"End!\");\n}\n}).start();\n}\n}\n</code></pre>"},{"location":"java_se_14/#szal-statuszok","title":"Sz\u00e1l st\u00e1tuszok","text":"<p>A sz\u00e1laknak t\u00f6bbf\u00e9le \u00e1llapota lehet a Java sz\u00e1lkezel\u00e9sben, att\u00f3l f\u00fcgg\u0151en, hogy a v\u00e9grehajt\u00e1s milyen f\u00e1zisban van \u00e9ppen.</p> <ul> <li>NEW - A sz\u00e1l ebben az \u00e1llapotban van, amikor l\u00e9trehozzuk, de m\u00e9g nem h\u00edvtuk meg a <code>start()</code> met\u00f3dust. Ez a sz\u00e1l   m\u00e9g nem indult el.</li> <li>RUNNABLE - Amikor a <code>start()</code> met\u00f3dust megh\u00edvjuk egy sz\u00e1lon, az \u00e1tker\u00fcl az \"ind\u00edt\u00e1sra v\u00e1rakoz\u00f3\" \u00e1llapotb\u00f3l a \"   fut\u00f3\" \u00e1llapotba, vagyis a sz\u00e1l k\u00e9szen \u00e1ll a v\u00e9grehajt\u00e1sra. A Java tartalmaz egy saj\u00e1tos \u00fctemez\u0151t a sz\u00e1lak   futtat\u00e1s\u00e1hoz, \u00e9s a rendszer d\u00f6nti el, melyik sz\u00e1lnak ad id\u0151t a v\u00e9grehajt\u00e1sra.</li> <li>BLOCKED - Ha egy sz\u00e1l v\u00e1r valamilyen blokkol\u00f3 m\u0171veletre, p\u00e9ld\u00e1ul egy szinkroniz\u00e1lt objektumra v\u00e1rakozik, akkor a \"   blokkolt\" \u00e1llapotban van. Ebben az \u00e1llapotban a sz\u00e1l nem folytatja a v\u00e9grehajt\u00e1st, am\u00edg a felt\u00e9tel nem teljes\u00fcl.</li> <li>WAITING - A \"v\u00e1rakoz\u00f3\" \u00e1llapotba ker\u00fcl egy sz\u00e1l, ha akt\u00edvan v\u00e1rakozik egy m\u00e1sik sz\u00e1lra vagy valamilyen esem\u00e9ny   bek\u00f6vetkez\u00e9s\u00e9re. P\u00e9ld\u00e1ul, ha egy sz\u00e1l a <code>wait()</code> met\u00f3dust h\u00edvja, akkor v\u00e1rakoz\u00f3 \u00e1llapotba ker\u00fcl.</li> <li>TIMED_WAITING - Ez az \u00e1llapot hasonl\u00f3 a \"v\u00e1rakoz\u00f3\" \u00e1llapothoz, de id\u0151z\u00edtett v\u00e1rakoz\u00e1st jelent. P\u00e9ld\u00e1ul egy sz\u00e1l   a <code>sleep()</code> vagy a <code>join()</code> met\u00f3dust h\u00edvja, amelyek megadj\u00e1k, mennyi ideig marad a sz\u00e1l ebben az \u00e1llapotban.</li> <li>TERMINATED - Amikor egy sz\u00e1l befejezi a v\u00e9grehajt\u00e1s\u00e1t vagy valamilyen kiv\u00e9tel miatt le\u00e1ll, a \"befejezett\"   \u00e1llapotba ker\u00fcl.</li> </ul> <p>Egy sz\u00e1l aktu\u00e1lis st\u00e1tusz\u00e1t a <code>Thread</code> objektum <code>getState()</code> met\u00f3dus\u00e1val tudjuk lek\u00e9rdezni.</p> <pre><code>        Thread thread=new Thread();\nthread.getState();\n</code></pre>"},{"location":"java_se_14/#szalak-osszekapcsolasa","title":"Sz\u00e1lak \u00f6sszekapcsol\u00e1sa","text":"<p>Sz\u00e1lkezel\u00e9s sor\u00e1n lehet\u0151s\u00e9g\u00fcnk van a v\u00e9grehajt\u00e1s sz\u00fcneteltet\u00e9s\u00e9re, addig am\u00edg egy m\u00e1sik sz\u00e1l nem fejezi be fut\u00e1s\u00e1t. Az al\u00e1bbi p\u00e9lda sor\u00e1n a <code>thread.join()</code> met\u00f3dus h\u00edv\u00e1ssal, a f\u0151 sz\u00e1lunk sz\u00fcnetel addig, am\u00edg a a <code>thread</code> objektumunk nem fejezi be a v\u00e9grehajt\u00e1st.</p> <pre><code>public class Main {\npublic static void main(String[] args) throws InterruptedException {\nRunnable runnable = new Runnable() {\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 10; i++) {\nSystem.out.println(\"\\t#\" + (i + 1));\n}\n}\n};\nThread thread = new Thread(runnable);\nThread thread_2 = new Thread(runnable);\nthread.start();\nthread.join();\nthread_2.start();\n}\n}\n</code></pre>"},{"location":"java_se_14/#szinkronizacio","title":"Szinkroniz\u00e1ci\u00f3","text":"<p>A sz\u00e1lak els\u0151dlegesen k\u00f6z\u00f6sen haszn\u00e1lt, thread-ek k\u00f6z\u00f6tt megosztott objektumok seg\u00edts\u00e9g\u00e9vel kommunik\u00e1lnak. Ez a kommunik\u00e1ci\u00f3 meglehet\u0151sen hat\u00e9kony, de lehet\u0151v\u00e9 tesz bizonyos hib\u00e1kat mint p\u00e9ld\u00e1ul a sz\u00e1l interferencia \u00e9s a mem\u00f3ria inkonzisztencia. Ezen probl\u00e9m\u00e1k kezel\u00e9s\u00e9re egy lehets\u00e9ges megold\u00e1s a szinkroniz\u00e1ci\u00f3.</p> <p>A szinkroniz\u00e1ci\u00f3 sor\u00e1n l\u00e9tre tudunk hozni kritikus szakaszokat a forr\u00e1sk\u00f3dunkban, amit egyszerre csak egy sz\u00e1l k\u00e9pes el\u00e9rni. Kritikusz szakasz lehet egy teljes met\u00f3dus is, ilyenkor a <code>synchronized</code> kulcssz\u00f3t tudjuk haszn\u00e1lni a met\u00f3dus deklar\u00e1l\u00e1sakor, de lehet\u0151s\u00e9g van szinkroniz\u00e1lt blokk l\u00e9trehoz\u00e1s\u00e1ra is.</p> <pre><code>        synchronized(this){\n}\n</code></pre>"},{"location":"java_se_14_ex/","title":"Java Sz\u00e1lkezel\u00e9s gyakorl\u00f3 feladatok","text":""},{"location":"java_se_14_ex/#1-feladat","title":"1. Feladat","text":"<p>K\u00e9sz\u00edtsd el az ismert pattog\u00f3 DVD log\u00f3 Jav\u00e1s verzi\u00f3j\u00e1t. Az alkalmaz\u00e1s megnyit\u00e1sa ut\u00e1n egy pirosra sz\u00ednezett JPanel induljon el valamelyik ir\u00e1nyba, \u00e9s ha el\u00e9ri a keret sz\u00e9l\u00e9t, akkor pattanjon vissza r\u00f3la.</p> <p></p>"},{"location":"java_se_15/","title":"Java funkcion\u00e1lis programoz\u00e1s","text":""},{"location":"java_se_15/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A Java, b\u00e1r eredetileg egy objektumorient\u00e1lt nyelv, a funkcion\u00e1lis programoz\u00e1s sz\u00e1mos elem\u00e9t t\u00e1mogatja, k\u00fcl\u00f6n\u00f6sen a Java 8 verzi\u00f3val bevezetett \u00faj nyelvi elemek r\u00e9v\u00e9n. Ezek a funkcion\u00e1lis programoz\u00e1si eszk\u00f6z\u00f6k lehet\u0151v\u00e9 teszik a fejleszt\u0151k sz\u00e1m\u00e1ra, hogy a Java nyelvet a funkcion\u00e1lis paradigma ir\u00e1ny\u00e1b\u00e1b\u00f3l haszn\u00e1lj\u00e1k. A funkcion\u00e1lis programoz\u00e1s ( functional programming) egy programoz\u00e1si m\u00f3dszertan, vagyis egyike a programoz\u00e1si paradigm\u00e1knak. A funkcion\u00e1lis programnyelvek a programoz\u00e1si feladatot egy f\u00fcggv\u00e9ny ki\u00e9rt\u00e9kel\u00e9s\u00e9nek tekintik.</p>"},{"location":"java_se_15/#anonim-osztalyok","title":"Anonim oszt\u00e1lyok","text":"<p>Az anonim oszt\u00e1lyok seg\u00edts\u00e9g\u00e9vel t\u00f6m\u00f6rebb\u00e9 tehetj\u00fck a k\u00f3dunkat. Lehet\u0151v\u00e9 teszik egy oszt\u00e1ly deklar\u00e1l\u00e1s\u00e1t \u00e9s p\u00e9ld\u00e1nyos\u00edt\u00e1s\u00e1t egyidej\u0171leg. Olyan helyzetekben haszn\u00e1lunk anonim oszt\u00e1lyokat, amikor valami eseti megold\u00e1sra van sz\u00fcks\u00e9g\u00fcnk \u00e9s nem szeretn\u00e9nk egy oszt\u00e1lyt l\u00e9trehozni a feladat elv\u00e9gz\u00e9s\u00e9re.</p> <pre><code>public interface ActionListener extends EventListener {\npublic void actionPerformed(ActionEvent e);\n}\n</code></pre> <p>Ilyen eset p\u00e9ld\u00e1ul amikor egy gombnyom\u00e1st szerett\u00fcnk volna lekezelni <code>ActionListener</code> interf\u00e9sz seg\u00edts\u00e9g\u00e9vel. Ezt megtehett\u00fck egy anonim oszt\u00e1ly seg\u00edts\u00e9g\u00e9vel, amit \u00e1tadtunk a gombnak az <code>addActionListener</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>btnNewButton.addActionListener(new ActionListener(){\npublic void actionPerformed(ActionEvent e){\n//Gombnyom\u00e1s hat\u00e1sa\n}\n});\n</code></pre> <p>Ilyenkor ahelyett, hogy l\u00e9trehoztunk volna egy oszt\u00e1lyt, ami implement\u00e1lja az <code>ActionListener</code> interf\u00e9szt, helyben l\u00e9trehoztunk egy anonim oszt\u00e1lyt, \u00e9s helyben megadtuk az <code>actionPerformed</code> met\u00f3dus defin\u00edci\u00f3j\u00e1t.</p>"},{"location":"java_se_15/#lambda-kifejezesek","title":"Lambda kifejez\u00e9sek","text":"<p>Az anonim oszt\u00e1lyokkal kapcsolatos egyik f\u0151 probl\u00e9ma az, hogy ha az anonim oszt\u00e1ly megval\u00f3s\u00edt\u00e1sa nagyon egyszer\u0171, p\u00e9ld\u00e1ul egy olyan interf\u00e9sz, amely csak egy met\u00f3dust tartalmaz, akkor az anonim oszt\u00e1lyok szintaxisa feleslegesen bonyolultnak t\u0171nik. A kor\u00e1bbi p\u00e9ld\u00e1n\u00e1l maradva, mi egy gombnyom\u00e1s esem\u00e9ny\u00e9t szerett\u00fck volna lekezelni, megsp\u00f3roltuk egy k\u00fcl\u00f6n oszt\u00e1ly l\u00e9trehoz\u00e1s\u00e1t, azonban a feladathoz m\u00e9rten \u00edgy is feleslegesen bonyolult szerkezettel siker\u00fclt csak el\u00e9rni a k\u00edv\u00e1nt m\u0171k\u00f6d\u00e9st. A lambda kifejez\u00e9seket az ilyen probl\u00e1m\u00e1k megold\u00e1s\u00e1ra tal\u00e1lt\u00e1k ki.</p> <p>Alak\u00edtsuk \u00e1t a kor\u00e1bbi p\u00e9ld\u00e1nkat, hogy az anonim oszt\u00e1ly helyett lambda kifejez\u00e9ssel oldjuk meg gombnyom\u00e1s kezel\u00e9s\u00e9t.</p> <pre><code>btnNewButton.addActionListener(e-&gt;{\n// Gombnyom\u00e1s hat\u00e1sa\n});\n</code></pre> <p>Ahogy a p\u00e9ld\u00e1n l\u00e1tj\u00e1tok, <code>ActionEvent e</code> param\u00e9tert a lambda kifejez\u00e9s\u00fcnk ugyan \u00fagy megkapja, de a felesleges \"sallang\" n\u00e9lk\u00fcl egyb\u0151l megadhatjuk, hogy mi t\u00f6rt\u00e9njen a gombnyom\u00e1s hat\u00e1s\u00e1ra. Az \u00e1talak\u00edt\u00e1ssal a k\u00f3dunk olvashat\u00f3bb \u00e9s \u00e1tl\u00e1that\u00f3bb lett.</p>"},{"location":"java_se_15/#lamda-kifejezes-szintaxisa","title":"Lamda kifejez\u00e9s szintaxisa","text":"<p>Vegy\u00fck az al\u00e1bbi <code>Calculator</code> oszt\u00e1lyt.</p> <pre><code>public class Calculator {\ninterface IntegerMath {\nint operation(int a, int b);\n}\npublic int operateBinary(int a, int b, IntegerMath op) {\nreturn op.operation(a, b);\n}\npublic static void main(String... args) {\nCalculator myApp = new Calculator();\nIntegerMath addition = (a, b) -&gt; a + b;\nIntegerMath subtraction = (a, b) -&gt; a - b;\nSystem.out.println(\"40 + 2 = \" +\nmyApp.operateBinary(40, 2, addition));\nSystem.out.println(\"20 - 10 = \" +\nmyApp.operateBinary(20, 10, subtraction));\n}\n}\n</code></pre> <p>A lambda kifejez\u00e9seket csak olyan esetben haszn\u00e1lhatjuk, ha az interf\u00e9sz\u00fcnk \u00f6sszesen egy absztrakt met\u00f3dust defini\u00e1l, de <code>default</code> \u00e9s <code>static</code> met\u00f3dusb\u00f3l b\u00e1rmennyit tartalmazhat. Hozzuk l\u00e9tre az <code>IntegerMath</code> interf\u00e9sz\u00fcnket \u00e9s defini\u00e1ljunk benne egy <code>operation</code> met\u00f3dust. Az <code>operation</code> lesz a met\u00f3dusunk amire majd a lambda kifejez\u00e9st szeretn\u00e9nk illeszteni. A <code>Calculator</code> oszt\u00e1lyba hozzunk l\u00e9tre egy <code>operateBinary</code> met\u00f3dust, ami k\u00e9t integer argumentumot fogad \u00e9s elv\u00e9gzi rajta az  <code>operation</code> met\u00f3dust.</p> <p>A <code>main</code> met\u00f3dusban hozzunk l\u00e9tre k\u00e9t m\u0171veletet az egyiket az \u00f6sszead\u00e1s m\u0171velet\u00e9vel a m\u00e1sikat pedig a kivon\u00e1s\u00e9val, majd pr\u00f3b\u00e1ljuk ki \u0151ket.</p>"},{"location":"java_se_15/#funkcionalis-interfeszek","title":"Funkcion\u00e1lis interf\u00e9szek","text":"<p>A <code>@FunctionalInterface</code> annot\u00e1ci\u00f3 hasznos, hogy ford\u00edt\u00e1si id\u0151ben ellen\u0151rizni tudjuk, hogy egy interf\u00e9sznek csak egy absztrakt met\u00f3dusa van. Mivel csak olyan interf\u00e9szeket haszn\u00e1lhatunk lambda kifejez\u00e9sre amiknek csak egy absztrakt met\u00f3dusa van, ha az interf\u00e9szeinket ell\u00e1tjuk ezzel az annot\u00e1ci\u00f3val, akkor ford\u00edt\u00e1si id\u0151ben meggy\u0151z\u00f6dhet\u00fcnk err\u0151l, tov\u00e1bb\u00e1 jelezni tudjuk a fejleszt\u0151 koll\u00e9g\u00e1inknak is, hogy ne adjanak hozz\u00e1 \u00faj met\u00f3dust az interf\u00e9szhez, mert mi azt lambda kifejez\u00e9sekkel haszn\u00e1ljuk.</p> <pre><code>@FunctionalInterface\ninterface IntegerMath {\nint operation(int a, int b);\n}\n</code></pre>"},{"location":"java_se_15/#method-reference","title":"Method reference","text":"<p>A met\u00f3dus hivatkoz\u00e1s egy speci\u00e1lis t\u00edpusa a lambda kifejez\u00e9seknek. Gyakran hozunk l\u00e9tre lambda kifejez\u00e9st, hogy megh\u00edvjunk egy m\u00e1r l\u00e9tez\u0151 met\u00f3dust. Az ilyen egyszer\u0171 lambda kifejez\u00e9sek kiv\u00e1lt\u00e1s\u00e1ra hozt\u00e1k l\u00e9tre a met\u00f3dus hivatkoz\u00e1sokat.</p> <p>N\u00e9gy lehets\u00e9ges t\u00edpusa van a met\u00f3dus hivatkoz\u00e1soknak:</p> <ul> <li>Statikus met\u00f3dus</li> <li>Adott objektum met\u00f3dusa</li> <li>Tetsz\u0151leges objektum bizonyos met\u00f3dusa</li> <li>Konstruktor</li> </ul>"},{"location":"java_se_15/#hivatkozas-egy-statikus-metodusra","title":"Hivatkoz\u00e1s egy statikus met\u00f3dusra","text":"<p>Lehet\u0151s\u00e9g\u00fcnk van a lambda kifejez\u00e9st kiv\u00e1ltani egy olyan statikus met\u00f3dussal, aminek a param\u00e9terlist\u00e1ja megegyezik a lambda kifejez\u00e9s param\u00e9terlist\u00e1j\u00e1val. Vegy\u00fck az al\u00e1bbi p\u00e9ld\u00e1t, ami ki\u00edrja a String lista tartalm\u00e1t a konzolra \u00e9s alak\u00edtsuk \u00e1t, hogy method reference seg\u00edts\u00e9g\u00e9vel oldjuk meg a feladatot.</p> Lambda kifejez\u00e9sMethod reference <pre><code>public class StaticMethod {\npublic static void main (String... args){\nList&lt;String&gt; messages = Arrays.asList(\"hello\", \"backend\", \"csoport!\");\nmessages.forEach(word -&gt; System.out.println(word));\n}\n}\n</code></pre> <pre><code>public class StaticMethod {\npublic static void main (String... args){\nList&lt;String&gt; messages = Arrays.asList(\"hello\", \"backend\", \"csoport!\");\nmessages.forEach(System.out::println);\n}\n}\n</code></pre>"},{"location":"java_se_15/#hivatkozas-egy-objektum-metodusara","title":"Hivatkoz\u00e1s egy objektum met\u00f3dus\u00e1ra","text":"<p>Vegy\u00fck az al\u00e1bbi <code>Bicycle</code> oszt\u00e1lyt \u00e9s a hozz\u00e1 k\u00e9sz\u00edtett <code>BicycleComparator</code> oszt\u00e1lyt, amivel k\u00e9t bicikli p\u00e9ld\u00e1nyt tudunk \u00f6sszehasonl\u00edtani.</p> <pre><code>public class Bicycle {\nprivate String brand;\nprivate Integer frameSize;\n// standard constructor, getters and setters\n}\npublic class BicycleComparator implements Comparator {\n@Override\npublic int compare(Bicycle a, Bicycle b) {\nreturn a.getFrameSize().compareTo(b.getFrameSize());\n}\n}\n</code></pre> Lambda kifejez\u00e9sMethod reference <pre><code>public class Bicycle {\npublic static void main(String[] args) {\nBicycleComparator bikeFrameSizeComparator = new BicycleComparator();\nList&lt;Bicycle&gt; bicycleList = Arrays.asList(\nnew Bicycle(\"MTK\", 28),\nnew Bicycle(\"TREK\", 26),\nnew Bicycle(\"FUJI\", 28),\nnew Bicycle(\"KONA\", 26)\n);\nbicycleList.stream().sorted((a, b) -&gt; bikeFrameSizeComparator.compare(a, b));\n}\n}\n</code></pre> <pre><code>public class Bicycle {\npublic static void main(String[] args) {\nBicycleComparator bikeFrameSizeComparator = new BicycleComparator();\nList&lt;Bicycle&gt; bicycleList = Arrays.asList(\nnew Bicycle(\"MTK\", 28),\nnew Bicycle(\"TREK\", 26),\nnew Bicycle(\"FUJI\", 28),\nnew Bicycle(\"KONA\", 26)\n);\nbicycleList.stream().sorted(bikeFrameSizeComparator::compare);\n}\n}\n</code></pre>"},{"location":"java_se_15/#hivatkozas-egy-objektum-metodusara-anelkul-hogy-peldanyositanank-azt","title":"Hivatkoz\u00e1s egy objektum met\u00f3dus\u00e1ra, an\u00e9lk\u00fcl, hogy p\u00e9ld\u00e1nyos\u00edtan\u00e1nk azt","text":"<p>Ez a met\u00f3dushivatkoz\u00e1s nagyon hasonl\u00edt az el\u0151zre, de ott l\u00e9tre kellett hoznunk, egy <code>BicycleComparator</code> p\u00e9ld\u00e1nyt, hogy haszn\u00e1lni tudjuk. Itt az <code>Integer</code> oszt\u00e1ly met\u00f3dus\u00e1t tudjuk haszn\u00e1lni.</p> Lambda kifejez\u00e9sMethod reference <pre><code>public class MethodReference {\npublic static void main(String[] args) {\nList&lt;Integer&gt; numbers = Arrays.asList(5, 3, 50, 24, 40, 2, 9, 18);\nnumbers.stream().sorted((a, b) -&gt; a.compareTo(b));\n}\n}\n</code></pre> <pre><code>public class MethodReference {\npublic static void main(String[] args) {\nList&lt;Integer&gt; numbers = Arrays.asList(5, 3, 50, 24, 40, 2, 9, 18);\nnumbers.stream().sorted(Integer::compareTo);\n}\n}\n</code></pre>"},{"location":"java_se_15/#hivatkozas-egy-objektum-konstruktorara","title":"Hivatkoz\u00e1s egy objektum konstruktor\u00e1ra","text":"<p>Eg\u00e9sz\u00edts\u00fck ki a kor\u00e1bbi <code>Bicycle</code> oszt\u00e1lyt egy konstruktorral ami egy brand param\u00e9tert fogad. Ha l\u00e9trehozunk egy list\u00e1t ami a gy\u00e1rt\u00f3kat tartalmazza egy egyszer\u0171 kifejez\u00e9ssel ebb\u0151l a String list\u00e1b\u00f3l <code>Bicycle</code> objektumokat tudunk l\u00e9trehozni.</p> <pre><code>class Bicycle {\n//...\npublic Bicycle(String brand) {\nthis.brand = brand;\nthis.frameSize = 0;\n}\n//...\n}\n</code></pre> Lambda kifejez\u00e9sMethod reference <pre><code>    public class Bicycle {\npublic static void main(String[] args) {\nList&lt;String&gt; bikeBrands = Arrays.asList(\"Giant\", \"Scott\", \"Trek\", \"GT\");\nbikeBrands.stream().map(brand -&gt; new Bicycle(brand)).toList();\n}\n}\n</code></pre> <pre><code>    public class Bicycle {\npublic static void main(String[] args) {\nList&lt;String&gt; bikeBrands = Arrays.asList(\"Giant\", \"Scott\", \"Trek\", \"GT\");\nbikeBrands.stream().map(Bicycle::new).toList();\n}\n}\n</code></pre>"},{"location":"java_se_15/#streams","title":"Streams","text":"<p>Az egyik leghasznosabb \u00fajdons\u00e1g a Java 8 ban a Stream-ek voltak. Nem \u00f6sszekeverend\u0151 a Java I/O streamekkel (FileInputStream, stb).</p> <p>A Java Stream API egy hat\u00e9kony m\u00f3dszer a kollekci\u00f3k (p\u00e9ld\u00e1ul list\u00e1k, t\u00f6mb\u00f6k stb.) eleminek feldolgoz\u00e1s\u00e1ra. A Stream egy olyan objektum, amely lehet\u0151v\u00e9 teszi funkcion\u00e1lis m\u0171veletek sorozat\u00e1nak v\u00e9grehajt\u00e1s\u00e1t az adatelemeken, mint p\u00e9ld\u00e1ul sz\u0171r\u00e9s, lek\u00e9pez\u00e9s \u00e9s rendez\u00e9s. A Stream API haszn\u00e1lata lehet\u0151v\u00e9 teszi a k\u00f3d olvashat\u00f3s\u00e1g\u00e1nak \u00e9s karbantarthat\u00f3s\u00e1g\u00e1nak jav\u00edt\u00e1s\u00e1t, valamint az adatfeldolgoz\u00e1s hat\u00e9konys\u00e1g\u00e1t.</p> <p>A stream nem t\u00e1rol adatot, nem egy adatstrukt\u00fara \u00e9s soha nem m\u00f3dos\u00edtja az eredeti adat forr\u00e1st.</p>"},{"location":"java_se_15/#stream-letrehozasa","title":"Stream l\u00e9trehoz\u00e1sa","text":"<p>A <code>Stream</code> objektumot egy megl\u00e9v\u0151 adatszerkezetb\u0151l lehet l\u00e9trehozni. N\u00e9zz\u00fcnk meg p\u00e1r leggyakrabban haszn\u00e1lt <code>Stream</code> l\u00e9trehoz\u00e1si m\u00f3dszert.</p>"},{"location":"java_se_15/#stream-kollekciobol","title":"Stream kollekci\u00f3b\u00f3l","text":"<p>A leggyakoribb m\u00f3dja a <code>Stream</code> l\u00e9trehoz\u00e1s\u00e1nak egy megl\u00e9v\u0151 kollekci\u00f3b\u00f3l (pl. <code>List</code>, <code>Set</code>, <code>Map</code>) val\u00f3 \u00e1talak\u00edt\u00e1s. Ehhez a kollekci\u00f3 a <code>stream()</code> met\u00f3dus\u00e1t haszn\u00e1ljuk.</p> <pre><code>        List&lt;String&gt; myList=Arrays.asList(\"a\",\"b\",\"c\");\nStream&lt;String&gt; stream=myList.stream();\n</code></pre>"},{"location":"java_se_15/#stream-tombbol","title":"Stream t\u00f6mbb\u0151l","text":"<p>T\u00f6mbb\u0151l is k\u00f6nnyen lehet Stream-et k\u00e9sz\u00edteni a <code>Arrays.stream()</code> met\u00f3dussal.</p> <pre><code>        String[]array={\"apple\",\"banana\",\"cherry\"};\nStream&lt;String&gt; stream=Arrays.stream(array);\n</code></pre>"},{"location":"java_se_15/#iteralt-stream","title":"Iter\u00e1lt stream","text":"<p>A <code>Stream.iterate()</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel egy kezdeti \u00e9rt\u00e9kb\u0151l kiindulva sorozatot gener\u00e1lhatunk egy megadott szab\u00e1ly alapj\u00e1n.</p> <pre><code>        Stream&lt;Integer&gt; numbers=Stream.iterate(0,n-&gt;n+1);\n</code></pre>"},{"location":"java_se_15/#stream-muveletek","title":"Stream m\u0171veletek","text":"<p>AStream API sz\u00e1mos m\u0171veletet k\u00edn\u00e1l, amelyek lehet\u0151v\u00e9 teszik az adatok kiv\u00e1laszt\u00e1s\u00e1t, transzform\u00e1l\u00e1s\u00e1t \u00e9s sz\u0171r\u00e9s\u00e9t. Ezek a m\u0171veletek funkcion\u00e1lis programoz\u00e1si elveken alapulnak, \u00e9s lehet\u0151v\u00e9 teszik az adatfeldolgoz\u00e1s kifejez\u0151 \u00e9s hat\u00e9kony k\u00f3dol\u00e1s\u00e1t. A Stream m\u0171veletek k\u00f6z\u00f6tt megk\u00fcl\u00f6nb\u00f6ztethet\u00fcnk k\u00f6ztes (intermediate) \u00e9s termin\u00e1lis ( terminal) m\u0171veleteket.</p>"},{"location":"java_se_15/#intermediate-muveletek","title":"Intermediate m\u0171veletek","text":"<p>Az intermediate stream m\u0171veletek k\u00f6z\u00e9 tartoznak azok a m\u0171veletek, amelyek egy megl\u00e9v\u0151 <code>Stream</code>-et m\u00f3dos\u00edtanak, \u00e1talak\u00edtanak vagy sz\u0171rnek, \u00e9s \u00faj Stream-et eredm\u00e9nyeznek an\u00e9lk\u00fcl, hogy a v\u00e9gleges eredm\u00e9nyt kisz\u00e1m\u00edtan\u00e1k. Ezek a m\u0171veletek \"k\u00f6ztes\" m\u0171veletek, mert tov\u00e1bbi m\u0171veletekkel kombin\u00e1lhat\u00f3k a k\u00edv\u00e1nt eredm\u00e9ny el\u00e9r\u00e9s\u00e9hez. Az intermediate m\u0171veletek nem hajtanak v\u00e9gre t\u00e9nyleges adatfeldolgoz\u00e1st, csak egy \u00faj Stream-et hoznak l\u00e9tre az eredeti Stream alapj\u00e1n.</p>"},{"location":"java_se_15/#filter","title":"Filter","text":"<p>A <code>filter</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel sz\u0171rhetj\u00fck az elemeket egy <code>Stream</code>-ben egy adott felt\u00e9tel alapj\u00e1n. Csak azok az elemek ker\u00fclnek be a kimeneti <code>Stream</code>-be, amelyek a felt\u00e9telnek megfelelnek.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,3,4,5,6);\nStream&lt;Integer&gt; evenNumbers=numbers.stream().filter(n-&gt;n%2==0); // (1)\n</code></pre> <ol> <li>A kimeneti <code>Stream</code> csak a p\u00e1ros elemeket tartalmazza.</li> </ol>"},{"location":"java_se_15/#map","title":"Map","text":"<p>A <code>map</code> met\u00f3dus lehet\u0151v\u00e9 teszi az elemek \u00e1talak\u00edt\u00e1s\u00e1t egy <code>Stream</code>-ben egy megadott f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>        List&lt;String&gt; words=Arrays.asList(\"apple\",\"banana\",\"cherry\");\nStream&lt;Integer&gt; wordLengths=words.stream().map(String::length); // (1)\n</code></pre> <ol> <li>A kimeneti <code>Stream</code> a szavak hossz\u00fas\u00e1g\u00e1t tartalmazza.</li> </ol>"},{"location":"java_se_15/#flatmap","title":"Flatmap","text":"<p>A <code>flatMap</code> met\u00f3dus lehet\u0151v\u00e9 teszi egy \u00faj <code>Stream</code> l\u00e9trehoz\u00e1s\u00e1t az eredeti <code>Stream</code> elemeib\u0151l egy megadott f\u00fcggv\u00e9ny \u00e1ltal l\u00e9trehozott <code>Stream</code>-ek \u00f6sszef\u00e9s\u00fcl\u00e9s\u00e9vel.</p> <pre><code>        List&lt;List&lt;Integer&gt;&gt;nestedLists=Arrays.asList(\nArrays.asList(1,2,3),\nArrays.asList(4,5,6),\nArrays.asList(7,8,9)\n);\nStream&lt;Integer&gt; flattenedStream=nestedLists.stream().flatMap(List::stream); // (1)\n</code></pre> <ol> <li>Ebben az esetben a <code>flattenedStream</code> tartalmazza az \u00f6sszes sz\u00e1mot az al-Stream-ek \u00f6sszef\u00e9s\u00fcl\u00e9s\u00e9vel.</li> </ol>"},{"location":"java_se_15/#distinct","title":"Distinct","text":"<p>A distinct met\u00f3dus egy \u00faj <code>Stream</code>-et hoz l\u00e9tre, amely csak az egyedi (ism\u00e9tl\u00e9d\u00e9sek n\u00e9lk\u00fcli) elemeket tartalmazza az eredeti <code>Stream</code>-b\u0151l.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,2,3,3,3,4,4,4,4);\nStream&lt;Integer&gt; distinctNumbers=numbers.stream().distinct(); // (1)\n</code></pre> <ol> <li>A kimeneti <code>Stream</code> csak a unique \u00e9rt\u00e9keket tartalmazza. (1, 2, 3, 4)</li> </ol>"},{"location":"java_se_15/#sorted","title":"Sorted","text":"<p>A <code>sorted</code> met\u00f3dus sorba rendezheti a <code>Stream</code> elemeit. Alap\u00e9rtelmez\u00e9s szerint n\u00f6vekv\u0151 sorrendben rendez.</p> <pre><code>        List&lt;String&gt; names=Arrays.asList(\"John\",\"Alice\",\"Bob\",\"Eve\");\nStream&lt;String&gt; sortedNames=names.stream().sorted();\n</code></pre>"},{"location":"java_se_15/#peek","title":"Peek","text":"<p>A <code>peek</code> met\u00f3dus lehet\u0151v\u00e9 teszi, hogy egy f\u00fcggv\u00e9nyt hajtsunk v\u00e9gre minden elemen a <code>Stream</code>-ben, mik\u00f6zben a <code>Stream</code> tov\u00e1bb folyik. Ez gyakran hasznos a hibakeres\u00e9shez vagy a logol\u00e1shoz, an\u00e9lk\u00fcl hogy befoly\u00e1soln\u00e1 az eredm\u00e9ny <code>Stream</code>-et.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,3,4,5);\nList&lt;Integer&gt; squaredNumbers=numbers.stream()\n.peek(n-&gt;System.out.println(\"Sz\u00e1m: \"+n))\n.map(n-&gt;n*n)\n.collect(Collectors.toList());\n</code></pre> <p>Az al\u00e1bbi p\u00e9lda, el\u0151sz\u00f6r ki\u00edrja az \u00f6sszes sz\u00e1mot, majd n\u00e9gyzetre emeli a sz\u00e1mokat \u00e9s a n\u00e9gyzetre emelt sz\u00e1mok list\u00e1j\u00e1val t\u00e9r vissza.</p>"},{"location":"java_se_15/#limit-es-skip","title":"Limit \u00e9s Skip","text":"<p>A <code>limit</code> \u00e9s <code>skip</code> met\u00f3dusok seg\u00edts\u00e9g\u00e9vel lehet\u0151s\u00e9g van a <code>Stream</code> elemeinek korl\u00e1toz\u00e1s\u00e1ra vagy kihagy\u00e1s\u00e1ra. A <code>limit</code> csak az els\u0151 n darab elemet tartalmazza, m\u00edg a <code>skip</code> az els\u0151 n elemet kihagyja a <code>Stream</code>-b\u0151l.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,3,4,5,6);\nStream&lt;Integer&gt; limitedStream=numbers.stream().limit(3); // (1)\nStream&lt;Integer&gt; skippedStream=numbers.stream().skip(2);   // (2)\n</code></pre> <ol> <li>Csak az els\u0151 3 sz\u00e1m</li> <li>Az els\u0151 2 sz\u00e1m kihagy\u00e1sa</li> </ol>"},{"location":"java_se_15/#terminal-muveletek","title":"Terminal m\u0171veletek","text":"<p>Amikor egy termin\u00e1lis m\u0171veletet alkalmazunk egy <code>Stream</code>-re, a <code>Stream</code> lez\u00e1rul, \u00e9s nem hajt v\u00e9gre tov\u00e1bbi k\u00f6ztes vagy termin\u00e1lis m\u0171veleteket.</p>"},{"location":"java_se_15/#foreach","title":"foreach","text":"<p>A <code>forEach</code> m\u0171velet lehet\u0151v\u00e9 teszi, hogy egy f\u00fcggv\u00e9nyt hajtsunk v\u00e9gre a <code>Stream</code> minden elem\u00e9n. Ez hasznos, ha szeretn\u00e9nk minden elemet feldolgozni a <code>Stream</code>-b\u0151l, p\u00e9ld\u00e1ul ki\u00edrni egy kollekci\u00f3 elemeit a konzolra.</p> <pre><code>        List&lt;String&gt; names=Arrays.asList(\"John\",\"Alice\",\"Bob\");\nnames.stream().forEach(name-&gt;System.out.println(\"N\u00e9v: \"+name));\n</code></pre>"},{"location":"java_se_15/#toarray","title":"toArray","text":"<p>A <code>toArray</code> m\u0171velet lehet\u0151v\u00e9 teszi a <code>Stream</code> elemeinek t\u00f6mbbe konvert\u00e1l\u00e1s\u00e1t. A kimeneti t\u00f6mb t\u00edpus\u00e1t a <code>toArray()</code> met\u00f3dus param\u00e9terk\u00e9nt lehet megadni.</p> <pre><code>        List&lt;String&gt; names=Arrays.asList(\"John\",\"Alice\",\"Bob\");\nString[]nameArray=names.stream().toArray(String[]::new);\n</code></pre>"},{"location":"java_se_15/#anymatch","title":"anyMatch","text":"<p>Az <code>anyMatch</code> met\u00f3dus megn\u00e9zi, hogy legal\u00e1bb egy elem a <code>Stream</code>-ben megfelel-e a megadott felt\u00e9telnek. Ha tal\u00e1l egy megfelel\u0151 elemet, true-t ad vissza, egy\u00e9bk\u00e9nt false-t.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,3,4,5);\nboolean anyEven=numbers.stream().anyMatch(n-&gt;n%2==0);\n</code></pre>"},{"location":"java_se_15/#allmatch","title":"allMatch","text":"<p>Az <code>allMatch</code> met\u00f3dus ellen\u0151rzi, hogy minden elem a <code>Stream</code>-ben megfelel-e a megadott felt\u00e9telnek. Ha minden elem megfelel a felt\u00e9telnek, true-t ad vissza, egy\u00e9bk\u00e9nt false-t.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,3,4,5);\nboolean allEven=numbers.stream().allMatch(n-&gt;n%2==0);\n</code></pre>"},{"location":"java_se_15/#nonematch","title":"noneMatch","text":"<p>A <code>noneMatch</code> met\u00f3dus megn\u00e9zi, hogy egyetlen elem sem felel-e meg a megadott felt\u00e9telnek. Ha nincs megfelel\u0151 elem, true-t ad vissza, egy\u00e9bk\u00e9nt false-t.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,3,5,7,9);\nboolean noneEven=numbers.stream().noneMatch(n-&gt;n%2==0);\n</code></pre>"},{"location":"java_se_15/#count","title":"count","text":"<p>A <code>count</code> met\u00f3dus visszaadja a Stream elemeinek sz\u00e1m\u00e1t.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,3,4,5);\nlong count=numbers.stream().count();\n</code></pre>"},{"location":"java_se_15/#findany","title":"findAny","text":"<p>A <code>findAny</code> met\u00f3dus b\u00e1rmely elemet visszaadja a <code>Stream</code>-b\u0151l. Ez hasznos, ha csak egy elemre van sz\u00fcks\u00e9g\u00fcnk, \u00e9s nincs jelent\u0151s\u00e9ge annak, hogy pontosan melyik elemet kapjuk vissza.</p> <pre><code>        List&lt;String&gt; fruits=Arrays.asList(\"apple\",\"banana\",\"cherry\");\nOptional&lt;String&gt; anyFruit=fruits.stream().findAny();\n</code></pre>"},{"location":"java_se_15/#findfirst","title":"findFirst","text":"<p>A <code>findFirst</code> met\u00f3dus visszaadja az els\u0151 elemet a <code>Stream</code>-b\u0151l.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,3,4,5);\nOptional&lt;Integer&gt; firstNumber=numbers.stream().findFirst();\n</code></pre>"},{"location":"java_se_15/#min-es-max","title":"min \u00e9s max","text":"<p>Ezek a met\u00f3dusok a <code>Stream</code> legkisebb vagy legnagyobb elem\u00e9t adj\u00e1k vissza a megadott \u00f6sszehasonl\u00edt\u00e1s alapj\u00e1n.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(5,2,8,1,6);\nOptional&lt;Integer&gt; minNumber=numbers.stream().min(Integer::compareTo);\nOptional&lt;Integer&gt; maxNumber=numbers.stream().max(Integer::compareTo);\n</code></pre>"},{"location":"java_se_15/#reduce","title":"reduce","text":"<p>A <code>reduce</code> met\u00f3dus lehet\u0151v\u00e9 teszi a <code>Stream</code> elemeinek \u00f6sszevon\u00e1s\u00e1t egyetlen \u00e9rt\u00e9kbe a megadott \u00f6sszef\u0171z\u0151 m\u0171velet seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,3,4,5);\nint sum=numbers.stream().reduce(0,(a,b)-&gt;a+b);\n</code></pre>"},{"location":"java_se_15/#collect","title":"collect","text":"<p>A <code>collect</code> m\u0171velet lehet\u0151v\u00e9 teszi az \u00f6sszes elemet egy gy\u0171jt\u0151 objektumba gy\u0171jteni, p\u00e9ld\u00e1ul egy <code>List</code>-be vagy <code>Map</code>-be. A <code>Collector</code> objektumot a <code>Collectors</code> oszt\u00e1ly statikus met\u00f3dusaival lehet l\u00e9trehozni.</p>"},{"location":"java_se_15/#gyujtes-list-be","title":"Gy\u0171jt\u00e9s List-be","text":"<pre><code>        List&lt;String&gt; names=Arrays.asList(\"John\",\"Alice\",\"Bob\");\nList&lt;String&gt; collectedNames=names.stream().collect(Collectors.toList());\n</code></pre>"},{"location":"java_se_15/#gyujtes-set-be","title":"Gy\u0171jt\u00e9s Set-be","text":"<pre><code>        List&lt;String&gt; names=Arrays.asList(\"John\",\"Alice\",\"Bob\",\"Alice\");\nSet&lt;String&gt; collectedNames=names.stream().collect(Collectors.toSet());\n</code></pre>"},{"location":"java_se_15/#gyujtes-map-be","title":"Gy\u0171jt\u00e9s Map-be","text":"<pre><code>        List&lt;String&gt; names=Arrays.asList(\"John\",\"Alice\",\"Bob\");\nMap&lt;Integer, String&gt; nameMap=names.stream().collect(Collectors.toMap(String::length,name-&gt;name));\n</code></pre>"},{"location":"java_se_15/#szoveg-osszefuzese","title":"Sz\u00f6veg \u00f6sszef\u0171z\u00e9se","text":"<pre><code>        List&lt;String&gt; fruits=Arrays.asList(\"apple\",\"banana\",\"cherry\");\nString concatenatedFruits=fruits.stream().collect(Collectors.joining(\", \"));\n</code></pre>"},{"location":"java_se_15/#csoportositas-kulcs-alapjan","title":"Csoportos\u00edt\u00e1s kulcs alapj\u00e1n","text":"<pre><code>        List&lt;String&gt; names=Arrays.asList(\"John\",\"Alice\",\"Bob\",\"Anna\");\nMap&lt;Character, List&lt;String&gt;&gt;groupedNames=names.stream()\n.collect(Collectors.groupingBy(name-&gt;name.charAt(0)));\n</code></pre>"},{"location":"java_se_15/#particionalas","title":"Part\u00edcion\u00e1l\u00e1s","text":"<pre><code>        List&lt;Integer&gt; numbers=Arrays.asList(1,2,3,4,5,6,7,8,9);\nMap&lt;Boolean, List&lt;Integer&gt;&gt;evenOddMap=numbers.stream()\n.collect(Collectors.partitioningBy(n-&gt;n%2==0));\n</code></pre>"},{"location":"java_se_15/#optional","title":"Optional","text":"<p><code>Optional</code> egy olyan oszt\u00e1ly a Java-ban, amely lehet\u0151v\u00e9 teszi, hogy kezelj\u00fck az \u00e9rt\u00e9k n\u00e9lk\u00fcli vagy null \u00e9rt\u00e9keket an\u00e9lk\u00fcl, hogy <code>null</code> ellen\u0151rz\u00e9seket kellene v\u00e9gezni. Az <code>Optional</code> oszt\u00e1ly el\u0151sz\u00f6r a Java 8-ban jelent meg, \u00e9s az\u00f3ta haszn\u00e1lj\u00e1k a k\u00f3db\u00e1zisokban az \u00e9rt\u00e9kek biztons\u00e1gosabb \u00e9s olvashat\u00f3bb kezel\u00e9se \u00e9rdek\u00e9ben.</p>"},{"location":"java_se_15/#optional-letrehozasa","title":"Optional l\u00e9trehoz\u00e1sa","text":"<pre><code>        Optional&lt;String&gt; emptyOptional=Optional.empty(); // (1)\nOptional&lt;String&gt; nonEmptyOptional=Optional.of(\"Hello, Optional!\"); // (2)\nOptional&lt;String&gt; nullOptional=Optional.ofNullable(null); // (3)\n</code></pre> <ol> <li>\u00dcres Optional l\u00e9trehoz\u00e1sa</li> <li>Optional l\u00e9trehoz\u00e1sa \u00e9rt\u00e9kb\u0151l</li> <li>Optional l\u00e9trehoz\u00e1sa null objektumb\u00f3l</li> </ol>"},{"location":"java_se_15/#optional-ertekenenek-ellorzese-ispresent","title":"Optional \u00e9rt\u00e9k\u00e9n\u00e9nek ell\u0151rz\u00e9se - isPresent","text":"<pre><code>        Optional&lt;String&gt; optional = ...; // valamilyen Optional p\u00e9ld\u00e1ny\nif (optional.isPresent()) {\nString value = optional.get();\nSystem.out.println(\"Az \u00e9rt\u00e9k: \" + value);\n} else {\nSystem.out.println(\"Nincs \u00e9rt\u00e9k.\");\n}\n</code></pre>"},{"location":"java_se_15/#optional-ertekenek-hasznalata-ifpresent","title":"Optional \u00e9rt\u00e9k\u00e9nek haszn\u00e1lata - ifPresent","text":"<pre><code>        Optional&lt;String&gt; optional = ...; // valamilyen Optional p\u00e9ld\u00e1ny\noptional.ifPresent(value -&gt; System.out.println(\"Az \u00e9rt\u00e9k: \" + value));\n</code></pre>"},{"location":"java_se_15/#optional-alapertelmezett-erteke","title":"Optional alap\u00e9rtelmezett \u00e9rt\u00e9ke","text":"<pre><code>        Optional&lt;String&gt; optional = ...; // valamilyen Optional p\u00e9ld\u00e1ny\nString value = optional.orElse(\"Nincs \u00e9rt\u00e9k\");\n</code></pre>"},{"location":"java_se_15/#kivetel-dobasa-ha-nincs-jelen-ertek","title":"Kiv\u00e9tel dob\u00e1sa, ha nincs jelen \u00e9rt\u00e9k","text":"<pre><code>        Optional&lt;String&gt; optional = ...; // valamilyen Optional p\u00e9ld\u00e1ny\nString value = optional.orElseThrow(() -&gt; new RuntimeException(\"Nincs \u00e9rt\u00e9k\"));\n</code></pre>"},{"location":"java_se_15_ex/","title":"Java funkcion\u00e1lis programoz\u00e1s","text":""},{"location":"java_se_15_ex/#1-feladat","title":"1. Feladat","text":"<p>\u00cdrj egy Java programot amiben funkcion\u00e1lis interf\u00e9sz \u00e9s lambda kifejez\u00e9s seg\u00edts\u00e9vel eld\u00f6nt\u00f6d egy Stringr\u0151l, hogy \u00fcres-e.</p>"},{"location":"java_se_15_ex/#2-feladat","title":"2. Feladat","text":"<p>\u00cdrj egy Java programot amiben lambda kifejez\u00e9s seg\u00edts\u00e9vel egy String list\u00e1t ford\u00edtott abc sorrendbe rendezel.</p>"},{"location":"java_se_15_ex/#3-feladat","title":"3. Feladat","text":"<p>K\u00e9sz\u00edts egy statikus met\u00f3dust, ami egy sz\u00e1mot v\u00e1r \u00e9s ki\u00edrja a konzolra a sz\u00e1mot \u00e9s hogy pr\u00edmsz\u00e1m-e. Deklar\u00e1lj egy eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 list\u00e1t \u00e9s method reference seg\u00edts\u00e9g\u00e9vel \u00edrd ki a konzolra a sz\u00e1mokr\u00f3l, hogy pr\u00edm-e.</p>"},{"location":"java_se_15_ex/#4-feladat","title":"4. Feladat","text":"<p>Vegy\u00fck az al\u00e1bbi oszt\u00e1lyokat:</p> <pre><code>public class Employee {\nprivate int id;\nprivate String name;\nprivate int salary;\nprivate Organization organization;\n//Konstruktor, getter, setter, toString\npublic void increaseSalary(int amount) {\nsalary += amount;\n}\n}\n</code></pre> <pre><code>public class Organization {\nprivate String name;\nprivate Country country;\n//Konstruktor, getter, setter, toString\n}\n</code></pre> <pre><code>public class Country {\nprivate String name;\nprivate String isoCode;\n//Konstruktor, getter, setter, toString\n}\n</code></pre> <pre><code>listOfEmployees=Arrays.asList(\nnew Employee(1,\"Jeff Bezos\",100000,new Organization(\"Amazon\",new Country(\"USA\",\"US\"))),\nnew Employee(2,\"John Smith\",20000,new Organization(\"Amazon\",new Country(\"USA\",\"US\"))),\nnew Employee(3,\"Bill Gates\",200000,new Organization(\"Microsoft\",new Country(\"USA\",\"US\"))),\nnew Employee(4,\"Paul Allen\",200000,new Organization(\"Microsoft\",new Country(\"USA\",\"US\"))),\nnew Employee(5,\"Mark Zuckerberg\",300000,new Organization(\"Facebook\",new Country(\"Ireland\",\"IR\"))),\nnew Employee(6,\"Bill Bow\",10000,new Organization(\"Facebook\",new Country(\"Ireland\",\"IR\"))),\nnew Employee(7,\"Elon Musk\",300000,new Organization(\"Twitter\",new Country(\"USA\",\"US\"))),\nnew Employee(8,\"Parag Agrawal\",300000,new Organization(\"Twitter\",new Country(\"USA\",\"US\"))),\nnew Employee(9,\"Tim Cook\",250000,new Organization(\"Apple\",new Country(\"United Kingdom\",\"UK\"))),\nnew Employee(10,\"Jony Ive\",50000,new Organization(\"Apple\",new Country(\"United Kingdom\",\"UK\"))),\nnew Employee(11,\"Steve Wozniak\",150000,new Organization(\"Apple\",new Country(\"United Kingdom\",\"UK\")))\n</code></pre> <p>Az al\u00e1bbi lista felhaszn\u00e1l\u00e1s\u00e1val oldja meg a k\u00f6vetkez\u0151 lek\u00e9rdez\u00e9seket:</p>"},{"location":"java_se_15_ex/#41-feladat","title":"4.1. Feladat","text":"<p>Streamek seg\u00edts\u00e9g\u00e9vel k\u00e9sz\u00edts egy list\u00e1t, a listOfEmployees lista, minden harmadik elem\u00e9t tartalmazza. [Jeff Bezos, Paul Allen, ...]</p>"},{"location":"java_se_15_ex/#42-feladat","title":"4.2. Feladat","text":"<p>Streamek seg\u00edts\u00e9g\u00e9vel k\u00e9sz\u00edts egy <code>Map&lt;String,Double&gt;</code> adatszerkezetet, amiben minden v\u00e1llalathoz az ott keres\u0151k \u00e1tlag b\u00e9re legyen t\u00e1rs\u00edtva."},{"location":"java_se_15_ex/#43-feladat","title":"4.3. Feladat","text":"<p>Streamek seg\u00edts\u00e9g\u00e9vel k\u00e9sz\u00edts egy fizet\u00e9sek alapj\u00e1n rendezett <code>Employee</code> list\u00e1t, ha k\u00e9t fizet\u00e9s azonos a nev\u00fck alapj\u00e1n rendezd \u0151ket.</p>"},{"location":"java_se_15_ex/#44-feladat","title":"4.4. Feladat","text":"<p>Streamek seg\u00edts\u00e9g\u00e9vel k\u00e9sz\u00edts egy list\u00e1t, az amerikai sz\u00e9khely\u0171 <code>Organization</code>-\u00f6kr\u0151l. Minden <code>Organization</code> csak egyszer szerepeljen.</p>"},{"location":"java_se_15_ex/#45-feladat","title":"4.5. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>Map&lt;Organization,Long&gt;</code> adatszerkezetetet, amiben minden organization objektumhoz hozz\u00e1 rendeled az ott dolgoz\u00f3k sz\u00e1m\u00e1t.</p>"},{"location":"java_se_15_ex/#46-feladat","title":"4.6. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>Map&lt;Organization,List&lt;Employee&gt;&gt;</code> adatszerkezetetet, amiben minden organization objektumhoz hozz\u00e1 rendeled az ott dolgoz\u00f3kat.</p>"},{"location":"java_se_15_ex/#47-feladat","title":"4.7. Feladat","text":"<p>Streamek seg\u00edts\u00e9g\u00e9vel add meg az \u00e1tlag felett keres\u0151 alkalmazottak list\u00e1j\u00e1t.</p>"},{"location":"java_se_15_ex/#48-feladat","title":"4.8. Feladat","text":"<p>Streamek seg\u00edts\u00e9g\u00e9vel \u00edrd ki minden dolgoz\u00f3 nev\u00e9t, majd t\u00f6r\u00f6ld ki a vezet\u00e9knev\u00fcket \u00e9s \u00edrd ki a nev\u00fcket \u00fajra.</p>"},{"location":"java_se_15_ex/#49-feladat","title":"4.9. Feladat","text":"<p>Streamek seg\u00edts\u00e9g\u00e9vel keresd meg a leghosszabb nev\u0171 dolgoz\u00f3t.</p>"},{"location":"java_se_15_ex/#410-feladat","title":"4.10. Feladat","text":"<p>Streamek seg\u00edts\u00e9g\u00e9vel n\u00e9zd meg, van-e olyan c\u00e9g, ahol legal\u00e1bb 4-en dolgoznak. A stream t\u00e9rjen vissza egy boolean \u00e9rt\u00e9kkel.</p>"},{"location":"java_se_16/","title":"Adatb\u00e1ziskezel\u00e9s","text":""},{"location":"java_se_16/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Az adatb\u00e1zisok a modern szoftvertervez\u00e9s \u00e9s alkalmaz\u00e1sfejleszt\u00e9s kulcsfontoss\u00e1g\u00fa r\u00e9szei. Az adatok hat\u00e9kony t\u00e1rol\u00e1sa, lek\u00e9rdez\u00e9se \u00e9s m\u00f3dos\u00edt\u00e1sa n\u00e9lk\u00fcl\u00f6zhetetlen a szervezetek sz\u00e1m\u00e1ra az inform\u00e1ci\u00f3k kezel\u00e9s\u00e9hez \u00e9s elemz\u00e9s\u00e9hez. A Java sz\u00e1mos eszk\u00f6zt \u00e9s API-t k\u00edn\u00e1l az adatb\u00e1zisokkal val\u00f3 kommunik\u00e1ci\u00f3hoz \u00e9s kezel\u00e9s\u00e9hez.</p>"},{"location":"java_se_16/#adatbazisok","title":"Adatb\u00e1zisok","text":"<p>Az adatb\u00e1zis egym\u00e1shoz kapcsol\u00f3d\u00f3 inform\u00e1ci\u00f3k b\u00e1rmilyen gy\u0171jtem\u00e9nye. Az adatb\u00e1zisokat arra haszn\u00e1ljuk, hogy az adatokat \u00fagy t\u00e1rolj\u00e1k \u00e9s szervezz\u00e9k, hogy azokat egyszer\u0171en lehessen kezelni \u00e9s el\u00e9rni.</p> <p>Adatnak nevez\u00fcnk b\u00e1rmely olyan inform\u00e1ci\u00f3t, amelyet r\u00f6gz\u00edt\u00fcnk \u00e9s t\u00e1rolunk p\u00e9ld\u00e1ul egy szem\u00e9lyr\u0151l, egy t\u00e1rgyr\u00f3l, egy objektumr\u00f3l (ezeket entit\u00e1soknak h\u00edvjuk), de adatnak nevezz\u00fck az entit\u00e1sok jellemz\u0151it (azaz attrib\u00fatumait) is.</p> <p>Az adatb\u00e1zisokat nagy vonalakban rel\u00e1ci\u00f3s \u00e9s nem rel\u00e1ci\u00f3s t\u00edpusokra oszthatjuk. A rel\u00e1ci\u00f3s adatb\u00e1zisok nagy m\u00e9rt\u00e9kben struktur\u00e1ltak, \u00e9s \u00e9rtelmezni tudj\u00e1k a Structured Query Language (magyarul struktur\u00e1lt lek\u00e9rdez\u0151nyelv), azaz az SQL nev\u0171 programnyelvet. A nem rel\u00e1ci\u00f3s adatb\u00e1zisok rendk\u00edv\u00fcl v\u00e1ltozatosak, \u00e9s sz\u00e1mos k\u00fcl\u00f6nb\u00f6z\u0151 adatstrukt\u00far\u00e1t t\u00e1mogatnak. Sz\u00e1mos nem rel\u00e1ci\u00f3s adatb\u00e1zis nem haszn\u00e1l SQL-t, ez\u00e9rt ezeket gyakran NoSQL-adatb\u00e1zisoknak is nevezik.</p> <p>A rel\u00e1ci\u00f3s adatb\u00e1zis a leggyakoribb t\u00edpus, amelyben az adatok olyan t\u00e1bl\u00e1kba vannak szervezve, amelyek minden egyes entit\u00e1sr\u00f3l inform\u00e1ci\u00f3kat t\u00e1rolnak, \u00e9s el\u0151re meghat\u00e1rozott kateg\u00f3ri\u00e1kat tartalmaznak sorokban \u00e9s oszlopokban. Ezek a struktur\u00e1lt adatok egyszerre hat\u00e9konyak \u00e9s rugalmasan el\u00e9rhet\u0151k. Rel\u00e1ci\u00f3s adatb\u00e1zis p\u00e9ld\u00e1ul az SQL Server, az Azure SQL, a MySQL, a PostgreSQL.</p> <p>A nem rel\u00e1ci\u00f3s adatb\u00e1zisok struktur\u00e1latlan \u00e9s f\u00e9lig struktur\u00e1lt adatokat t\u00e1rolnak. A rel\u00e1ci\u00f3s adatb\u00e1zisokkal ellent\u00e9tben nem haszn\u00e1lnak oszlopokat \u00e9s sorokat tartalmaz\u00f3 t\u00e1bl\u00e1kat. Ehelyett olyan t\u00e1rol\u00e1si modellt haszn\u00e1lnak, amely a t\u00e1rolt adatok t\u00edpus\u00e1nak speci\u00e1lis k\u00f6vetelm\u00e9nyeire van optimaliz\u00e1lva. A nem rel\u00e1ci\u00f3s adatb\u00e1zisok lehet\u0151v\u00e9 teszik, hogy gyorsan lehessen elf\u00e9rni, friss\u00edteni \u00e9s elemezni elosztott adatok nagyobb csoportj\u00e1t. Nem rel\u00e1ci\u00f3s adatb\u00e1zisok p\u00e9ld\u00e1ul a MongoDB, a DocumentDB, a Redis \u00e9s a Neo4j.</p>"},{"location":"java_se_16/#egyed-kapcsolat-modell","title":"Egyed kapcsolat modell","text":"<p>Az egyed-kapcsolat (Entity-Relationship) modell (r\u00f6viden E-K (E-R) modell) konkr\u00e9t adatmodellt\u0151l f\u00fcggetlen\u00fcl, szeml\u00e9letesen adja meg az adatb\u00e1zis szerkezet\u00e9t.</p> <ul> <li>Egyed (entit\u00e1s): a val\u00f3s vil\u00e1g egy objektuma, melyr\u0151l az adatb\u00e1zisban inform\u00e1ci\u00f3t szeretn\u00e9nk t\u00e1rolni</li> <li>Tulajdons\u00e1g (attrib\u00fatum): az egyed egy jellemz\u0151je</li> <li>Kulcs: a tulajdons\u00e1gok legsz\u0171kebb olyan r\u00e9szhalmaza, amely az egyedet egy\u00e9rtelm\u0171en meghat\u00e1rozza</li> <li>Kapcsolat: az egyedek k\u00f6z\u00f6tti kapcsolat</li> </ul> <p>Azt a modellt, amely az adatb\u00e1zisban t\u00e1roland\u00f3 adatokat egyedekkel, tulajdons\u00e1gokkal \u00e9s kapcsolatokkal \u00edrja le, egyed-kapcsolat modellnek (r\u00f6viden E-K modellnek), az ezt \u00e1br\u00e1zol\u00f3 diagramot pedig egyed-kapcsolat diagramnak (r\u00f6viden E-K diagramnak) nevezz\u00fck.</p> <p></p> <p>Az E-K diagram az al\u00e1bbi jel\u00f6l\u00e9seket haszn\u00e1lja:</p> <ul> <li>Az egyedeket t\u00e9glalappal</li> <li>A tulajdons\u00e1gokat ellipszissel</li> <li>A kulcsot al\u00e1h\u00faz\u00e1ssal</li> <li>A kapcsolatokat rombuszokkal \u00e1br\u00e1zolja</li> </ul>"},{"location":"java_se_16/#kapcsolatok","title":"Kapcsolatok","text":"<p>A kapcsolatoknak megk\u00fcl\u00f6nb\u00f6ztetj\u00fck h\u00e1rom t\u00edpus\u00e1t:</p> <ul> <li>Egy-az-egyhez (One to One) kapcsolat eset\u00e9n egy E1 egyedp\u00e9ld\u00e1nyhoz legfeljebb egy E2 egyedp\u00e9ld\u00e1ny tartozhat,   \u00e9s viszont, egy E2 egyedp\u00e9ld\u00e1nyhoz is legfeljebb egy E1 egyedp\u00e9ld\u00e1ny tartozhat. Az E-K diagramon ilyenkor nyilat   tesz\u00fcnk a kapcsolatot \u00e1br\u00e1zol\u00f3 vonal E1 \u00e9s E2 fel\u00f6li v\u00e9g\u00e9re is (vagy egy 1-est \u00edrunk a vonal mindk\u00e9t v\u00e9ge f\u00f6l\u00e9).</li> </ul> <p></p> <ul> <li>Egy-a-t\u00f6bbh\u00f6z (One to Many) kapcsolat eset\u00e9n egy E1 egyedp\u00e9ld\u00e1nyhoz t\u00f6bb E2 egyedp\u00e9ld\u00e1ny, de egy E2   egyedp\u00e9ld\u00e1nyhoz csak egy E1 egyedp\u00e9ld\u00e1ny tartozhat. Az E-K diagramon ilyenkor a kapcsolatot \u00e1br\u00e1zol\u00f3 vonal E1 fel\u00f6li   v\u00e9g\u00e9re tesz\u00fcnk csak nyilat (vagy 1-est \u00edrunk f\u00f6l\u00e9, m\u00edg a vonal m\u00e1sik v\u00e9ge f\u00f6l\u00e9 egy N bet\u0171t \u00edrunk).</li> </ul> <p></p> <ul> <li>T\u00f6bb-a-t\u00f6bbh\u00f6z (Many to Many) kapcsolat eset\u00e9n egy E1 egyedp\u00e9ld\u00e1nyhoz t\u00f6bb E2 egyedp\u00e9ld\u00e1ny \u00e9s egy E2   egyedp\u00e9ld\u00e1nyhoz t\u00f6bb E1 egyedp\u00e9ld\u00e1ny tartozhat. Az E-K diagramon ilyenkor a kapcsolatot \u00e1br\u00e1zol\u00f3 vonalra nem tesz\u00fcnk   nyilat (vagy az egyik v\u00e9ge f\u00f6l\u00e9 egy N bet\u0171t, a m\u00e1sik v\u00e9ge f\u00f6l\u00e9 pedig egy M bet\u0171t \u00edrunk).</li> </ul> <p></p>"},{"location":"java_se_16/#relacios-modell","title":"Rel\u00e1ci\u00f3s modell","text":"<p>A rel\u00e1ci\u00f3s adatmodell mind az adatokat, mind a k\u00f6zt\u00fck l\u00e9v\u0151 kapcsolatokat k\u00e9tdimenzi\u00f3s (sorokb\u00f3l \u00e9s oszlopokb\u00f3l \u00e1ll\u00f3) t\u00e1bl\u00e1kban t\u00e1rolja. A rel\u00e1ci\u00f3s adatmodellben attrib\u00fatumnak egy n\u00e9vvel \u00e9s \u00e9rt\u00e9ktartom\u00e1nnyal megadott tulajdons\u00e1got nevez\u00fcnk. A rel\u00e1ci\u00f3s modellben az \u00e9rt\u00e9ktartom\u00e1ny csak elemi t\u00edpus\u00fa \u00e9rt\u00e9kekb\u0151l \u00e1llhat (mint p\u00e9ld\u00e1ul numerikus \u00e9rt\u00e9kek, karakterek vagy sztringek), az \u00f6sszetett t\u00edpusok (p\u00e9ld\u00e1ul strukt\u00fara, lista, halmaz, stb.) nem megengedettek.</p> <p>A rel\u00e1ci\u00f3s\u00e9ma (r\u00f6viden s\u00e9ma) egy n\u00e9vvel ell\u00e1tott attrib\u00fatumhalmazt jelent. A rel\u00e1ci\u00f3s\u00e9ma nem t\u00e1rol adatot, csak egy t\u00e1bla szerkezet\u00e9nek le\u00edr\u00e1s\u00e1t adja meg. A rel\u00e1ci\u00f3s adatb\u00e1zis t\u00f6bb, egym\u00e1ssal kapcsolatban l\u00e9v\u0151 adatt\u00e1bl\u00e1t jelent.</p> <p></p>"},{"location":"java_se_16/#normalizalas","title":"Normaliz\u00e1l\u00e1s","text":"<p>A normaliz\u00e1l\u00e1s az adatb\u00e1zisban tal\u00e1lhat\u00f3 adatok rendszerez\u00e9s\u00e9t jelenti. T\u00e1bl\u00e1kat hozhat l\u00e9tre, \u00e9s azok k\u00f6z\u00f6tt kapcsolatokat l\u00e9tes\u00edthet szab\u00e1lyok szerint. A szab\u00e1lyok c\u00e9lja az adatok v\u00e9delme \u00e9s az adatok rugalmasabb\u00e1 t\u00e9tele ( p\u00e9ld\u00e1ul a redundanci\u00e1k \u00e9s az inkonzisztens f\u00fcgg\u0151s\u00e9gek kik\u00fcsz\u00f6b\u00f6l\u00e9se). A redund\u00e1ns adatok feleslegesen foglalj\u00e1k a lemezter\u00fcletet, \u00e9s karbantart\u00e1si probl\u00e9m\u00e1kat okoznak. Ha a t\u00f6bb helyen megtal\u00e1lhat\u00f3 adatot m\u00f3dos\u00edtani kell, a m\u00f3dos\u00edt\u00e1st minden helyen pontosan ugyan\u00fagy kell elv\u00e9gezni.</p> <p>Az adatb\u00e1zisok normaliz\u00e1l\u00e1s\u00e1nak van n\u00e9h\u00e1ny szab\u00e1lya. Minden szab\u00e1lyt norm\u00e1l form\u00e1nak (NF) nevez\u00fcnk. Ha az els\u0151 szab\u00e1lyt figyeli meg, az adatb\u00e1zis \"els\u0151 norm\u00e1l form\u00e1ban\" lesz. Ha az els\u0151 h\u00e1rom szab\u00e1lyt betartja, az adatb\u00e1zis \"harmadik norm\u00e1l\" form\u00e1tum\u00fanak min\u0151s\u00fcl. B\u00e1r a normaliz\u00e1l\u00e1s m\u00e1s szintjei is lehets\u00e9gesek, a harmadik norm\u00e1l form\u00e1t a legt\u00f6bb alkalmaz\u00e1shoz sz\u00fcks\u00e9ges legmagasabb szintnek tekintik.</p> <ul> <li>1NF: Egy rel\u00e1ci\u00f3s\u00e9ma els\u0151 norm\u00e1lform\u00e1ban van, ha az attrib\u00fatumok \u00e9rt\u00e9ktartom\u00e1nya csak egyszer\u0171 adatokb\u00f3l \u00e1ll.</li> <li>2NF: Egy rel\u00e1ci\u00f3s\u00e9ma m\u00e1sodik norm\u00e1lform\u00e1ban van, ha minden m\u00e1sodlagos attrib\u00fatum teljesen f\u00fcgg b\u00e1rmely kulcst\u00f3l.</li> <li>3NF: Egy rel\u00e1ci\u00f3s\u00e9ma harmadik norm\u00e1lform\u00e1ban van, ha minden m\u00e1sodlagos attrib\u00fatum k\u00f6zvetlen\u00fcl f\u00fcgg b\u00e1rmely   kulcst\u00f3l, azaz nincs kulcst\u00f3l vett tranzit\u00edv f\u00fcgg\u00e9s.</li> </ul>"},{"location":"java_se_16/#normalizalas-lepesei","title":"Normaliz\u00e1l\u00e1s l\u00e9p\u00e9sei","text":"<p>Hozzuk 3NF-re az al\u00e1bbi t\u00e1bl\u00e1t.</p> <p></p> <p>Mivel a rel\u00e1ci\u00f3s adatmodell defin\u00edci\u00f3j\u00e1n\u00e1l kik\u00f6t\u00f6tt\u00fck, hogy minden attrib\u00fatum, csak egyszer\u0171 \u00e9rt\u00e9ket tartalmazhat, ez\u00e9rt az 1NF mindig teljes\u00fcl.</p> <p></p> <p>Egy rel\u00e1ci\u00f3s\u00e9ma m\u00e1sodik norm\u00e1lform\u00e1ban van, ha minden m\u00e1sodlagos attrib\u00fatum teljesen f\u00fcgg b\u00e1rmely kulcst\u00f3l. Ahogy a p\u00e9ld\u00e1ban megtekinthet\u0151 a JOB attrib\u00fatum nem f\u00fcgg az EMPLOYEE_ID-t\u0151l ez\u00e9rt nem felel meg a kettes norm\u00e1l form\u00e1nak.</p> <p></p> <p>Egy rel\u00e1ci\u00f3s\u00e9ma harmadik norm\u00e1lform\u00e1ban van, ha minden m\u00e1sodlagos attrib\u00fatum k\u00f6zvetlen\u00fcl f\u00fcgg b\u00e1rmely kulcst\u00f3l, azaz nincs kulcst\u00f3l vett tranzit\u00edv f\u00fcgg\u00e9s. Itt a p\u00e9ld\u00e1ban l\u00e1tszik, hogy a HOME_STATE f\u00fcgg a STATE_CODE-t\u00f3l ez\u00e9rt nem teljes\u00fcl a 3NF felt\u00e9tele.</p> <p></p> <p>Miut\u00e1n felbontottuk a t\u00e1bl\u00e1inkat a kezdeti 1 t\u00e1bl\u00e1b\u00f3l 4 \u00faj t\u00e1bla keletkezett, az \u00edgy kapott s\u00e9m\u00e1ink m\u00e1r teljes\u00edtik a 3NF felt\u00e9teleit.</p>"},{"location":"java_se_16/#sql","title":"SQL","text":"<p>A SQL (Structured Query Language) egy lek\u00e9rdez\u0151 nyelv. Enn\u00e9lfogva arra szolg\u00e1l, hogy adatokat kezelj\u00fcnk vele, adatokat l\u00e9tre tudunk hozni, tudjuk t\u00f6r\u00f6lni \u00e9s m\u00f3dos\u00edtani, \u00e9s term\u00e9szetesen ki tudjuk olvasni azokat. Az SQL nem algoritmikus nyelv, ez\u00e9rt nem tal\u00e1lhat\u00f3ak meg benne p\u00e9ld\u00e1ul a ciklusszervez\u0151 \u00e9s felt\u00e9teles vez\u00e9rl\u00e9si szerkezetek. Az SQL nyelv nem haszn\u00e1l v\u00e1ltoz\u00f3kat sem. A lek\u00e9rdez\u00e9sek kimenetei eredm\u00e9nyt\u00e1blak\u00e9nt j\u00f6nnek l\u00e9tre, ezek mez\u0151ire tudunk hivatkozni, de nem tudjuk azokat v\u00e1ltoz\u00f3kban t\u00e1rolni.</p> <p>Az SQL nyelv elemeit az al\u00e1bbi k\u00e9t f\u0151 r\u00e9szre oszthatjuk:</p> Adat-defin\u00edci\u00f3s   nyelv     (Data   Definition Language - DDL) Adat-manipul\u00e1ci\u00f3s   nyelv     (Data   Manipulation Language - DML) Ide   tartoznak az adatb\u00e1zisok, a s\u00e9m\u00e1k, a t\u00edpusok defin\u00edci\u00f3s utas\u00edt\u00e1sai, mint   p\u00e9ld\u00e1ul: \u2022CREATE   DATABASE \u2022CREATE   TABLE\u2022ALTER   TABLE\u2022DROP   TABLE Ide tartoznak az adat besz\u00far\u00f3,   m\u00f3dos\u00edt\u00f3 \u00e9s t\u00f6rl\u0151 utas\u00edt\u00e1sok \u00e9s m\u00e9g a lek\u00e9rdez\u0151 utas\u00edt\u00e1sok is:          \u2022INSERT INTO \u2022UPDATE \u2022DELETE FROM \u2022SELECT"},{"location":"java_se_16/#a-legfontosabb-sql-utasitasok","title":"A legfontosabb SQL utas\u00edt\u00e1sok","text":"<ul> <li>SELECT - Adat kinyer\u00e9se az adatb\u00e1zisb\u00f3l</li> <li>UPDATE - Adat friss\u00edt\u00e9se az adatb\u00e1zisban</li> <li>DELETE - Adat kit\u00f6rl\u00e9se az adatb\u00e1zisb\u00f3l</li> <li>INSERT INTO - Adat besz\u00far\u00e1sa az adatb\u00e1zisba</li> <li>CREATE DATABASE - \u00daj adatb\u00e1zis l\u00e9trehoz\u00e1sa</li> <li>ALTER DATABASE - Adatb\u00e1zis m\u00f3dos\u00edt\u00e1sa</li> <li>CREATE TABLE - \u00daj t\u00e1bla l\u00e9trehoz\u00e1sa</li> <li>ALTER TABLE - T\u00e1bla m\u00f3dos\u00edt\u00e1sa</li> <li>DROP TABLE - T\u00e1bla t\u00f6rl\u00e9se</li> </ul>"},{"location":"java_se_16/#jdbc","title":"JDBC","text":"<p>A JDBC (Java Database Connectivity) egy Java API az adatb\u00e1zisokhoz val\u00f3 csatlakoz\u00e1shoz \u00e9s a lek\u00e9rdez\u00e9sek v\u00e9grehajt\u00e1s\u00e1hoz. A JDBC API egy absztrakci\u00f3s r\u00e9teg az alkalmaz\u00e1sunk \u00e9s a k\u00fcl\u00f6nb\u00f6z\u0151 adatb\u00e1zis szolg\u00e1ltat\u00f3k k\u00f6z\u00f6tt. Az adatb\u00e1zis szolg\u00e1ltat\u00f3nak el kell k\u00e9sz\u00edtenie a specifik\u00e1ci\u00f3 alapj\u00e1n a saj\u00e1t JDBC driver-\u00e9t, amin kereszt\u00fcl b\u00e1rmilyen Java alkalmaz\u00e1s k\u00e9pes az adatb\u00e1zissal kommunik\u00e1lni a JDBC protokoll szerint.</p> <p></p> <p>A JDBC API seg\u00edts\u00e9g\u00e9vel a Java alkalmaz\u00e1sunk f\u00fcggetlen az adott adatb\u00e1zist\u00f3l, \u00edgy k\u00f6nnyen tudunk v\u00e1ltani az adatb\u00e1zisok k\u00f6z\u00f6tt. A mi programunk a JDBC \u00e1ltal ny\u00fajtott API-val kommunik\u00e1l, amit a JDBC Driver leford\u00edt az adatb\u00e1zis szolg\u00e1ltat\u00f3 specifikus rendszerre.</p> <p>A JDBC seg\u00edts\u00e9g\u00e9vel nagyon alacsony szint\u0171 hozz\u00e1f\u00e9r\u00e9s\u00fcnk van az adatb\u00e1zishoz, l\u00e9nyeg\u00e9ben SQL utas\u00edt\u00e1sokon kereszt\u00fcl kommunik\u00e1lunk. Az egyes lek\u00e9rdez\u00e9sek ResultSet objektummal t\u00e9rnek vissza, ami megfeleltethet\u0151 az SQL t\u00e1bl\u00e1knak.</p>"},{"location":"java_se_16/#jdbc-driver","title":"JDBC driver","text":"<p>A JDBC driver egy speci\u00e1lis Java oszt\u00e1ly, amely lehet\u0151v\u00e9 teszi a Java alkalmaz\u00e1sok sz\u00e1m\u00e1ra, hogy kommunik\u00e1ljanak egy adott adatb\u00e1zissal. A driver felel\u0151s a kapcsolat fel\u00e9p\u00edt\u00e9s\u00e9\u00e9rt \u00e9s a JDBC m\u0171veletek (pl. lek\u00e9rdez\u00e9sek, friss\u00edt\u00e9sek) v\u00e9grehajt\u00e1s\u00e1\u00e9rt az adatb\u00e1zissal. Az adott adatb\u00e1zis t\u00edpusa meghat\u00e1rozza, hogy melyik JDBC driver-t kell haszn\u00e1lni.</p> <p>A JDBC driver szok\u00e1s szerint egy JAR (Java Archive) f\u00e1jlban tal\u00e1lhat\u00f3, \u00e9s a projekt oszt\u00e1ly\u00fatvonal\u00e1hoz kell hozz\u00e1adni.</p>"},{"location":"java_se_16/#jdbc-hasznalata","title":"JDBC haszn\u00e1lata","text":"<p>El\u0151sz\u00f6r is, biztos\u00edtanod kell, hogy a JDBC driver el\u00e9rhet\u0151 legyen a projektben. P\u00e9ld\u00e1ul, ha MySQL-t haszn\u00e1lsz, t\u00f6ltsd le a MySQL JDBC illeszt\u0151t\u00e1rat, \u00e9s add hozz\u00e1 a projekt oszt\u00e1ly\u00fatvonal\u00e1hoz.</p>"},{"location":"java_se_16/#jdbc-kapcsolat-letrehozasa","title":"JDBC kapcsolat l\u00e9trehoz\u00e1sa","text":"<pre><code>import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\npublic class JDBCDemo {\npublic static void main(String[] args) {\nString url = \"jdbc:mysql://localhost:3306/mydatabase\"; // Adatb\u00e1zis URL\nString user = \"felhasznalonev\"; // Felhaszn\u00e1l\u00f3n\u00e9v\nString password = \"jelszo\"; // Jelsz\u00f3\ntry {\n// Kapcsolat l\u00e9trehoz\u00e1sa az adatb\u00e1zissal\nConnection connection = DriverManager.getConnection(url, user, password);\n// Most m\u00e1r van egy kapcsolat az adatb\u00e1zissal, itt v\u00e9gezheted el a m\u0171veleteidet.\n// Kapcsolat bez\u00e1r\u00e1sa, amikor k\u00e9sz vagy vele\nconnection.close();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre>"},{"location":"java_se_16/#sql-parancs-futtatasa-a-jdbc-api-n-keresztul","title":"SQL parancs futtat\u00e1sa a JDBC API-n kereszt\u00fcl","text":"<pre><code>import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\npublic class JDBCDemo {\npublic static void main(String[] args) {\nString url = \"jdbc:mysql://localhost:3306/mydatabase\";\nString user = \"felhasznalonev\";\nString password = \"jelszo\";\ntry {\nConnection connection = DriverManager.getConnection(url, user, password);\nStatement statement = connection.createStatement();\n// SQL lek\u00e9rdez\u00e9s v\u00e9grehajt\u00e1sa\nString sql = \"SELECT * FROM mytable\";\nResultSet resultSet = statement.executeQuery(sql);\n// Eredm\u00e9ny feldolgoz\u00e1sa\nwhile (resultSet.next()) {\nint id = resultSet.getInt(\"id\");\nString name = resultSet.getString(\"name\");\n// Tov\u00e1bbi adatok feldolgoz\u00e1sa\nSystem.out.println(\"ID: \" + id + \", N\u00e9v: \" + name);\n}\n// Bez\u00e1rjuk a eredm\u00e9nyhalmazt \u00e9s a kapcsolatot\nresultSet.close();\nstatement.close();\nconnection.close();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre>"},{"location":"java_se_16_ex/","title":"Adatb\u00e1ziskezel\u00e9s","text":""},{"location":"java_se_16_ex/#1-feladat","title":"1. Feladat","text":"<p>Hozd 3NF-re az al\u00e1bbi adatb\u00e1zis s\u00e9m\u00e1t!</p> ISBN C\u00edm Szerz\u0151 Kiad\u00f3 Nyelv 978-0062893369 Beyond   the End of the World HarperCollinsan,   Megan   Spooner HarperCollins,   195   Broadway     New   York City, New York, U.S. English 978-1635574074 House   of Sky and Breath (Crescent City) Sarah   J. Maas Bloomsbury   Publishing, London, U.K. English 978-9631197389 R\u00e9ms\u00e9gek   Cirkusza Darren   Shan HarperCollins,   195   Broadway     New   York City, New York, U.S. Magyar"},{"location":"java_se_16_ex/#2-feladat","title":"2. Feladat","text":"<ul> <li>H\u00e1ny darab egyedi Country \u00e9rt\u00e9k van a Customer t\u00e1bl\u00e1ban?</li> <li>T\u00e9rjen vissza az egyedi City \u00e9rt\u00e9kekkel a Customer t\u00e1bl\u00e1b\u00f3l, ahol a Country <code>Brazil</code>.</li> <li>Adja meg a <code>1960-01-01</code> \u00e9s <code>1990-12-31</code> k\u00f6z\u00f6tt sz\u00fcletett alkalmazottak adatait az Employee t\u00e1bl\u00e1b\u00f3l.</li> <li>Adja meg azon besz\u00e1ll\u00edt\u00f3k nev\u00e9t a Supplier t\u00e1bl\u00e1b\u00f3l, akik <code>USA</code>, <code>UK</code> vagy <code>Japan</code> sz\u00e9khely\u0171ek.</li> <li>Adja vissza az 5 legnagyobb Quantitivel rendelkez\u0151 rekordot a OrderDetails t\u00e1bl\u00e1b\u00f3l.</li> <li>T\u00e9rjen vissza egy t\u00e1bl\u00e1val, amiben minden ProductsId tartalmazza, hogy mennyit rendeltek bel\u0151le \u00f6sszesen.</li> <li>Adja meg az 5 legkevesebbet rendelt Products nev\u00e9t \u00e9s hogy mennyit vettek bel\u0151le.</li> <li>Adja meg a 10 legnagyobb \u00f6ssz\u00e9rt\u00e9k\u0171 Order-t. (Quantity * Price)</li> </ul>"},{"location":"java_se_16_ex/#3-feladat","title":"3. Feladat","text":""},{"location":"java_se_16_ex/#zenei-adok","title":"Zenei ad\u00f3k","text":"<p>A r\u00e1di\u00f3hallgat\u00e1s ma m\u00e1r egyre ink\u00e1bb zene vagy h\u00edrek hallgat\u00e1s\u00e1ra korl\u00e1toz\u00f3dik. Ez a feladat h\u00e1rom, folyamatosan zen\u00e9t sug\u00e1rz\u00f3 ad\u00f3r\u00f3l sz\u00f3l, azok egyetlen napi m\u0171sor\u00e1t feldolgozva. A rekl\u00e1m elker\u00fcl\u00e9se \u00e9rdek\u00e9ben az ad\u00f3kat nev\u00fck helyett egyetlen sz\u00e1mmal azonos\u00edtottuk. A musor.txt \u00e1llom\u00e1ny minden sora n\u00e9gy, egym\u00e1st\u00f3l egyetlen sz\u00f3k\u00f6zzel elv\u00e1lasztott adatot tartalmaz: a r\u00e1di\u00f3 sorsz\u00e1m\u00e1t, amit a sz\u00e1m hossza k\u00f6vet k\u00e9t eg\u00e9sz sz\u00e1m (perc \u00e9s m\u00e1sodperc) form\u00e1ban, majd a j\u00e1tszott sz\u00e1m azonos\u00edt\u00f3ja szerepel, ami a sz\u00e1m el\u0151ad\u00f3j\u00e1b\u00f3l \u00e9s c\u00edm\u00e9b\u0151l \u00e1ll. A r\u00e1di\u00f3 sorsz\u00e1ma az 1, 2, 3 sz\u00e1mok egyike. Az ad\u00e1s minden ad\u00f3n 0 \u00f3ra 0 perckor kezd\u0151dik. Egyik sz\u00e1m sem hosszabb 30 percn\u00e9l, teh\u00e1t a perc \u00e9rt\u00e9ke legfeljebb 30, a m\u00e1sodperc pedig legfeljebb 59 lehet. A sz\u00e1m azonos\u00edt\u00f3ja legfeljebb 50 karakter hossz\u00fa, benne legfeljebb egy kett\u0151spont szerepel, ami az el\u0151ad\u00f3 \u00e9s a c\u00edm k\u00f6z\u00f6tt tal\u00e1lhat\u00f3. A sz\u00e1mok az elhangz\u00e1s sorrendj\u00e9ben szerepelnek az \u00e1llom\u00e1nyban, teh\u00e1t a k\u00e9s\u0151bb kezd\u0151d\u0151 sz\u00e1m k\u00e9s\u0151bbi sorban tal\u00e1lhat\u00f3. Az \u00e1llom\u00e1nyban minden zenesz\u00e1m legfeljebb egyszer szerepel.</p> <p>P\u00e9lda:</p> <pre><code>1 5 3 Deep Purple:Bad Attitude\n2 3 36 Eric Clapton:Terraplane Blues\n3 2 46 Eric Clapton:Crazy Country Hop\n3 3 25 Omega:Ablakok\n</code></pre> <p>Olvasd be a musor.txt file-t \u00e9s oldd meg az al\u00e1bbi feladatokat.</p> <ul> <li>K\u00e9sz\u00edts egy Zeneszam oszt\u00e1lyt \u00e9s t\u00e1rold el benne a sz\u00f6veges file-ban t\u00e1rolt sorokat.</li> <li>K\u00e9sz\u00edts egy Radio oszt\u00e1lyt \u00e9s t\u00f6ltsd fel a Zenesz\u00e1m objektumokkal.</li> <li>K\u00e9sz\u00edts egy adatb\u00e1zist amiben elt\u00e1rolod a Zenesz\u00e1m \u00e9s R\u00e1di\u00f3 objektumokat.</li> <li>Az adatb\u00e1zisban tal\u00e1lhat\u00f3 adatok felhaszn\u00e1l\u00e1s\u00e1val oldd meg az al\u00e1bbi feladatokat.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, hogy az adott r\u00e1di\u00f3 h\u00e1ny percni zen\u00e9t j\u00e1tszott aznap.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, hogy az adott r\u00e1di\u00f3 h\u00e1ny darab zen\u00e9t j\u00e1tszott.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, a leghosszabb zenesz\u00e1mmal.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, a legr\u00f6videbb zenesz\u00e1mmal.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami visszat\u00e9r, a legt\u00f6bbet j\u00e1tszott el\u0151ad\u00f3val.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami param\u00e9terben kap egy \u00f3ra \u00e9s perc \u00e9rt\u00e9ket \u00e9s visszat\u00e9r az \u00e9ppen j\u00e1tszott   zenesz\u00e1mmal.</li> <li>K\u00e9sz\u00edts a R\u00e1di\u00f3 oszt\u00e1lyba egy met\u00f3dust ami param\u00e9terben kap egy el\u0151ad\u00f3t \u00e9s visszat\u00e9r az \u00e1ltala j\u00e1tszott sz\u00e1mokkal.</li> </ul>"},{"location":"java_se_16_ex/#4-feladat","title":"4. Feladat","text":"<p>K\u00e9sz\u00edts egy k\u00f6nyv oszt\u00e1lyt az al\u00e1bbi attrib\u00fatumokkal:</p> <ul> <li>Book: Egy k\u00f6nyvet reprezent\u00e1l a k\u00f6nyvt\u00e1rban.<ul> <li>String isbn - A k\u00f6nyv ISBN k\u00f3dja. Egyedinek kell lennie.</li> <li>String title - A k\u00f6nyv c\u00edme.</li> <li>String author - A k\u00f6nyv szerz\u0151je.</li> <li>String genre - A k\u00f6nyv m\u0171faja.</li> <li>boolean available - El\u00e9rhet\u0151-e a k\u00f6nyv.</li> </ul> </li> </ul> <p>Olvasd be az al\u00e1bbi books.csv f\u00e1jlt \u00e9s k\u00e9sz\u00edts egy adatb\u00e1zist az adatok t\u00e1rol\u00e1s\u00e1ra.</p> <p>Adatb\u00e1zis lek\u00e9rdez\u00e9sek seg\u00edts\u00e9g\u00e9vel oldd meg az al\u00e1bbi feladatokat:</p> <ul> <li>K\u00e9sz\u00edts egy met\u00f3dust ami az \u00edr\u00f3k list\u00e1j\u00e1val t\u00e9r vissza, minden \u00edr\u00f3 csak egyszer szerepelhet benne.</li> <li>K\u00e9sz\u00edts egy met\u00f3dust ami egy ISBN k\u00f3d alapj\u00e1n visszat\u00e9r az adott k\u00f6nyvvel.</li> <li>K\u00e9sz\u00edts egy met\u00f3dust ami egy \u00edr\u00f3 alapj\u00e1n visszaadja az \u00e1ltala \u00edrt k\u00f6nyveket.</li> <li>K\u00e9sz\u00edts egy met\u00f3dust ami kilist\u00e1zza az el\u00e9rhet\u0151 k\u00f6nyvelet.</li> </ul>"},{"location":"java_se_17/","title":"Unit tesztel\u00e9s","text":""},{"location":"java_se_17/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Az egys\u00e9gtesztel\u00e9s (Unit Testing) a szoftvertervez\u00e9s egy olyan folyamata, amelyben az egyes forr\u00e1sk\u00f3d egys\u00e9geket ( \u00e1ltal\u00e1ban f\u00fcggv\u00e9nyeket vagy met\u00f3dusokat) k\u00fcl\u00f6n-k\u00fcl\u00f6n tesztelj\u00fck, hogy ellen\u0151rizz\u00fck, hogy megfelel\u0151en m\u0171k\u00f6dnek-e az elv\u00e1rt bemenetek \u00e9s kimenetek eset\u00e9n. Az egys\u00e9gtesztek seg\u00edtenek meger\u0151s\u00edteni, hogy az adott egys\u00e9gek m\u0171k\u00f6d\u00e9se helyes \u00e9s v\u00e1rt m\u00f3don t\u00f6rt\u00e9nik, \u00edgy hozz\u00e1j\u00e1rulnak a k\u00f3d min\u0151s\u00e9g\u00e9nek jav\u00edt\u00e1s\u00e1hoz, valamint a fejleszt\u00e9si id\u0151 \u00e9s k\u00f6lts\u00e9g cs\u00f6kkent\u00e9s\u00e9hez az\u00e1ltal, hogy korai szakaszban azonos\u00edtj\u00e1k \u00e9s kijav\u00edtj\u00e1k a hib\u00e1kat. Ebben a szekci\u00f3ban a tesztel\u00e9ssel \u00e9s azon bel\u00fcl is a Unit tesztel\u00e9ssel fogunk megismerkedni.</p>"},{"location":"java_se_17/#teszteles","title":"Tesztel\u00e9s","text":"<p>A szoftvertesztel\u00e9s a szoftvermin\u0151s\u00e9g-biztos\u00edt\u00e1s \u00e9s \u00edgy a szoftverfejleszt\u00e9s r\u00e9sz\u00e9t k\u00e9pezi. A tesztel\u00e9s egy rendszer vagy program kontroll\u00e1lt k\u00f6r\u00fclm\u00e9nyek melletti futtat\u00e1sa, \u00e9s az eredm\u00e9nyek ki\u00e9rt\u00e9kel\u00e9se. A hagyom\u00e1nyos megk\u00f6zel\u00edt\u00e9s szerint a tesztel\u00e9s c\u00e9lja az, hogy a fejleszt\u00e9s sor\u00e1n l\u00e9trej\u00f6v\u0151 hib\u00e1kat min\u00e9l kor\u00e1bban felfedezze, \u00e9s ezzel cs\u00f6kkentse azok kijav\u00edt\u00e1s\u00e1nak k\u00f6lts\u00e9geit.</p>"},{"location":"java_se_17/#tesztelesi-piramis","title":"Tesztel\u00e9si piramis","text":"<p> Tesztel\u00e9si piramis</p>"},{"location":"java_se_17/#tesztelesi-szintek","title":"Tesztel\u00e9si szintek","text":""},{"location":"java_se_17/#unit-tesztek","title":"Unit tesztek","text":"<ul> <li>A Unit tesztel\u00e9s a szoftvertesztel\u00e9si piramis alapj\u00e1t k\u00e9pezik.</li> <li>C\u00e9ljuk a megl\u00e9v\u0151 forr\u00e1sk\u00f3d kis egys\u00e9geinek tesztel\u00e9se b\u00e1rmilyen k\u00fcls\u0151 f\u00fcgg\u0151s\u00e9g n\u00e9lk\u00fcl.</li> <li>Minden szoftverfejleszt\u0151 feladata, a saj\u00e1t forr\u00e1sk\u00f3dj\u00e1nak a Unit tesztel\u00e9se, hogy az esetleges hib\u00e1k min\u00e9l el\u0151bb   felt\u0171njenek.</li> <li>JUnit keretrendszer</li> </ul>"},{"location":"java_se_17/#komponens-tesztek","title":"Komponens tesztek","text":"<ul> <li>A szoftvertesztel\u00e9si piramis k\u00f6vetkez\u0151 szintje, itt m\u00e1r nem csak apr\u00f3 k\u00f3dr\u00e9szleteket vizsg\u00e1lunk, hanem azt is, hogy az   egyes komponenseink, hogyan m\u0171k\u00f6dnek egy\u00fctt az alkalmaz\u00e1son bel\u00fcl.</li> <li>A k\u00fcl\u00f6nb\u00f6z\u0151 up- \u00e9s down-stream h\u00edv\u00e1sokat mockolhatjuk.</li> <li>Ezt is a szoftverfejleszt\u0151 v\u00e9gzi.</li> </ul>"},{"location":"java_se_17/#integracios-tesztek","title":"Integr\u00e1ci\u00f3s tesztek","text":"<ul> <li>Nagyon hasonl\u00f3 a Component testinghez, csak az alkalmaz\u00e1st nagyobb k\u00f6rben vizsg\u00e1lja, kevesebb mockolt h\u00edv\u00e1s, t\u00f6bb   t\u00e9nyleges modul m\u0171k\u00f6dik egy\u00fctt.</li> <li>Egyes piramisok nem k\u00fcl\u00f6nb\u00f6ztetik meg a component \u00e9s integration testinget, \u00edgy neh\u00e9z behat\u00e1rolni, hol helyezkedik el   a hat\u00e1r a kett\u0151 k\u00f6z\u00f6tt.</li> <li>Egy j\u00f3 architekt\u00far\u00e1ban lehet\u0151s\u00e9get kell adni, hogy az alkalmaz\u00e1s b\u00e1rmekkora szelet\u00e9t k\u00fcl\u00f6n lehessen tesztelni a t\u00f6bbi   modul n\u00e9lk\u00fcl is \u00e9s a tesztjeinknek is fokozatosan kell egyre nagyobb r\u00e9szeit vizsg\u00e1lniuk az alkalmaz\u00e1snak.</li> </ul>"},{"location":"java_se_17/#ui-es-api-tesztek","title":"UI \u00e9s API tesztek","text":"<ul> <li>Az alkalmaz\u00e1st teljes eg\u00e9sz\u00e9ben teszteli az \u00e1ltala ny\u00fajtott interfacen vagy fel\u00fcleten kereszt\u00fcl.</li> <li>K\u00fcls\u0151 eszk\u00f6z\u00f6kkel t\u00f6rt\u00e9nik az automatiz\u00e1lt tesztek futtat\u00e1sa:<ul> <li>Selenium</li> <li>Gatling</li> </ul> </li> <li>\u00c1ltal\u00e1ban ez m\u00e1r a QA feladatk\u00f6r.</li> </ul>"},{"location":"java_se_17/#manualis-tesztek","title":"Manu\u00e1lis tesztek","text":"<ul> <li>A UI \u00e9s API tesztel\u00e9shez hasonl\u00f3an ez is E2E (v\u00e9gpontt\u00f3l v\u00e9gpontig) tesztel\u00e9si forma. A nev\u00e9b\u0151l is ad\u00f3dik,   ezt k\u00e9zzel v\u00e9gzik, tesztel\u00e9si dokument\u00e1ci\u00f3 k\u00e9sz\u00fcl a tesztel\u00e9s kimenetel\u00e9r\u0151l.</li> <li>Mivel nem automatiz\u00e1lt tesztel\u00e9sr\u0151l van sz\u00f3 ez a legk\u00f6lts\u00e9gesebb tesztel\u00e9si forma.</li> <li>QA szerepk\u00f6ri feladat.</li> </ul>"},{"location":"java_se_17/#junit","title":"JUnit","text":"<p>A JUnit egy Java nyelvhez \u00edrt ny\u00edlt forr\u00e1sk\u00f3d\u00fa unit teszt keretrendszer. A JUnit keretrendszer seg\u00edts\u00e9g\u00e9vel k\u00f6nnyed\u00e9n \u00edrhatunk \u00e9s futtathatunk egys\u00e9gteszteket Java alkalmaz\u00e1sokhoz. A JUnit tesztek lehet\u0151v\u00e9 teszik a fejleszt\u0151k sz\u00e1m\u00e1ra, hogy automatiz\u00e1lt m\u00f3don ellen\u0151rizz\u00e9k az egyes met\u00f3dusok vagy oszt\u00e1lyok funkcionalit\u00e1s\u00e1t, \u00edgy megk\u00f6nny\u00edtik a hib\u00e1k felder\u00edt\u00e9s\u00e9t \u00e9s az alkalmaz\u00e1s megb\u00edzhat\u00f3s\u00e1g\u00e1nak n\u00f6vel\u00e9s\u00e9t. A JUnit k\u00fcl\u00f6nf\u00e9le annot\u00e1ci\u00f3kat \u00e9s oszt\u00e1lyokat biztos\u00edt a tesztesetek defini\u00e1l\u00e1s\u00e1hoz \u00e9s v\u00e9grehajt\u00e1s\u00e1hoz, valamint lehet\u0151v\u00e9 teszi a tesztek egyszer\u0171s\u00edtett automatiz\u00e1l\u00e1s\u00e1t \u00e9s eredm\u00e9nyeik k\u00f6nny\u0171 \u00e9rtelmez\u00e9s\u00e9t. A JUnit sz\u00e9les k\u00f6rben elterjedt \u00e9s n\u00e9pszer\u0171 a Java k\u00f6z\u00f6ss\u00e9gben, \u00e9s gyakran haszn\u00e1lj\u00e1k a fejleszt\u0151k a k\u00f3d min\u0151s\u00e9g\u00e9nek jav\u00edt\u00e1s\u00e1ra \u00e9s a szoftverhib\u00e1k gyorsabb azonos\u00edt\u00e1s\u00e1ra.</p>"},{"location":"java_se_17/#junit-annotaciok","title":"JUnit annot\u00e1ci\u00f3k","text":"@Test: Az egyes teszteseteket jel\u00f6li meg.<pre><code>@Test\nvoid myTestMethod() {\n// Teszt k\u00f3d\n}\n</code></pre> @DisplayName: Egyedi n\u00e9v adhat\u00f3 a teszteseteknek vagy tesztoszt\u00e1lyoknak, ami seg\u00edti az olvashat\u00f3s\u00e1got.<pre><code>@Test\n@DisplayName(\"My Test\")\nvoid myTestMethod() {\n// Teszt k\u00f3d\n}\n</code></pre> @BeforeEach \u00e9s @AfterEach: Meghat\u00e1rozza a met\u00f3dusokat, amelyeket minden teszteset futtat\u00e1sa el\u0151tt vagy ut\u00e1n le kell futtatni.<pre><code>@BeforeEach\nvoid init() {\n// Inicializ\u00e1ci\u00f3\n}\n@AfterEach\nvoid cleanUp() {\n// Tiszt\u00edt\u00e1s\n}\n</code></pre> @BeforeAll \u00e9s @AfterAll: Meghat\u00e1rozza a met\u00f3dusokat, amelyeket az \u00f6sszes teszteset futtat\u00e1sa el\u0151tt vagy ut\u00e1n kell lefuttatni.<pre><code>@BeforeAll\nstatic void initAll() {\n// Glob\u00e1lis inicializ\u00e1ci\u00f3\n}\n@AfterAll\nstatic void cleanUpAll() {\n// Glob\u00e1lis tiszt\u00edt\u00e1s\n}\n</code></pre> @Disabled: A tesztesetek vagy tesztoszt\u00e1lyok ideiglenes kikapcsol\u00e1s\u00e1ra szolg\u00e1l, hogy ne fussanak le.<pre><code>@Test\n@Disabled(\"Ez a teszteset jelenleg nem futtathat\u00f3.\")\nvoid disabledTest() {\n// Teszt k\u00f3d\n}\n</code></pre>"},{"location":"java_se_17/#assert-osztaly","title":"Assert oszt\u00e1ly","text":"<p>A unit tesztel\u00e9s folyamata sor\u00e1n a feladatunk az, hogy megh\u00edvjuk a tesztelend\u0151 met\u00f3dust bizonyos param\u00e9terekre, majd megbizonyosodjunk arr\u00f3l, hogy a kapott eredm\u00e9nyek az elv\u00e1rt viselked\u00e9snek megfelel\u0151ek. Ehhez \u00fagynevezett <code>asserteket</code> \u00edrunk, amelyek ellen\u0151rzik a k\u00edv\u00e1nt viselked\u00e9st, tulajdons\u00e1got.</p> <p>Az <code>assert</code> met\u00f3dus nem m\u00e1s, mint a JUnitnak egy olyan met\u00f3dusa, amely egy ellen\u0151rz\u00e9st k\u00e9pes megval\u00f3s\u00edtani, \u00e9s abban az esetben, ha az ellen\u0151rz\u00e9s sikertelen, egy <code>AssertionError</code> kiv\u00e9telt dob, ami jelzi, hogy az adott teszt eset ki\u00e9rt\u00e9kel\u00e9se elbukott. Term\u00e9szetesen a programot addig kell jav\u00edtani, illetve a teszteket \u00fajra futtatni, m\u00edg valamennyi teszt hiba n\u00e9lk\u00fcl le nem fut. Amikor egy teszt elbukik, \u00e9s dob egy <code>AssertionError</code> kiv\u00e9telt, akkor a JUnit keretrendszer ezt a hib\u00e1t elkapja, \u00e9s jelzi a programoz\u00f3 fel\u00e9.</p> <p>A k\u00fcl\u00f6nb\u00f6z\u0151 <code>assert</code> met\u00f3dusokat a <code>org.junit.jupiter.api.Assertions</code> package-ben tal\u00e1ljuk:</p> assertEquals(): Ellen\u0151rzi, hogy k\u00e9t \u00e9rt\u00e9k megegyezik-e.<pre><code>assertEquals(expected, actual);\n</code></pre> assertSame(): Ellen\u0151rzi, hogy k\u00e9t objektum azonos-e.<pre><code>assertSame(expected, actual);\n</code></pre> assertTrue() \u00e9s assertFalse(): Ellen\u0151rzi, hogy egy adott felt\u00e9tel igaz vagy hamis.<pre><code>assertTrue(condition);\nassertFalse(condition);\n</code></pre> assertArrayEquals(): Ellen\u0151rzi, hogy k\u00e9t t\u00f6mb azonos-e.<pre><code>assertArrayEquals(expectedArray, resultArray);\n</code></pre> assertNotNull() \u00e9s assertNull(): Ellen\u0151rzi, hogy egy objektum null vagy nem null.<pre><code>assertNotNull(object);\nassertNull(object);\n</code></pre> assertThrows(): Ellen\u0151rzi, hogy a megadott k\u00f3dr\u00e9szlet dob-e egy adott kiv\u00e9telt.<pre><code>assertThrows(ExpectedException.class, () -&gt; {\n// K\u00f3d, amely dobhat egy ExpectedException t\u00edpus\u00fa kiv\u00e9telt\n});\n</code></pre>"},{"location":"java_se_17/#mockito","title":"Mockito","text":"<p>A Mockito egy ny\u00edlt forr\u00e1sk\u00f3d\u00fa Java keretrendszer, amelyet unit tesztek \u00edr\u00e1sakor haszn\u00e1lnak a mock objektumok l\u00e9trehoz\u00e1s\u00e1hoz. A Mockito seg\u00edts\u00e9g\u00e9vel k\u00f6nnyed\u00e9n \u00e9s dinamikusan lehet l\u00e9trehozni \u00e9s konfigur\u00e1lni a mock objektumokat, valamint meghat\u00e1rozni a viselked\u00e9s\u00fcket \u00e9s az elv\u00e1rt v\u00e1laszokat a tesztek sor\u00e1n.</p> <p>A mock objektum olyan objektum, amelyet a tesztel\u00e9s sor\u00e1n haszn\u00e1lnak egy m\u00e1sik objektum szimul\u00e1l\u00e1s\u00e1ra. A mock objektumokat \u00e1ltal\u00e1ban olyan helyzetekben haszn\u00e1lj\u00e1k, amikor egy adott funkci\u00f3 vagy szolg\u00e1ltat\u00e1s f\u00fcgg m\u00e1s oszt\u00e1lyokt\u00f3l vagy komponensekt\u0151l, \u00e9s a tesztel\u0151 csak az aktu\u00e1lis egys\u00e9g tesztel\u00e9s\u00e9re koncentr\u00e1l.</p> <p>A Mockito n\u00e9h\u00e1ny f\u0151 jellemz\u0151je a k\u00f6vetkez\u0151:</p> <ol> <li>Mock objektumok l\u00e9trehoz\u00e1sa: A Mockito lehet\u0151v\u00e9 teszi a mock objektumok egyszer\u0171 l\u00e9trehoz\u00e1s\u00e1t \u00e9s inicializ\u00e1l\u00e1s\u00e1t    a tesztek sor\u00e1n.</li> <li>Viselked\u00e9s konfigur\u00e1l\u00e1sa: A fejleszt\u0151k k\u00f6nnyed\u00e9n konfigur\u00e1lhatj\u00e1k a mock objektumok viselked\u00e9s\u00e9t, \u00e9s    meghat\u00e1rozhatj\u00e1k az elv\u00e1rt v\u00e1laszokat \u00e9s eredm\u00e9nyeket a tesztek sor\u00e1n.</li> <li>Interakci\u00f3 ellen\u0151rz\u00e9se: A Mockito lehet\u0151v\u00e9 teszi az objektumok k\u00f6z\u00f6tti interakci\u00f3k ellen\u0151rz\u00e9s\u00e9t, hogy    megbizonyosodjon arr\u00f3l, hogy a megfelel\u0151 met\u00f3dusok h\u00edvt\u00e1k-e meg a mock objektumokat.</li> <li>Tesztek egyszer\u0171s\u00edt\u00e9se: A Mockito seg\u00edts\u00e9g\u00e9vel egyszer\u0171s\u00edthet\u0151k a tesztek azzal, hogy a val\u00f3s objektumok helyett    k\u00f6nnyen kezelhet\u0151 mock objektumokat haszn\u00e1l.</li> <li>Sz\u00e9les k\u00f6r\u0171 t\u00e1mogat\u00e1s: A Mockito sz\u00e9les k\u00f6r\u0171 t\u00e1mogat\u00e1st k\u00edn\u00e1l a k\u00fcl\u00f6nb\u00f6z\u0151 Java keretrendszerekkel \u00e9s tesztel\u00e9si    keretrendszerekkel val\u00f3 integr\u00e1ci\u00f3hoz.</li> </ol> <p>A Mockito haszn\u00e1lata seg\u00edti a fejleszt\u0151ket abban, hogy hat\u00e9konyan \u00e9s hat\u00e9konyan \u00edrjanak teszteket Java alkalmaz\u00e1saikhoz, \u00e9s k\u00f6nnyed\u00e9n kezelj\u00e9k a mock objektumokat \u00e9s azok viselked\u00e9s\u00e9t a k\u00fcl\u00f6nb\u00f6z\u0151 tesztesetekben. Ez\u00e1ltal a Mockito hozz\u00e1j\u00e1rul a megb\u00edzhat\u00f3 \u00e9s j\u00f3l tesztelt Java alkalmaz\u00e1sok l\u00e9trehoz\u00e1s\u00e1hoz \u00e9s karbantart\u00e1s\u00e1hoz.</p>"},{"location":"java_se_17/#hasznalata","title":"Haszn\u00e1lata","text":"<p>Vegy\u00fck az al\u00e1bbi oszt\u00e1lyt, amely rendel\u00e9seket bonyol\u00edt le.</p> OrderService<pre><code>public class OrderService {\nprivate InventoryService inventoryService;\npublic OrderService(InventoryService inventoryService) {\nthis.inventoryService = inventoryService;\n}\npublic boolean processOrder(String productId, int quantity) {\nint availableQuantity = inventoryService.getAvailableStock(productId);\nif (availableQuantity &gt;= quantity) {\ninventoryService.updateStock(productId, quantity);\nreturn true;\n}\nreturn false;\n}\n}\n</code></pre> InventoryService<pre><code>public interface InventoryService {\nint getAvailableStock(String productId);\nvoid updateStock(String productId, int quantity);\n}\n</code></pre> <p>L\u00e1that\u00f3, hogy a <code>OrderService</code> oszt\u00e1ly tesztel\u00e9s\u00e9hez sz\u00fcks\u00e9g\u00fcnk van egy <code>InventoryService</code> objektumra is, amelyet az oszt\u00e1ly k\u00edv\u00fclr\u0151l kap. Ennek az oszt\u00e1lynak a m\u0171k\u00f6d\u00e9se nem fontos sz\u00e1munkra, amikor mi az <code>OrderService</code> oszt\u00e1lyt szeretn\u00e9nk tesztelni.</p> OrderServiceTest<pre><code>import org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\npublic class OrderServiceTest {\n@Test\npublic void testProcessOrder() {\n// Arrange\nInventoryService inventoryService = mock(InventoryService.class);\nwhen(inventoryService.getAvailableStock(\"ABC\")).thenReturn(10);\nOrderService orderService = new OrderService(inventoryService);\n// Act\nboolean result = orderService.processOrder(\"ABC\", 5);\n// Assert\nassertTrue(result);\nverify(inventoryService, times(1)).getAvailableStock(\"ABC\");\nverify(inventoryService, times(1)).updateStock(\"ABC\", 5);\n}\n}\n</code></pre> <p>Ebben a p\u00e9ld\u00e1ban a <code>mock()</code> met\u00f3dust haszn\u00e1ljuk az <code>InventoryService</code> interf\u00e9sz mock objektum\u00e1nak l\u00e9trehoz\u00e1s\u00e1hoz. A <code>when()</code> <code>.thenReturn()</code> m\u00f3dszereket haszn\u00e1ljuk az elv\u00e1rt \u00e9rt\u00e9k be\u00e1ll\u00edt\u00e1s\u00e1hoz a met\u00f3dus h\u00edv\u00e1sakor. A <code>verify()</code> met\u00f3dust haszn\u00e1ljuk arra, hogy ellen\u0151rizz\u00fck, hogy a megfelel\u0151 met\u00f3dusok megfelel\u0151 param\u00e9terekkel lettek-e megh\u00edvva a tesztel\u00e9s sor\u00e1n.</p>"},{"location":"java_se_17_ex/","title":"Unit tesztel\u00e9s","text":""},{"location":"java_se_17_ex/#1-feladat","title":"1. Feladat","text":"<pre><code>public class Calculator {\npublic int add(int a, int b) {\nreturn a + b;\n}\npublic int subtract(int a, int b) {\nreturn a - b;\n}\npublic int multiply(int a, int b) {\nreturn a * b;\n}\npublic int divide(int a, int b) {\nif (b == 0) {\nthrow new IllegalArgumentException(\"Cannot divide by zero!\");\n}\nreturn a / b;\n}\n}\n</code></pre> <p>K\u00e9sz\u00edts Unit teszteket az al\u00e1bbi oszt\u00e1lyhoz.</p>"},{"location":"java_se_17_ex/#2-feladat","title":"2. Feladat","text":"<pre><code>import java.util.regex.Pattern;\npublic class EmailValidator {\nprivate static final String EMAIL_REGEX =\n\"^[a-zA-Z0-9_+&amp;*-]+(?:\\\\.[a-zA-Z0-9_+&amp;*-]+)*@\" +\n\"(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\nprivate final Pattern pattern;\npublic EmailValidator() {\npattern = Pattern.compile(EMAIL_REGEX);\n}\npublic boolean isValidEmail(String email) {\nreturn pattern.matcher(email).matches();\n}\n}\n</code></pre> <p>K\u00e9sz\u00edts Unit teszteket az al\u00e1bbi oszt\u00e1lyhoz.</p>"},{"location":"java_se_17_ex/#3-feladat","title":"3. feladat","text":"<p>K\u00e9sz\u00edts egy <code>PasswordGenerator</code> oszt\u00e1lyt, aminek jelszavakat kell gener\u00e1lnia.</p> <ul> <li>Az alkalmaz\u00e1s 4 jelsz\u00f3 t\u00edpust t\u00e1mogat:<ul> <li><code>Weak</code> - csak kisbet\u0171k szerepelnek a jelsz\u00f3ban.</li> <li><code>Average</code> - kis \u00e9s nagybet\u0171k is szerepelnek a jelsz\u00f3ban.</li> <li><code>Strong</code> - kis \u00e9s nagybet\u0171k valamint sz\u00e1mok is szerepelnek a jelsz\u00f3ban</li> <li><code>VeryStrong</code> - bet\u0171k, sz\u00e1mok valamint speci\u00e1lis karakterek is szerepelnek a jelsz\u00f3ban.</li> </ul> </li> </ul> <p>Tervezd meg az alkalmaz\u00e1st, amely k\u00e9pes 4 k\u00fcl\u00f6nb\u00f6z\u0151 neh\u00e9zs\u00e9g\u0171 jelsz\u00f3t gener\u00e1lni. A jelszavak hossza \u00e1ll\u00edthat\u00f3 lehessen.</p> <p>K\u00e9sz\u00edts teszteket a <code>PasswordGenerator</code> oszt\u00e1ly met\u00f3dusaihoz.</p>"},{"location":"java_se_17_ex/#4-feladat","title":"4. feladat","text":"<p>Implement\u00e1ld a hi\u00e1nyz\u00f3 met\u00f3dusokat a <code>Utilities</code> oszt\u00e1lyban, majd k\u00e9sz\u00edts egy <code>UtilitiesTest</code> oszt\u00e1lyt, ahol teszteled az elk\u00e9sz\u00fclt met\u00f3dusokat.</p> <pre><code>public class Utilities {\n// Visszater egy Stringgel ami minden n-ik karaktert tartalmazza.\n// Ha a sourceString hossza &lt; n, terjen vissza a sourceString-el.\npublic String everyNthChar(String sourceString, int n) {\n}\n// Eltavolitja az egymas utan szereplo karaktereket, ha tobb mint \n// egyszer szerepelnek egymas utan es csak egyet hagy meg.\n// \"ABBCDEEEF\" -&gt; \"ABCDEF\"\n// \"ABCBDEEF\" -&gt; \"ABCBDEF\"\npublic String removePairs(String source) {\n}\n}\n</code></pre>"},{"location":"java_se_18/","title":"Projektkezel\u0151 keretrendszerek","text":""},{"location":"java_se_18/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A szoftverfejleszt\u00e9si folyamat dinamikus \u00e9s \u00f6sszetett term\u00e9szete sz\u00e1mos kih\u00edv\u00e1st rejt mag\u00e1ban. A modern szoftverfejleszt\u00e9si projektek siker\u00e9nek kulcsa gyakran a hat\u00e9kony \u00e9s megb\u00edzhat\u00f3 projektkezel\u0151 rendszerek haszn\u00e1lat\u00e1ban rejlik. Ezek a rendszerek biztos\u00edtj\u00e1k, hogy a fejleszt\u0151csapatok koherensen \u00e9s hat\u00e9konyan m\u0171k\u00f6djenek, mik\u00f6zben lehet\u0151v\u00e9 teszik a projekt eg\u00e9sz\u00e9nek \u00e1tl\u00e1that\u00f3s\u00e1g\u00e1t \u00e9s karbantarthat\u00f3s\u00e1g\u00e1t.</p>"},{"location":"java_se_18/#cicd","title":"CI/CD","text":"<p>A Continuous Integration (CI) \u00e9s Continuous Deployment/Delivery (CD) rendszerek a szoftverfejleszt\u00e9s alappill\u00e9rei, amelyek lehet\u0151v\u00e9 teszik a fejleszt\u0151k sz\u00e1m\u00e1ra, hogy gyorsan \u00e9s hat\u00e9konyan reag\u00e1ljanak a piaci ig\u00e9nyekre \u00e9s visszajelz\u00e9sekre.</p>"},{"location":"java_se_18/#continuous-integration","title":"Continuous Integration","text":"<p>A Continuous Integration (CI) a szoftverfejleszt\u00e9si folyamat egy alapvet\u0151 r\u00e9sze, amely lehet\u0151v\u00e9 teszi a fejleszt\u0151knek, hogy rendszeresen \u00e9s automatikusan integr\u00e1lj\u00e1k k\u00f3dk\u00f6tegeiket egy k\u00f6zponti k\u00f3db\u00e1zisba. A CI folyamat l\u00e9nyege, hogy a fejleszt\u0151k \u00e1ltal v\u00e9gzett k\u00f3dm\u00f3dos\u00edt\u00e1sokat folyamatosan ellen\u0151rizz\u00e9k \u00e9s integr\u00e1lj\u00e1k a f\u0151 verzi\u00f3kezel\u0151 rendszerbe, ez\u00e1ltal minimaliz\u00e1lva az integr\u00e1ci\u00f3s konfliktusokat \u00e9s hib\u00e1kat.</p> <p>Continuous Integration folyamat l\u00e9p\u00e9sei \u00e1ltal\u00e1ban a k\u00f6vetkez\u0151k:</p> <ol> <li>K\u00f3d\u00edr\u00e1s: A fejleszt\u0151k \u00faj funkci\u00f3kat vagy hibajav\u00edt\u00e1sokat v\u00e9geznek a projekt k\u00f3db\u00e1zis\u00e1ban.</li> <li>Verzi\u00f3kezel\u00e9si rendszerbe t\u00f6rt\u00e9n\u0151 felt\u00f6lt\u00e9s: A fejleszt\u0151k felt\u00f6ltik a k\u00f3dot a verzi\u00f3kezel\u0151 rendszerbe, p\u00e9ld\u00e1ul    Git-be vagy a SVN-be.</li> <li>Automatikus build folyamat: A CI szerver figyeli a verzi\u00f3kezel\u0151 rendszerben t\u00f6rt\u00e9nt v\u00e1ltoztat\u00e1sokat, \u00e9s    automatikusan elind\u00edtja a build folyamatot, amely mag\u00e1ban foglalja a k\u00f3d ford\u00edt\u00e1s\u00e1t \u00e9s a tesztek v\u00e9grehajt\u00e1s\u00e1t.</li> <li>Tesztel\u00e9s: A CI szerver automatikusan v\u00e9grehajtja a k\u00fcl\u00f6nb\u00f6z\u0151 teszteket, mint p\u00e9ld\u00e1ul az egys\u00e9gtesztek vagy az    integr\u00e1ci\u00f3s tesztek, hogy biztos\u00edtsa a k\u00f3d min\u0151s\u00e9g\u00e9t \u00e9s stabilit\u00e1s\u00e1t.</li> <li>Visszajelz\u00e9s: A CI szerver visszajelz\u00e9st ad a fejleszt\u0151knek a build folyamat eredm\u00e9nyeir\u0151l, bele\u00e9rtve a sikeres    vagy sikertelen buildet, valamint a k\u00fcl\u00f6nb\u00f6z\u0151 tesztek eredm\u00e9nyeit.</li> <li>Hib\u00e1k azonos\u00edt\u00e1sa \u00e9s jav\u00edt\u00e1sa: Amennyiben a tesztek hib\u00e1kat tal\u00e1lnak, a fejleszt\u0151k azonnal m\u00f3dos\u00edthatj\u00e1k a k\u00f3dot    \u00e9s \u00fajra k\u00fcldhetik a verzi\u00f3kezel\u0151 rendszerbe.</li> </ol> <p>A Continuous Integration gyakorlat\u00e1nak c\u00e9lja a gyakori \u00e9s automatikus visszajelz\u00e9s biztos\u00edt\u00e1sa a fejleszt\u0151k sz\u00e1m\u00e1ra, lehet\u0151v\u00e9 t\u00e9ve sz\u00e1mukra, hogy gyorsan azonos\u00edts\u00e1k \u00e9s kijav\u00edts\u00e1k a hib\u00e1kat, miel\u0151tt azok a fejleszt\u00e9si folyamat tov\u00e1bbi szakaszaiba jutn\u00e1nak. Ezzel jav\u00edtja a fejleszt\u00e9s sebess\u00e9g\u00e9t \u00e9s min\u0151s\u00e9g\u00e9t, mik\u00f6zben minimaliz\u00e1lja a hib\u00e1k \u00e9s konfliktusok k\u00e9s\u0151bbi felmer\u00fcl\u00e9s\u00e9t a fejleszt\u00e9si \u00e9letciklusban.</p>"},{"location":"java_se_18/#continuous-deploymentdelivery","title":"Continuous Deployment/Delivery","text":"<p>A Continuous Deployment \u00e9s Continuous Delivery olyan folyamatok, amelyek lehet\u0151v\u00e9 teszik a fejleszt\u0151k \u00e9s a fejleszt\u0151csapatok sz\u00e1m\u00e1ra, hogy gyorsan \u00e9s hat\u00e9konyan kiadj\u00e1k \u00e9s sz\u00e1ll\u00edts\u00e1k a szoftverterm\u00e9keket a kiad\u00e1si k\u00f6rnyezetbe.</p> <ul> <li>Continuous Deployment: A Continuous Deployment folyamat sor\u00e1n a k\u00f3d minden sikeres CI build ut\u00e1n automatikusan \u00e9s   azonnal kiad\u00e1sra ker\u00fcl valemilyen k\u00f6rnyezetbe. Ez azt jelenti, hogy minden k\u00f3dm\u00f3dos\u00edt\u00e1s r\u00f6gt\u00f6n el\u00e9rhet\u0151 lesz a   felhaszn\u00e1l\u00f3k sz\u00e1m\u00e1ra. Ez a folyamat k\u00fcl\u00f6n\u00f6sen hasznos agilis fejleszt\u00e9si k\u00f6rnyezetekben, ahol a gyors visszacsatol\u00e1s   \u00e9s a gyors term\u00e9kkiad\u00e1s kulcsfontoss\u00e1g\u00fa.</li> <li>Continuous Delivery: A Continuous Delivery folyamat sor\u00e1n a szoftverterm\u00e9k automatikusan elk\u00e9sz\u00fcl a kiad\u00e1sra,   azonban annak a t\u00e9nyleges kiad\u00e1sa manu\u00e1lisan t\u00f6rt\u00e9nik. Ez lehet\u0151v\u00e9 teszi a fejleszt\u0151k sz\u00e1m\u00e1ra, hogy ellen\u0151rizz\u00e9k \u00e9s   j\u00f3v\u00e1hagyj\u00e1k a term\u00e9k kiad\u00e1s\u00e1t miel\u0151tt az eljut a felhaszn\u00e1l\u00f3khoz. Ez\u00e1ltal a folyamat nagyobb ellen\u0151rz\u00e9st \u00e9s   rugalmass\u00e1got biztos\u00edt a term\u00e9k kiad\u00e1si folyamat\u00e1ban.</li> </ul>"},{"location":"java_se_18/#szoftverfejlesztesi-modszertanok","title":"Szoftverfejleszt\u00e9si m\u00f3dszertanok","text":"<p>A szoftverfejleszt\u00e9si folyamat sor\u00e1n alkalmazott k\u00fcl\u00f6nb\u00f6z\u0151 m\u00f3dszertanok \u00e9s megk\u00f6zel\u00edt\u00e9sek sz\u00e9les sk\u00e1l\u00e1ja lehet\u0151v\u00e9 teszi a fejleszt\u0151k \u00e9s csapatok sz\u00e1m\u00e1ra, hogy hat\u00e9konyan \u00e9s eredm\u00e9nyesen hozzanak l\u00e9tre szoftverterm\u00e9keket. K\u00e9t ilyen meghat\u00e1roz\u00f3 megk\u00f6zel\u00edt\u00e9s a v\u00edzes\u00e9s \u00e9s az agilis szoftverfejleszt\u00e9si m\u00f3dszertan, melyek alapvet\u0151en k\u00fcl\u00f6nb\u00f6znek egym\u00e1st\u00f3l a tervez\u00e9si \u00e9s v\u00e9grehajt\u00e1si folyamatok szempontj\u00e1b\u00f3l.</p>"},{"location":"java_se_18/#vizeseses-szoftverfejlesztesi-modell","title":"V\u00edzes\u00e9ses szoftverfejleszt\u00e9si modell","text":"<p>A v\u00edzes\u00e9ses szoftverfejleszt\u00e9si modell az egyik hagyom\u00e1nyos \u00e9s line\u00e1ris fejleszt\u00e9si m\u00f3dszer, amelyben a fejleszt\u00e9si folyamat szigor\u00faan el\u0151re meghat\u00e1rozott l\u00e9p\u00e9sekre oszlik, \u00e9s egy adott f\u00e1zis befejez\u00e9se ut\u00e1n indul csak el a k\u00f6vetkez\u0151 f\u00e1zis. A folyamat l\u00e9p\u00e9sei \u00e1ltal\u00e1ban a k\u00f6vetkez\u0151k:</p> <ol> <li>K\u00f6vetelm\u00e9nyek meghat\u00e1roz\u00e1sa: A projekt kezdeti f\u00e1zis\u00e1ban a k\u00f6vetelm\u00e9nyeket r\u00e9szletesen meghat\u00e1rozz\u00e1k \u00e9s    dokument\u00e1lj\u00e1k.</li> <li>Tervez\u00e9s: A fejleszt\u0151k terveket k\u00e9sz\u00edtenek a term\u00e9k architekt\u00far\u00e1j\u00e1r\u00f3l \u00e9s a tervez\u00e9si r\u00e9szletekr\u0151l.</li> <li>Implement\u00e1ci\u00f3: Az elk\u00e9sz\u00edtett tervek alapj\u00e1n a fejleszt\u0151k megval\u00f3s\u00edtj\u00e1k a term\u00e9ket.</li> <li>Tesztel\u00e9s: Az elk\u00e9sz\u00fclt term\u00e9ket alaposan tesztelik, hogy ellen\u0151rizz\u00e9k a k\u00f6vetelm\u00e9nyeknek val\u00f3 megfelel\u00e9st.</li> <li>Telep\u00edt\u00e9s: A tesztel\u00e9s ut\u00e1n a term\u00e9ket telep\u00edtik \u00e9s kiadj\u00e1k a felhaszn\u00e1l\u00f3k sz\u00e1m\u00e1ra.</li> </ol> <p>A v\u00edzes\u00e9ses modell er\u0151ss\u00e9ge a szigor\u00fa f\u00e1zisok \u00e9s dokument\u00e1ci\u00f3, amelyek seg\u00edts\u00e9g\u00e9vel a projektek jobban tervezhet\u0151k \u00e9s kezelhet\u0151k. Azonban a modell rugalmatlans\u00e1ga miatt nehezebb reag\u00e1lni a v\u00e1ltoz\u00f3 \u00fcgyf\u00e9lk\u00f6vetelm\u00e9nyekre \u00e9s piaci v\u00e1ltoz\u00e1sokra.</p>"},{"location":"java_se_18/#agilis-szoftverfejlesztesi-modell","title":"Agilis szoftverfejleszt\u00e9si modell","text":"<p>z agilis szoftverfejleszt\u00e9si modell egy rugalmasabb \u00e9s iterat\u00edv megk\u00f6zel\u00edt\u00e9st alkalmaz a fejleszt\u00e9si folyamat sor\u00e1n. Az agilis m\u00f3dszer l\u00e9nyege, hogy az egyes fejleszt\u00e9si ciklusok r\u00f6videbb id\u0151k\u00f6z\u00f6nk\u00e9nt t\u00f6rt\u00e9nnek, \u00e9s a fejleszt\u00e9si csapatok gyorsan alkalmazkodnak az \u00fcgyf\u00e9lvisszajelz\u00e9sek \u00e9s piaci v\u00e1ltoz\u00e1sokhoz.</p> <p>Az agilis fejleszt\u00e9si folyamat l\u00e9p\u00e9sei \u00e1ltal\u00e1ban a k\u00f6vetkez\u0151k:</p> <ol> <li>K\u00f6vetelm\u00e9nyek prioritiz\u00e1l\u00e1sa: A fejleszt\u00e9s kezdet\u00e9n a legfontosabb \u00fcgyf\u00e9lk\u00f6vetelm\u00e9nyeket hat\u00e1rozz\u00e1k meg.</li> <li>Iterat\u00edv fejleszt\u00e9s: A fejleszt\u00e9s kisebb iter\u00e1ci\u00f3kra oszlik, amelyekben a fejleszt\u0151k rendszeresen tesztelik \u00e9s    visszajelz\u00e9seket kapnak.</li> <li>Rugalmas tervez\u00e9s: Az agilis csapatok rugalmasan alkalmazkodnak a v\u00e1ltoz\u00f3 \u00fcgyf\u00e9lk\u00f6vetelm\u00e9nyekhez \u00e9s az \u00faj    visszajelz\u00e9sekhez.</li> <li>Folyamatos tesztel\u00e9s \u00e9s visszajelz\u00e9s: A term\u00e9k fejleszt\u00e9se \u00e9s tesztel\u00e9se p\u00e1rhuzamosan t\u00f6rt\u00e9nik, \u00e9s a    visszajelz\u00e9seket gyorsan be\u00e9p\u00edtik a fejleszt\u00e9sbe.</li> </ol> <p>Az agilis fejleszt\u00e9si modell el\u0151nyei k\u00f6z\u00e9 tartozik a gyors reakci\u00f3k\u00e9pess\u00e9g, a gyors term\u00e9kkiad\u00e1s \u00e9s a rugalmas tervez\u00e9s, amely lehet\u0151v\u00e9 teszi a term\u00e9k folyamatos fejleszt\u00e9s\u00e9t \u00e9s jav\u00edt\u00e1s\u00e1t az \u00fcgyfelek ig\u00e9nyeinek \u00e9s visszajelz\u00e9seinek megfelel\u0151en.</p>"},{"location":"java_se_18/#build-tools","title":"Build Tools","text":"<p>A build tool-ok elengedhetetlenek a hat\u00e9kony \u00e9s j\u00f3l struktur\u00e1lt szoftverfejleszt\u00e9si folyamatokhoz.</p> <ol> <li>Projektstrukt\u00fara kezel\u00e9se: A build tool-ok lehet\u0151v\u00e9 teszik a fejleszt\u0151k sz\u00e1m\u00e1ra a projektstrukt\u00fara k\u00f6nny\u0171 \u00e9s    hat\u00e9kony kezel\u00e9s\u00e9t. A megfelel\u0151 projektstrukt\u00fara \u00e9s a modul\u00e1ris fel\u00e9p\u00edt\u00e9s seg\u00edt a k\u00f3d \u00e1tl\u00e1that\u00f3s\u00e1g\u00e1nak \u00e9s    karbantarthat\u00f3s\u00e1g\u00e1nak n\u00f6vel\u00e9s\u00e9ben.</li> <li>F\u00fcgg\u0151s\u00e9gek kezel\u00e9se: A build tool-ok seg\u00edts\u00e9g\u00e9vel k\u00f6nnyed\u00e9n kezelhet\u0151k \u00e9s verzi\u00f3kezelhet\u0151k a projekt f\u00fcgg\u0151s\u00e9gei,    bele\u00e9rtve a k\u00fcls\u0151 k\u00f6nyvt\u00e1rakat, modulokat \u00e9s m\u00e1s komponenseket. Ez lehet\u0151v\u00e9 teszi a f\u00fcgg\u0151s\u00e9gek hat\u00e9kony kezel\u00e9s\u00e9t \u00e9s    a projekt sz\u00e9les k\u00f6r\u0171 testreszabhat\u00f3s\u00e1g\u00e1t.</li> <li>Build folyamat automatiz\u00e1l\u00e1sa: A build tool-ok automatiz\u00e1lj\u00e1k a build folyamatokat, bele\u00e9rtve a forr\u00e1sk\u00f3d    ford\u00edt\u00e1s\u00e1t, a tesztel\u00e9st, a csomagol\u00e1st \u00e9s a telep\u00edt\u00e9st. Ez\u00e1ltal minimaliz\u00e1lj\u00e1k az emberi beavatkoz\u00e1s sz\u00fcks\u00e9gess\u00e9g\u00e9t,    n\u00f6velik a fejleszt\u00e9s sebess\u00e9g\u00e9t \u00e9s cs\u00f6kkentik a hib\u00e1k lehet\u0151s\u00e9g\u00e9t.</li> <li>Rugalmas konfigur\u00e1ci\u00f3: A build tool-ok rugalmas konfigur\u00e1ci\u00f3s lehet\u0151s\u00e9geket k\u00edn\u00e1lnak a fejleszt\u0151knek, amelyek    lehet\u0151v\u00e9 teszik sz\u00e1mukra, hogy testreszabj\u00e1k a build folyamatokat a projekt ig\u00e9nyeinek \u00e9s k\u00f6vetelm\u00e9nyeinek    megfelel\u0151en. Ez lehet\u0151v\u00e9 teszi a testreszabott \u00e9s optimaliz\u00e1lt build folyamatok l\u00e9trehoz\u00e1s\u00e1t.</li> <li>Build verzi\u00f3kezel\u00e9s: A build tool-ok lehet\u0151v\u00e9 teszik a build verzi\u00f3kezel\u00e9s\u00e9t, ami kulcsfontoss\u00e1g\u00fa a verzi\u00f3k    kezel\u00e9s\u00e9ben \u00e9s az alkalmaz\u00e1sok kiad\u00e1s\u00e1ban. Ez seg\u00edt a stabil \u00e9s megb\u00edzhat\u00f3 kiad\u00e1sok biztos\u00edt\u00e1s\u00e1ban, valamint a k\u00f6nny\u0171    visszal\u00e9p\u00e9sben az el\u0151z\u0151 verzi\u00f3khoz.</li> </ol>"},{"location":"java_se_18/#maven","title":"Maven","text":"<p>A Maven egy hat\u00e9kony \u00e9s j\u00f3l ismert build eszk\u00f6z a Java projektek sz\u00e1m\u00e1ra, amely lehet\u0151v\u00e9 teszi a fejleszt\u0151k sz\u00e1m\u00e1ra a projektstrukt\u00fara egyszer\u0171 kezel\u00e9s\u00e9t \u00e9s a f\u00fcgg\u0151s\u00e9gek hat\u00e9kony kezel\u00e9s\u00e9t. A pom.xml (Project Object Model) f\u00e1jl seg\u00edts\u00e9g\u00e9vel k\u00f6nnyed\u00e9n defini\u00e1lhat\u00f3k a projekt f\u00fcgg\u0151s\u00e9gei, a build folyamat l\u00e9p\u00e9sei, valamint a tesztek \u00e9s az alkalmaz\u00e1sok futtat\u00e1sa.</p>"},{"location":"java_se_18/#gradle","title":"Gradle","text":"<p>A Gradle egy rugalmas \u00e9s testreszabhat\u00f3 build eszk\u00f6z, amelyet a Java \u00e9s m\u00e1s JVM alap\u00fa projektek fejleszt\u00e9s\u00e9hez haszn\u00e1lnak. A Gradle lehet\u0151v\u00e9 teszi a fejleszt\u0151k sz\u00e1m\u00e1ra testreszabott build folyamatok l\u00e9trehoz\u00e1s\u00e1t \u00e9s kezel\u00e9s\u00e9t, valamint a f\u00fcgg\u0151s\u00e9gek hat\u00e9kony menedzsel\u00e9s\u00e9t. A build.gradle f\u00e1jlban defini\u00e1lhat\u00f3k a projekt konfigur\u00e1ci\u00f3s be\u00e1ll\u00edt\u00e1sai \u00e9s a k\u00fcl\u00f6nb\u00f6z\u0151 pluginok integr\u00e1l\u00e1sa.</p>"},{"location":"java_se_18/#ant","title":"Ant","text":"<p>Az Ant egy tov\u00e1bbi n\u00e9pszer\u0171 build eszk\u00f6z, amelyet sz\u00e9les k\u00f6rben haszn\u00e1lnak a Java projektek fejleszt\u00e9s\u00e9ben. Az Ant lehet\u0151v\u00e9 teszi a fejleszt\u0151k sz\u00e1m\u00e1ra a build folyamatok testreszab\u00e1s\u00e1t \u00e9s az automatiz\u00e1lt feladatok hat\u00e9kony kezel\u00e9s\u00e9t. Az XML alap\u00fa build scriptek seg\u00edts\u00e9g\u00e9vel k\u00f6nnyed\u00e9n kezelhet\u0151k a projekt f\u00fcgg\u0151s\u00e9gei \u00e9s a k\u00fcl\u00f6nb\u00f6z\u0151 build l\u00e9p\u00e9sek \u00e9s feladatok.</p> <p></p>"},{"location":"java_se_18/#maven_1","title":"Maven","text":"<p>A Maven egy ny\u00edlt forr\u00e1sk\u00f3d\u00fa build eszk\u00f6z, amelyet sz\u00e9les k\u00f6rben haszn\u00e1lnak a Java projektek fejleszt\u00e9s\u00e9hez \u00e9s menedzsel\u00e9s\u00e9hez. A Maven projekt alapvet\u0151 eleme a POM (Project Object Model), amely XML form\u00e1tumban tartalmazza a projekt le\u00edr\u00e1s\u00e1t, a f\u00fcgg\u0151s\u00e9geket, a build be\u00e1ll\u00edt\u00e1sokat \u00e9s egy\u00e9b konfigur\u00e1ci\u00f3s inform\u00e1ci\u00f3kat. A Maven sz\u00e1mos fontos funkci\u00f3t k\u00edn\u00e1l a szoftverfejleszt\u00e9si folyamatok t\u00e1mogat\u00e1s\u00e1hoz:</p> <ol> <li>Projektstrukt\u00fara kezel\u00e9se: A Maven lehet\u0151v\u00e9 teszi a fejleszt\u0151k sz\u00e1m\u00e1ra a k\u00f6nny\u0171 \u00e9s j\u00f3l struktur\u00e1lt    projektstrukt\u00fara kezel\u00e9s\u00e9t a konzisztens fejleszt\u00e9si folyamatok biztos\u00edt\u00e1sa \u00e9rdek\u00e9ben.</li> <li>F\u00fcgg\u0151s\u00e9gek kezel\u00e9se: A Maven lehet\u0151v\u00e9 teszi a f\u00fcgg\u0151s\u00e9gek egyszer\u0171 kezel\u00e9s\u00e9t \u00e9s menedzsel\u00e9s\u00e9t a POM f\u00e1jlban    defini\u00e1lt f\u00fcgg\u0151s\u00e9gi bejegyz\u00e9sek seg\u00edts\u00e9g\u00e9vel. A f\u00fcgg\u0151s\u00e9gek automatikusan let\u00f6lt\u0151dnek az internetr\u0151l vagy a helyi    t\u00e1rol\u00f3kb\u00f3l.</li> <li>Build folyamat automatiz\u00e1l\u00e1sa: A Maven lehet\u0151v\u00e9 teszi a build folyamatok automatiz\u00e1l\u00e1s\u00e1t a POM f\u00e1jlban defini\u00e1lt    f\u00e1zisok \u00e9s c\u00e9lok seg\u00edts\u00e9g\u00e9vel. A Maven be\u00e9p\u00edtett f\u00e1zisokat biztos\u00edt a projekt ford\u00edt\u00e1s\u00e1hoz, tesztel\u00e9s\u00e9hez,    csomagol\u00e1s\u00e1hoz, telep\u00edt\u00e9s\u00e9hez \u00e9s egy\u00e9b feladatokhoz.</li> <li>Pluginok t\u00e1mogat\u00e1sa: A Maven sz\u00e9les k\u00f6r\u0171 plugin t\u00e1mogat\u00e1st k\u00edn\u00e1l, amely lehet\u0151v\u00e9 teszi a fejleszt\u0151k sz\u00e1m\u00e1ra a    k\u00fcl\u00f6nb\u00f6z\u0151 b\u0151v\u00edtm\u00e9nyek \u00e9s funkci\u00f3k integr\u00e1l\u00e1s\u00e1t a build folyamatokba.</li> <li>Tesztel\u00e9s \u00e9s riportol\u00e1s: A Maven be\u00e9p\u00edtett t\u00e1mogat\u00e1st ny\u00fajt a k\u00fcl\u00f6nb\u00f6z\u0151 tesztek futtat\u00e1s\u00e1hoz \u00e9s a tesztel\u00e9si    riportok gener\u00e1l\u00e1s\u00e1hoz, amelyek seg\u00edtenek az alkalmaz\u00e1sok min\u0151s\u00e9g\u00e9nek \u00e9s stabilit\u00e1s\u00e1nak ellen\u0151rz\u00e9s\u00e9ben.</li> <li>Kiad\u00e1sok kezel\u00e9se: A Maven lehet\u0151v\u00e9 teszi a kiad\u00e1sok \u00e9s verzi\u00f3k hat\u00e9kony kezel\u00e9s\u00e9t, amely seg\u00edt a stabil \u00e9s    megb\u00edzhat\u00f3 alkalmaz\u00e1sok kiad\u00e1s\u00e1ban.</li> </ol> <p>A Maven \u00e1tfog\u00f3 eszk\u00f6zk\u00e9szletet biztos\u00edt a projektstrukt\u00fara kezel\u00e9s\u00e9hez, a f\u00fcgg\u0151s\u00e9gek menedzsel\u00e9s\u00e9hez \u00e9s a hat\u00e9kony build folyamatok automatiz\u00e1l\u00e1s\u00e1hoz Java alap\u00fa projektjeidben. A kiterjedt dokument\u00e1ci\u00f3 \u00e9s a sz\u00e9les k\u00f6rben el\u00e9rhet\u0151 pluginok lehet\u0151v\u00e9 teszik a fejleszt\u0151k sz\u00e1m\u00e1ra, hogy hat\u00e9konyan \u00e9s megb\u00edzhat\u00f3an dolgozzanak a Maven-nel a projektjeik fejleszt\u00e9s\u00e9ben.</p>"},{"location":"java_se_18/#pomxml","title":"POM.XML","text":"<pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n         http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n&lt;groupId&gt;com.example&lt;/groupId&gt;\n&lt;artifactId&gt;my-app&lt;/artifactId&gt;\n&lt;version&gt;1.0.0&lt;/version&gt;\n&lt;packaging&gt;jar&lt;/packaging&gt;\n&lt;name&gt;My App&lt;/name&gt;\n&lt;description&gt;Sample Maven project&lt;/description&gt;\n&lt;properties&gt;\n&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;\n&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;\n&lt;/properties&gt;\n&lt;dependencies&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;junit&lt;/groupId&gt;\n&lt;artifactId&gt;junit&lt;/artifactId&gt;\n&lt;version&gt;4.12&lt;/version&gt;\n&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n&lt;build&gt;\n&lt;plugins&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n&lt;version&gt;3.8.1&lt;/version&gt;\n&lt;configuration&gt;\n&lt;source&gt;1.8&lt;/source&gt;\n&lt;target&gt;1.8&lt;/target&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n&lt;/plugins&gt;\n&lt;/build&gt;\n&lt;/project&gt;\n</code></pre> <ol> <li>modelVersion: A POM model verzi\u00f3ja, amelyet mindig a \"4.0.0\" \u00e9rt\u00e9kre kell \u00e1ll\u00edtani.</li> <li>groupId: A projekt csoport azonos\u00edt\u00f3ja, amely \u00e1ltal\u00e1ban a v\u00e1llalati domain nev\u00e9b\u0151l \u00e9s/vagy a projekt nev\u00e9b\u0151l sz\u00e1rmazik.</li> <li>artifactId: A projekt m\u0171v\u00e9szeti azonos\u00edt\u00f3ja, amely az adott projektet egyedileg azonos\u00edtja a csoporton bel\u00fcl.</li> <li>version: A projekt verzi\u00f3sz\u00e1ma, amely az adott kiad\u00e1st vagy verzi\u00f3t jel\u00f6li.</li> <li>packaging: A projekt csomagol\u00e1si t\u00edpusa, p\u00e9ld\u00e1ul \"jar\", \"war\" vagy \"pom\".</li> <li>name: A projekt neve vagy c\u00edme.</li> <li>description: A projekt r\u00f6vid le\u00edr\u00e1sa vagy c\u00e9lja.</li> <li>properties: A konfigur\u00e1ci\u00f3s tulajdons\u00e1gok, p\u00e9ld\u00e1ul a karakterk\u00f3dol\u00e1s \u00e9s a ford\u00edt\u00e1si c\u00e9lok.</li> <li>dependencies: A projekt f\u00fcgg\u0151s\u00e9gei, amelyek m\u00e1s k\u00fcls\u0151 k\u00f6nyvt\u00e1rak vagy modulok.</li> <li>build: A build folyamat be\u00e1ll\u00edt\u00e1sai \u00e9s pluginjai, p\u00e9ld\u00e1ul a ford\u00edt\u00f3 pluginok \u00e9s konfigur\u00e1ci\u00f3s be\u00e1ll\u00edt\u00e1sok.</li> </ol>"},{"location":"java_se_18/#maven-parancsok","title":"Maven parancsok","text":"Maven projekt l\u00e9trehoz\u00e1sa<pre><code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre> A projekt buildel\u00e9se<pre><code>mvn clean install\n</code></pre> A f\u00fcgg\u0151s\u00e9gek let\u00f6lt\u00e9se<pre><code>mvn dependency:resolve\n</code></pre> A tesztek futtat\u00e1sa<pre><code>mvn test\n</code></pre> A Maven verzi\u00f3j\u00e1nak ellen\u0151rz\u00e9se<pre><code>mvn -v\n</code></pre>"},{"location":"java_se_4_5/","title":"Konzol io","text":""},{"location":"java_se_4_5/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a r\u00f6vid fejezetben a konzol haszn\u00e1lat\u00e1val fogunk megismerkedni. Megtanuljuk, hogyan tudunk felhaszn\u00e1l\u00f3i bemenetet kiolvasni a konzolr\u00f3l \u00e9s hogy hogyan tudunk a konzolra ki\u00edrni az adatokat.</p>"},{"location":"java_se_4_5/#beolvasas-a-konzolrol","title":"Beolvas\u00e1s a konzolr\u00f3l","text":"<p>A konzolr\u00f3l val\u00f3 beolvas\u00e1shoz a <code>Scanner</code> oszt\u00e1lyt fogjuk haszn\u00e1lni, ami a <code>java.util</code> csomagban tal\u00e1lhat\u00f3.</p> <pre><code>Scanner scanner = new Scanner(System.in);\n</code></pre> <p>A beolvas\u00e1shoz l\u00e9tre kell hoznunk egy Scanner p\u00e9ld\u00e1nyt, aminek a konstuktora valamilyen <code>InputStream</code> objektumot v\u00e1r. A Scanner oszt\u00e1lyt f\u00e1ljokb\u00f3l t\u00f6rt\u00e9n\u0151 beolvas\u00e1shoz is haszn\u00e1lhatjuk, azonban egyel\u0151re csak a konzolr\u00f3l val\u00f3 olvas\u00e1ssal ismerked\u00fcnk meg. Ahhoz, hogy a konzolt el\u00e9rj\u00fck param\u00e9ternek a <code>System.in</code>-t adjuk meg, ezzel nyer\u00fcnk hozz\u00e1f\u00e9r\u00e9rt az konzol input streamj\u00e9hez.</p> <pre><code>String line = scanner.nextLine();\n</code></pre> <p>A konzolr\u00f3l val\u00f3 beolvas\u00e1s soronk\u00e9nt t\u00f6rt\u00e9nik, ha \u00edrunk valamit a konzolon az enter le\u00fct\u00e9s\u00e9ig egy sornak sz\u00e1m\u00edt. Egy teljes sor beolvas\u00e1s\u00e1hoz a <code>scanner.nextLine()</code> met\u00f3dust kell megh\u00edvnunk, ami a teljes sorral t\u00e9r vissza String k\u00e9nt.</p> <pre><code>String word = scanner.next(); </code></pre> <p>Lehet\u0151s\u00e9g\u00fcnk van a szavak egym\u00e1s ut\u00e1ni beolvas\u00e1s\u00e1ra is, ehhez a <code>scanner.next()</code> met\u00f3dust haszn\u00e1ljuk, \u00edgy a beolvas\u00e1s csak az els\u0151 elv\u00e1laszt\u00f3 karakterig fogja beolvasni a az inputunkat.</p> <pre><code>int age = scanner.nextInt();\ndouble height = scanner.nextDouble();\n</code></pre> <p>Ha valamilyen numerikus inputra sz\u00e1m\u00edtunk, akkor a Scanner oszt\u00e1ly ebben is seg\u00edts\u00e9get ny\u00fajt. Ha eg\u00e9sz sz\u00e1mot szeretn\u00e9nk beolvasni haszn\u00e1ljuk a <code>scanner.nextInt()</code> met\u00f3dust, lebeg\u0151pontos sz\u00e1mok eset\u00e9n pedig a <code>scanner.nextDouble()</code> lesz a seg\u00edts\u00e9g\u00fcnkre.</p> <pre><code>while (scanner.hasNextInt()) {\nint nmbr = scanner.nextInt();\n//...\n}\n</code></pre> <p>Ha be szeretn\u00e9nk olvasni valamit, de a konzolon nincs ilyen input, akkor hib\u00e1t kapunk \u00e9s a program m\u0171k\u00f6d\u00e9se le\u00e1llhat. A Scanner oszt\u00e1lynak, ez\u00e9rt vannak <code>scanner.hasNext_Prefix()</code> met\u00f3dusai, amik igazzal t\u00e9rnek vissza, ha a konzolr\u00f3l val\u00f3 beolvas\u00e1s lehets\u00e9ges. Az \u00f6sszes beolvas\u00f3 met\u00f3dushoz, van egy megfelel\u0151 ellen\u0151rz\u0151 met\u00f3dus is.</p>"},{"location":"java_se_4_5/#kiiratas-a-konzolra","title":"Ki\u00edrat\u00e1s a konzolra","text":"<p>A konzolra val\u00f3 ki\u00edrat\u00e1shoz a m\u00e1r ismert <code>System.out</code> oszt\u00e1lyt fogjuk haszn\u00e1lni. </p> <pre><code>System.out.println(\"Please enter your name and surname: \");\n</code></pre> <p>A <code>System.out.println</code> met\u00f3dussal teljes sorokat tudunk ki\u00edrni, vagy az \u00fczenet\u00fcnk v\u00e9g\u00e9n egy sort\u00f6r\u00e9s k\u00f6vetkezik.</p> <pre><code>System.out.print(\"Have a good\");\nSystem.out.print(\" one!\");\n</code></pre> <p>Ezzel szemben a <code>System.out.print</code> met\u00f3dus nem tesz sort\u00f6r\u00e9st az \u00fczenet\u00fcnk ut\u00e1n, azok foly\u00f3 sz\u00f6vegk\u00e9nt k\u00f6vetik egym\u00e1st.</p>"},{"location":"java_se_4_5/#gyakorlo-feladatok","title":"Gyakorl\u00f3 feladatok","text":""},{"location":"java_se_4_5/#1-feladat","title":"1. Feladat:","text":"<p>Keresd meg \u00e9s pr\u00f3b\u00e1ld ki az \u00f6sszes beolvas\u00f3 met\u00f3dust!</p>"},{"location":"java_se_4_5/#2-feladat","title":"2. Feladat:","text":"<p>Olvasd be a neved szavank\u00e9nt majd \u00edrd ki sord\u00edtott sorrendben a konzolra.</p>"},{"location":"java_se_4_5/#3-feladat","title":"3. Feladat:","text":"<p>K\u00e9sz\u00edts egy programot, ami beolvas a konzolr\u00f3l sz\u00e1mokat, majd ki\u00edrja ezeknek az \u00e1tlag\u00e1t. A program els\u0151 k\u00f6rben k\u00e9rje be a felhaszn\u00e1l\u00f3t\u00f3l, hogy h\u00e1ny sz\u00e1mot szeretne \u00e1tlagolni. Majd ut\u00e1na a felhaszn\u00e1l\u00f3nak egym\u00e1s ut\u00e1n meg kell adnia az n darab sz\u00e1mot. Ezut\u00e1n a program \u00edrja ki a sz\u00e1mot eg\u00e9sz\u00e9t lebeg\u0151 pontos alakban.</p>"},{"location":"java_se_4_5/#4-feladat","title":"4. Feladat:","text":"<p>\u00cdrj egy sz\u00e1mol\u00f3g\u00e9pet. A program elind\u00edt\u00e1sa ut\u00e1n k\u00e9rdezd meg milyen m\u0171veletet szeretne v\u00e9gezni a felhaszn\u00e1l\u00f3. (+, -, *, /) Ezut\u00e1n k\u00e9rj be k\u00e9t lebeg\u0151pontos sz\u00e1mot \u00e9s v\u00e9gezd el rajtuk a k\u00e9rt m\u0171veletet.</p>"},{"location":"java_se_4_5/#5-feladat","title":"5. Feladat:","text":"<p>\u00cdrj egy sz\u00e1mkital\u00e1l\u00f3s j\u00e1t\u00e9kot. A program gener\u00e1ljon random egy sz\u00e1mot (1-100) k\u00f6z\u00f6tt, majd a felhaszn\u00e1l\u00f3nak eg\u00e9sz sz\u00e1mokat  kell tippelni, am\u00edg el nem tal\u00e1lja a megadott sz\u00e1mot. A program adjon seg\u00edts\u00e9get, hogy a tippelt sz\u00e1m nagyobb vagy kisebb mint a kital\u00e1land\u00f3 sz\u00e1m.</p>"},{"location":"java_se_5/","title":"\u00d6r\u00f6kl\u0151d\u00e9s az objektum orient\u00e1lt programoz\u00e1sban","text":""},{"location":"java_se_5/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a szekci\u00f3ban az objektumorient\u00e1lt programoz\u00e1s egyik legfontosabb eszk\u00f6z\u00e9vel, az \u00f6r\u00f6kl\u0151d\u00e9ssel fogunk megismerkedni. Az \u00f6r\u00f6kl\u0151d\u00e9s seg\u00edts\u00e9g\u00e9vel a programunkban tov\u00e1bb tudjuk cs\u00f6kkenteni a k\u00f3d duplik\u00e1ci\u00f3t ez\u00e1ltal a programunk flexibilisebb, rendezettebb lesz. Az \u00f6r\u00f6kl\u0151d\u00e9s lehet\u0151v\u00e9 teszi sz\u00e1munkra, hogy a megl\u00e9v\u0151 funkcionalit\u00e1st kib\u0151v\u00edts\u00fck, illetve mi magunk is b\u0151v\u00edthet\u0151 k\u00f3dot hozzunk l\u00e9tre, ezzel megalapozva a komplex, modul\u00e1ris rendszerekben val\u00f3 munk\u00e1t</p>"},{"location":"java_se_5/#az-oroklodes-alapjai","title":"Az \u00f6r\u00f6kl\u0151d\u00e9s alapjai","text":"<p>Az \u00f6r\u00f6kl\u0151d\u00e9s az objektum orient\u00e1lt elm\u00e9letben azt jelenti, hogy az oszt\u00e1ly aloszt\u00e1lya lehet egy m\u00e1sik oszt\u00e1lynak. Az aloszt\u00e1ly meg\u00f6r\u00f6kli az sz\u00fcl\u0151 oszt\u00e1ly \u00f6sszes adattagj\u00e1t \u00e9s met\u00f3dus\u00e1t. Az \u00f6r\u00f6kl\u0151d\u00e9s teh\u00e1t t\u00edpus-alt\u00edpus k\u00f6z\u00f6tt van. J\u00e1rm\u00fa -\u00c1llat, \u00c1llat-H\u00e1zi\u00e1llat-Kutya, stb...</p>"},{"location":"java_se_5/#osztalyvaltozok-oroklese","title":"Oszt\u00e1lyv\u00e1ltoz\u00f3k \u00f6r\u00f6kl\u00e9se","text":"<p>A java nyelvben egy oszt\u00e1lynak t\u00f6bb aloszt\u00e1lya is lehet, de minden oszt\u00e1lynak csak egy \u0151soszt\u00e1lya van. Ez az \u00fagynevezett t\u00f6bbsz\u00f6r\u00f6s \u00f6r\u00f6kl\u0151d\u00e9s kik\u00fcsz\u00f6b\u00f6l\u00e9s\u00e9re van. Az \u00f6r\u00f6kl\u0151d\u00e9s felfoghat\u00f3 az \u0151szoszt\u00e1ly kib\u0151v\u00edt\u00e9sek\u00e9nt is, ez\u00e9rt haszn\u00e1lja a java az <code>extends</code> kulcssz\u00f3t az \u00f6r\u00f6kl\u0151d\u00e9s sor\u00e1n.</p> <pre><code>class Szamitogep {\nString gyarto;\nString modell;\nint processzorMagok;\nint memoria;\nint hattertar;\n}\n...\nclass Laptop extends Szamitogep {\nint tomeg;\nint akkumulatorKapacitas;\n}\n</code></pre> <p>A fenti p\u00e9ld\u00e1ban l\u00e9trehozott <code>Laptop</code> a <code>Szamitogep</code> oszt\u00e1lyt b\u0151v\u00edti ki, ami azt jelenti, hogy ebben a p\u00e9ld\u00e1ban, a <code>Szamitogep</code> az \u0151soszt\u00e1ly \u00e9s a <code>Laptop</code> a lesz\u00e1rmazott, vagy gyerek oszt\u00e1ly. A <code>Laptop</code> oszt\u00e1ly meg\u00f6r\u00f6kli, a <code>Szamitogep</code> oszt\u00e1ly \u00f6sszes attrib\u00fatum\u00e1t.</p>"},{"location":"java_se_5/#metodusok-oroklese","title":"Met\u00f3dusok \u00f6r\u00f6kl\u00e9se.","text":"<p>A kib\u0151v\u00edtett oszt\u00e1lyb\u00f3l nem csak oszt\u00e1ly v\u00e1ltoz\u00f3kat, hanem met\u00f3dusokat is \u00f6r\u00f6kl\u00fcnk, teh\u00e1t a lenti p\u00e9ld\u00e1ban, miut\u00e1n hozz\u00e1adtunk egy \u00faj <code>bekapcsol()</code> met\u00f3dust a <code>Szamitogep</code>, az automatikusan \u00f6r\u00f6kl\u0151dik a <code>Laptop</code> oszt\u00e1lyba, ahol azt majd minden p\u00e9ld\u00e1nyon meg lehet h\u00edvni, ugyan \u00fagy, mint ha eleve a <code>Laptop</code> oszt\u00e1lyban lett volna deklar\u00e1lva.</p> <pre><code>class Szamitogep {\n...\nvoid bekapcsol() {\nSystem.out.println(\" Betoltes ... \");\n}\n}\n...\nclass Laptop extends Szamitogep {\n}\n</code></pre>"},{"location":"java_se_5/#tobbszoros-oroklodes","title":"T\u00f6bbsz\u00f6r\u00f6s \u00f6r\u00f6kl\u0151d\u00e9s","text":"<p>Az\u00e9rt, mert egy oszt\u00e1ly egy m\u00e1sik oszt\u00e1ly aloszt\u00e1lya, att\u00f3l m\u00e9g bel\u0151le tov\u00e1bbi aloszt\u00e1lyok is l\u00e9trehozhat\u00f3ak.</p> <pre><code>class Szamitogep {\n...\n}\n...\nclass Laptop extends Szamitogep {\n...\n}\n...\nclass TwoInOne extends Laptop {\n...\n}\n</code></pre> <p>A fenti p\u00e9ld\u00e1ban l\u00e9trehozott <code>Laptop</code> a <code>Szamitogep</code> oszt\u00e1lyt \u00f6r\u00f6kl\u0151, ami azt jelenti, hogy a saj\u00e1t <code>tomeg</code> es <code>akkumulatorKapacitas</code> v\u00e1ltoz\u00f3i mellett \u00f6r\u00f6k\u00f6lte a <code>Szamitogep</code> oszt\u00e1ly \u00f6sszes v\u00e1ltoz\u00f3j\u00e1t is.</p>"},{"location":"java_se_5/#konstruktorok","title":"Konstruktorok","text":"<p>Ha a sz\u00fcl\u0151 oszt\u00e1ly konstruktor\u00e1nak vannak param\u00e9terei, akkor azokat a param\u00e9tereket az aloszt\u00e1lyban ki kell el\u00e9g\u00edteni. Erre a <code>super</code> kulcs sz\u00f3t haszn\u00e1ljuk, aminek seg\u00edts\u00e9g\u00e9vel a sz\u00fcl\u0151 oszt\u00e1ly konstruktor\u00e1t h\u00edvjuk meg. A lenti p\u00e9ld\u00e1ban a <code>Teglalap</code> oszt\u00e1ly konstruktora k\u00e9t param\u00e9tert k\u00e9r (<code>magassag</code>, <code>szelesseg</code>), igy a <code>Negyzet</code> aloszt\u00e1ly konstruktor\u00e1ban k\u00f6telez\u0151 ezt a k\u00e9t \u00e9rteket megadni. Mivel egy n\u00e9gyzet minden oldala egyenl\u0151 hossz\u00fa lesz, a <code>Negyzet</code> konstruktor\u00e1ban csak egy sz\u00e1mot k\u00e9r\u00fcnk be, es azt a sz\u00e1mot adjuk meg a <code>Teglalap</code> konstruktor mindk\u00e9t \u00e9rtek\u00e9nek.</p> <pre><code>class Teglalap {\nint a, b;\nTeglalap(int a, int b) {\nthis.a = a;\nthis.b = b;\n}\n}\n...\nclass Negyzet {\nNegyzet(int a) {\nsuper(a, a);\n}\n}\n</code></pre> <p>A k\u00f6vetkez\u0151 p\u00e9ld\u00e1ban az aloszt\u00e1ly nem kevesebb, hanem t\u00f6bb \u00e9rt\u00e9k\u00e9t k\u00e9r be mint a sz\u00fcl\u0151oszt\u00e1ly.</p> <pre><code>class Jarmu {\nString modell;\nint ev;\nJarmu(String modell, int ev) {\n...\n}\n}\n...\nclass Auto {\nString rendszam;\nint ajtok;\nAuto(String modell, int ev, String rendszam, int ajtok) {\nsuper(gyarto, modell, ev);\nthis.rendszam = rendszam;\nthis.ajtok = ajtok;\n}\n}\n</code></pre>"},{"location":"java_se_5/#hozzaferes-modositok","title":"Hozz\u00e1f\u00e9r\u00e9s m\u00f3dos\u00edt\u00f3k","text":"<p>Az el\u0151z\u0151 feladatsorban mar megismerkedt\u00fcnk k\u00e9t hozz\u00e1f\u00e9r\u00e9s m\u00f3dos\u00edt\u00f3val, a <code>private</code>-tal \u00e9s a \u201d<code>default</code>\u201d-tal. Mivel m\u00e1r tudjuk, mit jelent az, ha egy oszt\u00e1lynak egy m\u00e1sik oszt\u00e1ly aloszt\u00e1lya, igy \u00e9rtelmezhetj\u00fck a m\u00e1sik k\u00e9t hozz\u00e1f\u00e9r\u00e9s m\u00f3dos\u00edt\u00f3t is. A <code>protected</code> es a <code>public</code> kulcsszavakkal a v\u00e1ltoz\u00f3kat es met\u00f3dusokat el\u00e9rhet\u0151v\u00e9 tehetj\u00fck a csomagon k\u00edv\u00fclr\u0151l is, azonban a <code>protected</code> a hozz\u00e1f\u00e9r\u00e9st limit\u00e1lni fogja az oszt\u00e1lyunk aloszt\u00e1lyaira. A <code>private</code> elemek tov\u00e1bbra is az oszt\u00e1lyon bel\u00fcl lesznek csak el\u00e9rhet\u0151k, a csomagon bel\u00fcl lev\u0151 aloszt\u00e1lyok sem f\u00e9rhetnek hozza.</p> Kulcssz\u00f3 Oszt\u00e1lyon bel\u00fcl Csomagon bel\u00fcl b\u00e1rhonnan Csomagon k\u00edv\u00fcl aloszt\u00e1lyb\u00f3l Csomagon k\u00edv\u00fcl b\u00e1rhonnan private Igen Nem Nem Nem (nincs) Igen Igen Nem Nem protected Igen Igen Igen Nem public Igen Igen Igen Igen"},{"location":"java_se_5/#polimorfizmus","title":"Polimorfizmus","text":"<p>A polimorfizmus az objektum orient\u00e1lt programoz\u00e1s alapelveinek egyike, jelent\u00e9s\u00e9 pedig \u201dt\u00f6bb alak\u00fas\u00e1g\u201d. Akkor besz\u00e9l\u00fcnk polimorfizmusr\u00f3l, amikor egy t\u00edpus p\u00e9ld\u00e1nyai t\u00f6bb alakot is felvehetnek. Ennek a legk\u00e9zenfekv\u0151bb p\u00e9ld\u00e1ja az, amikor egy oszt\u00e1ly aloszt\u00e1lyai fel\u00fcl \u00edrjak a sz\u00fcl\u0151 oszt\u00e1ly met\u00f3dusait.</p> <pre><code>class A {\nvoid M() {\nSystem.out.println(\"A \");\n}\n}\n...\nclass B extends A {\nvoid M() {\nSystem.out.println(\"B \");\n}\n}\n...\nclass C extends A {\nvoid M() {\nSystem.out.println(\"C \");\n}\n}\n</code></pre> <p>Ha az <code>A</code> oszt\u00e1lyunkat kib\u0151v\u00edti a <code>B</code> \u00e9s <code>C</code> oszt\u00e1ly, akkor egy <code>A</code> t\u00edpussal deklar\u00e1lt v\u00e1ltoz\u00f3ba <code>B</code> \u00e9s <code>C</code> t\u00edpusokat is elhelyhet\u00fcnk.</p> <pre><code>A a=new A();\nA a2=new B();\nA a3=new C();\n</code></pre> <p>Ez azt jelenti, hogy bar mind a h\u00e1rom v\u00e1ltoz\u00f3nk <code>A</code> t\u00edpus\u00fa, mivel m\u00e1s oszt\u00e1lyok p\u00e9ld\u00e1nyai, az <code>M()</code> met\u00f3dus mind a h\u00e1rom p\u00e9ld\u00e1nyon m\u00e1st fog ki\u00edrni a konzolra.</p>"},{"location":"java_se_5/#override-annotacio","title":"@Override annot\u00e1ci\u00f3","text":"<p>Met\u00f3dusok fel\u00fcl \u00edr\u00e1sakor er\u0151sen aj\u00e1nlott az <code>@Override</code> annot\u00e1ci\u00f3 haszn\u00e1lata, amivel egy\u00e9rtelm\u0171en jelezz\u00fck a Java-nak, hogy a sz\u00fcl oszt\u00e1lyban lev\u0151 met\u00f3dus viselked\u00e9s\u00e9t fogjuk fel\u00fcl \u00edrni, de a ki- es bemeneteit nem. Ha azokat is fel\u00fclij\u00fck, p\u00e9ld\u00e1ul egy \u00faj param\u00e9tert adunk hozza az aloszt\u00e1lyban lev\u0151 met\u00f3dushoz, akkor az nem fogja fel\u00fcl \u00edrni a sz\u00fcl\u0151 oszt\u00e1ly met\u00f3dus\u00e1t, hanem \u00faj met\u00f3dusk\u00e9nt ad\u00f3dik hozza az aloszt\u00e1lyhoz. Egy <code>@Override</code> annot\u00e1ci\u00f3val megjel\u00f6lt met\u00f3dusn\u00e1l ebben az esetben mar futtat\u00e1s el\u00f6tt figyelmeztet\u00e9st fogunk kapni. Ha egy met\u00f3dust az annot\u00e1ci\u00f3 n\u00e9lk\u00fcl \u00edrunk fel\u00fcl, azt kitakar\u00e1snak vagy \u00e1rny\u00e9kol\u00e1snak h\u00edvhatjuk.</p> <pre><code>class C extends A {\n@Override\nvoid M() {\nSystem.out.println(\"C \");\n}\n}\n</code></pre>"},{"location":"java_se_5/#instaceof-operator","title":"Instaceof oper\u00e1tor","text":"<p>Az <code>instanceof</code> operator seg\u00edts\u00e9g\u00e9vel ellen\u0151rizheted, hogy egy v\u00e1ltoz\u00f3 egy bizonyos aloszt\u00e1ly\u00e1hoz tartoz\u00f3 objektumot tartalmaz-e. A lenti p\u00e9ld\u00e1ban az el\u0151z\u0151 <code>A</code>, <code>B</code>, <code>C</code> oszt\u00e1lyokra hivatkozunk.</p> <pre><code>A a=new B();\nif(a instanceof B){\nSystem.out.println(\" Ez egy B objektum\");\n}else if(a instanceof C){\nSystem.out.println(\" Ez egy C objektum\");\n}\n</code></pre> <p>Ha meggy\u0151z\u0151dt\u0151l r\u00f3la, hogy az objektumod egy bizonyos aloszt\u00e1lyhoz tartozik, azt biztons\u00e1gban konvert\u00e1lhatod az alt\u00edpusba, ezzel helyben el\u00e9rhet\u0151v\u00e9 t\u00e9ve az aloszt\u00e1ly saj\u00e1tos met\u00f3dusait, v\u00e1ltoz\u00f3it.</p> <pre><code>class A {\n// ures osztaly\n}\n...\nclass B extends A {\nvoid M() {\nSystem.out.println(\" En  egy B vagyok !\");\n}\n}\n...\nA a=new B();\nif(a instanceof B){\nB b=(B)a;\nb.M();\n}\n</code></pre>"},{"location":"java_se_5/#final-kulcsszo","title":"Final kulcssz\u00f3","text":"<p>Ha meg szeretned akad\u00e1lyozni, hogy az oszt\u00e1lyodnak aloszt\u00e1lyai j\u00f6hessenek l\u00e9tre, vagy egy met\u00f3dusod fel\u00fcl legyen \u00edrva egy aloszt\u00e1lyban, egy oszt\u00e1ly vagy met\u00f3dust ell\u00e1thatsz <code>final</code> kulcssz\u00f3val.</p> <pre><code>final class Szamologep() {\nvoid osszead(int a, int b) {\nreturn a + b;\n}\n}\n</code></pre> <pre><code> class Szamologep() {\nfinal void osszead(int a, int b) {\nreturn a + b;\n}\n}\n</code></pre>"},{"location":"java_se_5/#super-kulcsszo","title":"Super kulcssz\u00f3","text":"<p>A <code>super</code> kulcssz\u00f3 nem csak konstruktorokn\u00e1l haszn\u00e1latos, \u00e1ltal\u00e1noss\u00e1gban az oszt\u00e1ly sz\u00fcl\u0151 oszt\u00e1ly\u00e1ra mutat, a <code>this</code> -nek felel meg. Seg\u00edts\u00e9g\u00e9vel meg tudod h\u00edvni egy fel\u00fcli\u00e9rt met\u00f3dus eredeti verzi\u00f3j\u00e1t a sz\u00fcl\u0151 oszt\u00e1lyban. Az al\u00e1bbi p\u00e9ld\u00e1ban a <code>Zsiraf</code> oszt\u00e1ly ki b\u0151v\u00edti a bemutatkoz\u00e1s\u00e1t azzal, hogy megmondja a magass\u00e1g\u00e1t.</p> <pre><code>class Allat {\nString nev;\nint kor;\nString bemutatkozas() {\nreturn \"A nevem \" + nev + \" es \" + kor + \" eves vagyok \";\n}\n}\n...\nclass Zsiraf {\nint magassag;\n@Override\nString bemutatkozas() {\nreturn super.bemutatkozas() + \" A magassagom \"\n+ magassag + \" meter .\";\n}\n}\n</code></pre>"},{"location":"java_se_5/#object-osztaly","title":"Object oszt\u00e1ly","text":"<p>Ugyan ez sz\u00e1munkra nem l\u00e1that\u00f3, minden oszt\u00e1ly automatikusan ki b\u0151v\u00edti a <code>java.lang.Object oszt\u00e1lyt</code>. Ez az oszt\u00e1ly hierarchia cs\u00facsa, ami meghat\u00e1roz olyan met\u00f3dusokat, amit minden Java objektumnak k\u00f6telez\u0151 tartalmaznia, azonban ezeket az aloszt\u00e1lyokkal fel\u00fcl \u00edrhatjuk. Figyelmesen tanulm\u00e1nyozd az <code>Object</code> oszt\u00e1lyt es keresd meg az oszt\u00e1ly Java dokument\u00e1ci\u00f3j\u00e1t az interneten. Az <code>Object</code> \u0151soszt\u00e1lyb\u00f3l minden \u00e1ltalunk l\u00e9trehozott oszt\u00e1ly \u00f6r\u00f6k\u00f6l met\u00f3dusokat, amiket mi szabadon fel\u00fcl\u00edrhatunk ilyenek p\u00e9ld\u00e1ul a <code>toString()</code> \u00e9s az <code>equals()</code></p>"},{"location":"java_se_5/#tostring-metodus","title":"toString() met\u00f3dus","text":"<p>A <code>toString()</code> met\u00f3dus hat\u00e1rozza meg, hogy egy objektumot hogyan reprezent\u00e1lunk String alakban. Amikor fontos sz\u00e1munkra, hogy egy oszt\u00e1ly p\u00e9ld\u00e1nyait emberek szamara is \u00e9rthet\u0151en jelen\u00edts\u00fcnk meg, olyankor ezt a met\u00f3dust \u00edrjuk fel\u00fcl es String-kent adjuk vissza az objektumunk adatait, vagy b\u00e1rmit, amit a szitu\u00e1ci\u00f3 k\u00edv\u00e1n. Az alapvet\u0151 implement\u00e1ci\u00f3ja ennek a met\u00f3dusnak csak az objektum oszt\u00e1ly\u00e1t \u00e9s hash k\u00f3dj\u00e1t fogja visszaadni, p\u00e9ld\u00e1ul <code>Termek@1fee6fc</code>;</p>"},{"location":"java_se_5/#equals-metodus","title":"equals() met\u00f3dus","text":"<p>Az <code>equals()</code> met\u00f3dus hat\u00e1rozza meg, hogy mi alapj\u00e1n tekintj\u00fck egy oszt\u00e1ly k\u00e9t p\u00e9ld\u00e1ny\u00e1t egyenl\u0151nek. Fontos megjegyezni, hogy ennek a met\u00f3dusnak a fel\u00fcl\u00edr\u00e1sa eseteben k\u00f6telez\u0151 a <code>hashCode()</code> met\u00f3dust is fel\u00fcl\u00edrni, hogy az oszt\u00e1lyod konzisztenszen m\u0171k\u00f6djen hash alap\u00fa adatszerkezetekben, p\u00e9ld\u00e1ul <code>HashMap()</code>. Szerencsere ezt egyszer\u0171en megtehetj\u00fck az <code>Objects.hash()</code> met\u00f3dus haszn\u00e1lat\u00e1val.</p> <pre><code>public class Foglalas {\nString nev;\nint ora;\n@Override\npublic boolean equals(Object o) {\n...\n}\n@Override\npublic int hashCode() {\nreturn Objects.hash(nev, ora);\n}\n}\n</code></pre>"},{"location":"java_se_5/#feladatok","title":"Feladatok","text":""},{"location":"java_se_5/#1-feladat","title":"1. Feladat","text":"<p>Mi t\u00f6rt\u00e9nik, ha</p> <ul> <li>megpr\u00f3b\u00e1lsz egy oszt\u00e1lyb\u00f3l k\u00e9t m\u00e1sik oszt\u00e1lyt ki b\u0151v\u00edteni,</li> <li>megpr\u00f3b\u00e1lod a Math oszt\u00e1lyt kib\u0151v\u00edteni,</li> <li>egy sz\u00fcl\u0151 oszt\u00e1lynak statikus met\u00f3dusai/v\u00e1ltoz\u00f3i vannak,</li> <li>egy aloszt\u00e1lyb\u00f3l nem el\u00e9g\u00edted ki a sz\u00fcl\u0151 oszt\u00e1ly konstruktor\u00e1nak param\u00e9tereit,</li> <li>egy tetsz\u0151leges T t\u00edpus\u00fa t\u00f6mbben T k\u00fcl\u00f6nb\u00f6z\u0151 aloszt\u00e1lyainak objektumait tessz\u00fck,</li> <li>egy tetsz\u0151leges T t\u00edpussal deklar\u00e1lt v\u00e1ltoz\u00f3nak T sz\u00fcl\u0151 oszt\u00e1ly\u00e1nak objektum\u00e1t adjuk \u00e9rtek\u00fcl,</li> <li>egy tetsz\u0151leges T t\u00edpus egyik aloszt\u00e1ly\u00e1val deklar\u00e1lt v\u00e1ltoz\u00f3j\u00e1nak a T oszt\u00e1ly egy m\u00e1sik aloszt\u00e1ly\u00e1nak objektum\u00e1t   adjuk \u00e9rtek\u00fcl,</li> <li>egy aloszt\u00e1lyban l\u00e9trehozott met\u00f3dus vagy oszt\u00e1ly v\u00e1ltoz\u00f3 neve megegyezik a sz\u00fcl\u0151 oszt\u00e1ly egyik met\u00f3dus\u00e1val,</li> <li>egy statikus met\u00f3dust egy nem statikus met\u00f3dussal \u00e1rny\u00e9kolunk vagy ford\u00edtva,</li> <li>k\u00e9t oszt\u00e1ly egym\u00e1st b\u0151v\u00edti ki,</li> <li>egy final kulcs sz\u00f3val megjel\u00f6lt oszt\u00e1lyt vagy met\u00f3dust megpr\u00f3b\u00e1lsz ki b\u0151v\u00edteni vagy fel\u00fcl \u00edrni,</li> <li>egy @Override annot\u00e1ci\u00f3val megjel\u00f6lt met\u00f3dus neve/param\u00e9terei/visszat\u00e9r\u00e9si \u00e9rteke nem egyezik meg a sz\u00fcl\u0151 oszt\u00e1ly   egyik met\u00f3dus\u00e1val sem?</li> </ul>"},{"location":"java_se_5/#2-feladat","title":"2. Feladat","text":"<p>Hozz l\u00e9tre egy tetsz\u0151leges oszt\u00e1lyt \u00e9s implement\u00e1ld a <code>toString()</code> \u00e9s <code>equals()</code> met\u00f3dust.</p>"},{"location":"java_se_5/#3-feladat","title":"3. Feladat","text":"<p>A k\u00f6vetkez\u0151 feladatokban a lenti <code>Termek</code> osztallyal fogunk dolgozni.</p> <pre><code>class Termek {\nprivate static int kovetkezoAzonosito = 100000;\nprivate int azonosito;\nprivate String megnevezes;\nprivate int ar;\npublic Termek(String megnevezes, int ar) {\nthis.azonosito = kovetkezoAzonosito++;\nthis.megnevezes = megnevezes;\nthis.ar = ar;\n}\npublic int getAzonosito() {\nreturn azonosito;\n}\npublic String getMegnevezes() {\nreturn megnevezes;\n}\npublic int getAr() {\nreturn ar;\n}\n}\n</code></pre>"},{"location":"java_se_5/#31-feladat","title":"3.1. Feladat","text":"<p>K\u00e9sz\u00edts a <code>Termek</code> oszt\u00e1lynak egy <code>Laptop</code> aloszt\u00e1lyt. Minden laptopr\u00f3l el szeretn\u00e9nk t\u00e1rolni a processzor t\u00edpus\u00e1t \u00e9s a k\u00e9p\u00e1tl\u00f3 hossz\u00e1t. A <code>Laptop</code> aloszt\u00e1ly a sz\u00fcl\u0151oszt\u00e1lya mint\u00e1j\u00e1ra k\u00e9sz\u00fclj\u00f6n, a v\u00e1ltozok hozz\u00e1f\u00e9rhet\u0151s\u00e9g\u00e9, az oszt\u00e1ly mut\u00e1lhat\u00f3s\u00e1ga, konstruktora stb. egyezzen meg vele.</p>"},{"location":"java_se_5/#32-feladat","title":"3.2. Feladat","text":"<p>K\u00e9sz\u00edts a <code>Termek</code> oszt\u00e1lynak egy <code>Kamera</code> aloszt\u00e1lyt. Minden kamer\u00e1r\u00f3l el szeretn\u00e9nk t\u00e1rolni a felbont\u00e1st megapixelben. A <code>Kamera</code> aloszt\u00e1ly a sz\u00fcl\u0151oszt\u00e1lya mint\u00e1j\u00e1ra k\u00e9sz\u00fclj\u00f6n, a v\u00e1ltozok hozz\u00e1f\u00e9rhet\u0151s\u00e9g\u00e9, az oszt\u00e1ly mut\u00e1lhat\u00f3s\u00e1ga, konstruktora stb. egyezzen meg vele.</p>"},{"location":"java_se_5/#33-feladat","title":"3.3. Feladat","text":"<p>K\u00e9sz\u00edts a <code>Termek</code> oszt\u00e1lyba egy <code>toString()</code> met\u00f3dust, amely a k\u00f6vetkez\u0151 form\u00e1tum\u00fa String-ben adja vissza a term\u00e9k adatait.</p> <pre><code>100014 BananaBook Pro 12 226000 Ft\n</code></pre>"},{"location":"java_se_5/#34-feladat","title":"3.4. Feladat","text":"<p>Egy <code>Termek</code> t\u00edpus\u00fa t\u00f6mbbe helyezz vegyesen <code>Laptop</code> \u00e9s <code>Kamera</code> p\u00e9ld\u00e1nyokat, majd h\u00edvd meg mindegyiken a <code>toString()</code> met\u00f3dust egy ciklus seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>100000 BananaBook Pro 12 226000 Ft\n100001 BananaBook Pro 15 265000 Ft\n100002 Canikon D6000D 120000 Ft\n100003 Canikon D6500D 165000 Ft\n</code></pre>"},{"location":"java_se_5/#35-feladat","title":"3.5. Feladat","text":"<p>Az <code>instanceof</code> oper\u00e1torral m\u00f3dos\u00edtsd a ciklust \u00fagy, hogy csak a <code>Laptop</code> oszt\u00e1ly p\u00e9ld\u00e1nyait jelen\u00edtse meg.</p>"},{"location":"java_se_5/#36-feladat","title":"3.6. Feladat","text":"<p>Az <code>instanceof</code> oper\u00e1torral m\u00f3dos\u00edtsd a ciklust \u00fagy, hogy minden term\u00e9khez oda \u00edrja, hogy melyik kateg\u00f3ri\u00e1ba esik.</p> <pre><code>100000 BananaBook Pro 12 226000 Ft Laptop\n100001 BananaBook Pro 15 265000 Ft Laptop\n100002 Canikon D6000D 120000 Ft Kamera\n100003 Canikon D6500D 165000 Ft Kamera\n</code></pre>"},{"location":"java_se_5/#37-feladat","title":"3.7. Feladat","text":"<p>\u00cdrd fel\u00fcl a Laptop \u00e9s Kamera oszt\u00e1ly toString() met\u00f3dusait \u00fagy, hogy a ciklusod az al\u00e1bbi eredm\u00e9nyt produk\u00e1lja.</p> <pre><code>100000 BananaBook Pro 12 226000 Ft i5 6700K, 30 cm Laptop\n100001 BananaBook Pro 15 265000 Ft amd 6300X, 24 cm Laptop\n100002 Canikon D6000D 120000 Ft 24 MP cm Kamera\n100003 Canikon D6500D 165000 Ft 36 MP Kamera\n</code></pre>"},{"location":"java_se_5/#38-feladat","title":"3.8. Feladat","text":"<p>M\u00f3dos\u00edtsd \u00fagy a <code>Termek</code> oszt\u00e1lyt, hogy az <code>equals()</code> met\u00f3dus k\u00e9t p\u00e9ld\u00e1ny\u00e1t akkor tekintse egyenl\u0151nek, ha az azonos\u00edt\u00f3ik megegyeznek.</p>"},{"location":"java_se_5_5/","title":"Java Enum t\u00edpus","text":""},{"location":"java_se_5_5/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Az <code>ENUM</code> kulcssz\u00f3 a Java 5-s verzi\u00f3j\u00e1ban ker\u00fclt bevezet\u00e9sre. Ez egy speci\u00e1lis oszt\u00e1lyt\u00edpust jel\u00f6l, amely mindig kiterjeszti a <code>java.lang.Enum</code> oszt\u00e1lyt. Az enum t\u00edpus (magyarul felsorol\u00e1s t\u00edpus) egy speci\u00e1lis adatt\u00edpus, amely lehet\u0151v\u00e9 teszi, hogy egy v\u00e1ltoz\u00f3 el\u0151re meghat\u00e1rozott \u00e1lland\u00f3k halmaz\u00e1b\u00f3l kaphasson csak \u00e9rt\u00e9ket. A v\u00e1ltoz\u00f3nak meg kell egyeznie a sz\u00e1m\u00e1ra el\u0151re meghat\u00e1rozott \u00e9rt\u00e9kek egyik\u00e9vel.</p> <p>A gyakori p\u00e9ld\u00e1k az enum-ok haszn\u00e1lat\u00e1ra p\u00e9ld\u00e1ul az \u00e9gt\u00e1jak elt\u00e1rol\u00e1sa (<code>NORTH</code>, <code>SOUTH</code>, <code>EAST</code>, <code>WEST</code>) vagy a h\u00e9t napjai.</p> <p>Mivel az \u00e9rt\u00e9kek konstansok, ez\u00e9rt az enum \u00e9rt\u00e9keket nagybet\u0171vel \u00edrjuk.</p>"},{"location":"java_se_5_5/#enumok-hasznalata","title":"Enumok haszn\u00e1lata","text":"<p>A Java nyelvben az <code>enum</code> kulcssz\u00f3 haszn\u00e1lat\u00e1val hat\u00e1rozhatunk meg egy enum t\u00edpust. P\u00e9ld\u00e1ul a h\u00e9t napjainak enum t\u00edpus\u00e1t a k\u00f6vetkez\u0151k\u00e9ppen adhatjuk meg:</p> <pre><code>public enum Day {\nSUNDAY, MONDAY, TUESDAY, WEDNESDAY,\nTHURSDAY, FRIDAY, SATURDAY\n}\n</code></pre> <p>Az enum t\u00edpust, akkor haszn\u00e1ljuk, ha a t\u00edpus amit reprezent\u00e1lni szeretn\u00e9nk egy el\u0151re meghat\u00e1rozott halmaz \u00e9rt\u00e9kei. Ilyen lehet p\u00e9ld\u00e1ul a val\u00f3s\u00e1gban is el\u0151fordul\u00f3 halmaz p\u00e9ld\u00e1ul a naprendszer\u00fcnk bolyg\u00f3i, vagy elvont fogalmak z\u00e1rt halmaza, p\u00e9ld\u00e1ul egy rendel\u00e9s aktu\u00e1lis f\u00e1zisa.</p> <p>Az \u00edgy defini\u00e1lt konstansok olvashat\u00f3bb\u00e1 teszik a k\u00f3dot, lehet\u0151v\u00e9 teszik a ford\u00edt\u00e1si id\u0151ben t\u00f6rt\u00e9n\u0151 ellen\u0151rz\u00e9st, el\u0151re dokument\u00e1lj\u00e1k az elfogadott \u00e9rt\u00e9kek list\u00e1j\u00e1t, \u00e9s elker\u00fclik az \u00e9rv\u00e9nytelen \u00e9rt\u00e9kek \u00e1tad\u00e1sa miatti v\u00e1ratlan viselked\u00e9st.</p> <p>A Java nyelv enum t\u00edpusai elt\u00e9rnek a m\u00e1s nyelvekben megszokott enum t\u00edpusokt\u00f3l. Mivel minden enum t\u00edpus a <code>java.lang.Enum</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik, ez\u00e9rt vannak el\u0151re defini\u00e1lt met\u00f3dusaink \u00e9s adattagjaink, amiket az <code>Enum</code> oszt\u00e1lyt\u00f3l \u00f6r\u00f6kl\u00fcnk. Ilyen \u00f6r\u00f6k\u00f6lt met\u00f3dus p\u00e9ld\u00e1ul a statikus <code>values()</code> met\u00f3dus, ami az enum lehets\u00e9ges \u00e9rt\u00e9keinek list\u00e1j\u00e1val t\u00e9r vissza.</p> <pre><code>public class Main {\npublic enum Day {\nSUNDAY, MONDAY, TUESDAY, WEDNESDAY,\nTHURSDAY, FRIDAY, SATURDAY\n}\npublic static void main(String[] args) {\nfor (Day day : Day.values()) {\nSystem.out.println(day);\n}\n}\n}\n</code></pre> <p>Az enum t\u00edpus \u00e9rt\u00e9kei l\u00e9nyeg\u00e9ben az enum oszt\u00e1lyunk objektumai. Az enum oszt\u00e1lyunk is rendelkezhet adattagokkal \u00e9s met\u00f3dusokkal amiket k\u00fcl\u00f6nb\u00f6z\u0151 \u00e9rt\u00e9kekkel inicializ\u00e1lhatunk az objektumok k\u00e9sz\u00edt\u00e9sre sor\u00e1n.</p> <p>N\u00e9zz\u00fck a k\u00f6vetkez\u0151 p\u00e9ld\u00e1t, amiben a <code>Planet</code> enumot hozzuk l\u00e9tre, ami a naprendszer\u00fcnk bolyg\u00f3it fogja t\u00e1rolni.</p> <pre><code>public enum Planet {\nMERCURY(3.303e+23, 2.4397e6),\nVENUS(4.869e+24, 6.0518e6),\nEARTH(5.976e+24, 6.37814e6),\nMARS(6.421e+23, 3.3972e6),\nJUPITER(1.9e+27, 7.1492e7),\nSATURN(5.688e+26, 6.0268e7),\nURANUS(8.686e+25, 2.5559e7),\nNEPTUNE(1.024e+26, 2.4746e7);\nprivate final double mass;   // in kilograms\nprivate final double radius; // in meters\nPlanet(double mass, double radius) {\nthis.mass = mass;\nthis.radius = radius;\n}\nprivate double mass() {\nreturn mass;\n}\nprivate double radius() {\nreturn radius;\n}\n// universal gravitational constant  (m3 kg-1 s-2)\npublic static final double G = 6.67300E-11;\ndouble surfaceGravity() {\nreturn G * mass / (radius * radius);\n}\ndouble surfaceWeight(double otherMass) {\nreturn otherMass * surfaceGravity();\n}\n}\n</code></pre> <p>A kor\u00e1bbi p\u00e9ld\u00e1val ellent\u00e9tben itt az enum t\u00edpusunkhoz adattagokat \u00e9s met\u00f3dusokat is defini\u00e1lunk. Mivel az enum csak egy k\u00fcl\u00f6nleges oszt\u00e1ly ezt minden tov\u00e1bbi gond n\u00e9lk\u00fcl megtehetj\u00fck. Minden egyes enum \u00e9rt\u00e9k\u00fcnk mostm\u00e1r elt\u00e1rolja az adott bolyg\u00f3 t\u00f6meg\u00e9t \u00e9s a bolyg\u00f3 sugar\u00e1t \u00e9s a k\u00e9t met\u00f3dus\u00e1n kereszt\u00fcl, minden bolyg\u00f3n kisz\u00e1molhatjuk a fel\u00fcleti gravit\u00e1ci\u00f3t valamint egy t\u00f6meg s\u00faly\u00e1t az adott bolyg\u00f3 felsz\u00edn\u00e9n.</p>"},{"location":"java_se_5_5/#feladatok","title":"Feladatok","text":""},{"location":"java_se_5_5/#1-feladat","title":"1. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>Month</code> enumot ami a h\u00f3napok list\u00e1j\u00e1t t\u00e1rolja el kieg\u00e9sz\u00edtve azzal az inform\u00e1ci\u00f3val, hogy az adott h\u00f3nap h\u00e1ny napos.</p>"},{"location":"java_se_5_5/#2-feladat","title":"2. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>CardSuit</code> enumot a k\u00f6vetkez\u0151 \u00e9rt\u00e9kekkel <code>HEARTS</code>, <code>DIAMONDS</code>, <code>CLUBS</code>, <code>SPADES</code>.</p> <p>K\u00e9sz\u00edts egy <code>Card</code> oszt\u00e1lyt, a k\u00f6vetkez\u0151 adattagokkal. <code>String</code> rank, <code>CardSuit</code> cardSuit. K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, <code>toString</code> \u00e9s <code>getter-setter</code> met\u00f3dusokat.</p> <p>A <code>main</code> f\u00fcggv\u00e9nyedben gener\u00e1lj ki egy 52 lapos paklit az \u00f6sszes lehets\u00e9ges k\u00e1rtyalappal \u00e9s t\u00e1rold el a lapokat egy t\u00f6mbben!</p>"},{"location":"java_se_5_5/#3-feladat","title":"3. Feladat","text":"<p>K\u00e9sz\u00edts egy <code>PizzaSize</code> enumot a k\u00f6vetkez\u0151 \u00e9rt\u00e9kekkel <code>SMALL</code>, <code>MEDIUM</code>, <code>LARGE</code>, <code>EXTRALARGE</code>.</p> <p>K\u00e9sz\u00edts egy <code>Pizza</code> oszt\u00e1lyt, a k\u00f6vetkez\u0151 adattagokkal. <code>String</code> pizzaName, <code>int</code> basePrice, <code>PizzaSize</code> pizzaSize. K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code>, <code>toString</code> \u00e9s <code>getter-setter</code> met\u00f3dusokat. K\u00e9sz\u00edts egy <code>getPrice</code> met\u00f3dust, ami a pizza \u00e1r\u00e1t sz\u00e1molja ki az al\u00e1bbi k\u00e9plet seg\u00edts\u00e9g\u00e9vel.</p> <p>A pizza \u00e1ra a basePrice * pizza m\u00e9ret\u00e9vel.</p> <ul> <li>1 - <code>SMALL</code></li> <li>1.25 - <code>MEDIUM</code></li> <li>1.5 - <code>LARGE</code></li> <li>2 - <code>EXTRALARGE</code></li> </ul> <p>Vagyis egy <code>LARGE</code> pizza, aminek az alap \u00e1ra 1000 volt, 1500-ba ker\u00fcl.</p>"},{"location":"java_se_6/","title":"Hibakezel\u00e9s","text":""},{"location":"java_se_6/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a feladatsorban megismerj\u00fck, milyen hib\u00e1kkal tal\u00e1lkozhatunk a programoz\u00e1s sor\u00e1n a Java nyelvben \u00e9s milyen lehet\u0151s\u00e9geink vannak a hib\u00e1k kezel\u00e9s\u00e9re.</p>"},{"location":"java_se_6/#attekintes","title":"\u00c1ttekint\u00e9s","text":"<p>A t\u00f6rt\u00e9net szerint 1947. szeptember 9-\u00e9n Grace Hopper informatikus egy lepk\u00e9t tal\u00e1lt a Harvard Mark II-es sz\u00e1m\u00edt\u00f3g\u00e9p napl\u00f3j\u00e1ban \u00e9s jelentette a vil\u00e1g els\u0151 \u201ebug\u201d-j\u00e1t. Szoftverfejleszt\u00e9s sor\u00e1n id\u0151nk t\u00falnyom\u00f3 r\u00e9sz\u00e9t hib\u00e1t keres\u00e9s\u00e9vel t\u00f6ltj\u00fck egyes becsl\u00e9sek szerint t\u00f6bb mint a 75%-\u00e1t, ez\u00e9rt a hib\u00e1k gyors megtal\u00e1l\u00e1sa fontos tulajdons\u00e1g minden szoftverfejleszt\u0151 sz\u00e1m\u00e1ra.</p> <p></p>"},{"location":"java_se_6/#hibak-fajtai","title":"Hib\u00e1k fajt\u00e1i","text":"<p>A Java nyelvben a hib\u00e1k oszt\u00e1lyoz\u00e1s\u00e1nak sokf\u00e9le m\u00f3dja van, de ezek az al\u00e1bbi h\u00e1rom kateg\u00f3ri\u00e1ba esnek.</p> <ul> <li>Szintaktikai hib\u00e1k: A ford\u00edt\u00f3 \u00e1ltal tal\u00e1lt hib\u00e1k.</li> <li>Fut\u00e1si idej\u0171 hib\u00e1k: A program fut\u00e1sa k\u00f6zben fell\u00e9p\u0151 hib\u00e1k.</li> <li>Logikai hib\u00e1k: A programoz\u00f3 \u00e1ltal tal\u00e1lt hib\u00e1k a hib\u00e1s eredm\u00e9nyek ok\u00e1t keresve.</li> </ul> <p>\u00c1ltal\u00e1noss\u00e1gban elmondhat\u00f3, hogy a hib\u00e1kat egyre nehezebb megtal\u00e1lni \u00e9s kijav\u00edtani, ahogy a fenti list\u00e1n lefel\u00e9 haladunk.</p>"},{"location":"java_se_6/#szintaktikai-hibak","title":"Szintaktikai hib\u00e1k","text":"<p>Amikor Java programokat \u00edrunk, a ford\u00edt\u00f3 az els\u0151 v\u00e9delmi vonal a hib\u00e1k ellen. A szintaktikai hib\u00e1k a programoz\u00e1si nyelv haszn\u00e1lat\u00e1nak nyelvtani hib\u00e1it jelentik. Ezeket a legk\u00f6nnyebb megtal\u00e1lni \u00e9s kijav\u00edtani. A ford\u00edt\u00f3 megmondja, hol ker\u00fclt bajba, \u00e9s a legjobb tippje lesz arr\u00f3l, hogy mit csin\u00e1lt rosszul.</p> <p>N\u00e9h\u00e1ny gyakori szintaktikai hiba:</p> <ul> <li>Rosszul \u00edrt v\u00e1ltoz\u00f3- \u00e9s met\u00f3dusnevek</li> <li>A pontosvessz\u0151 elhagy\u00e1sa <code>;</code></li> <li>A z\u00e1r\u00f3 z\u00e1r\u00f3jel <code>)</code>, sz\u00f6gletes z\u00e1r\u00f3jel <code>]</code> vagy kapcsos z\u00e1r\u00f3jel elhagy\u00e1sa <code>}</code></li> </ul> <p>\u00c1ltal\u00e1ban a hiba pontosan a ford\u00edt\u00f3 \u00e1ltal jelzett sorban, vagy az el\u0151tte l\u00e9v\u0151 sorban van. Ha azonban a probl\u00e9ma a helytelen\u00fcl be\u00e1gyazott kapcsos z\u00e1r\u00f3jelek, akkor a t\u00e9nyleges hiba a be\u00e1gyazott blokk elej\u00e9n lehet.</p>"},{"location":"java_se_6/#futasi-ideju-hibak","title":"Fut\u00e1si idej\u0171 hib\u00e1k","text":"<p>Ha a programunknak nincs ford\u00edt\u00e1si idej\u0171 hib\u00e1ja, akkor futni fog. Azokat a hib\u00e1kat, amelyek a sikeres ford\u00edt\u00e1s ut\u00e1n a program v\u00e9grehajt\u00e1sa sor\u00e1n (fut\u00e1s k\u00f6zben) fordulnak el\u0151, fut\u00e1si hib\u00e1knak nevezz\u00fcnk. Fut\u00e1s k\u00f6zbeni hib\u00e1k akkor fordulnak el\u0151, amikor egy ford\u00edt\u00e1si idej\u0171 hiba n\u00e9lk\u00fcli program olyasmire k\u00e9ri a sz\u00e1m\u00edt\u00f3g\u00e9pet, amit a sz\u00e1m\u00edt\u00f3g\u00e9p nem tud megb\u00edzhat\u00f3an elv\u00e9gezni.</p> <p>Eml\u00e9kezz\u00fcnk vissza mi t\u00f6rt\u00e9nik, ha egy t\u00f6mb\u00f6t alul vagy t\u00fal indexel\u00fcnk</p> <p>A leggyakoribb fut\u00e1si idej\u0171 hib\u00e1k:</p> <ul> <li>ArithmeticException: (Null\u00e1val oszt\u00e1s)</li> <li>NullPointerException: (Nem inicializ\u00e1lt objektummal szeretn\u00e9nk dolgozni)</li> <li>ClassCastException: (Nem megfelel\u0151 oszt\u00e1lly\u00e1 szeretn\u00e9nk kasztolni egy m\u00e1sik oszt\u00e1lyt)</li> <li>ArrayIndexOutOfBoundsException: (T\u00falindexel\u00fcnk egy t\u00f6mb\u00f6t vagy list\u00e1t)</li> </ul> <p>A ford\u00edt\u00f3 nem tudhat az ilyen t\u00edpus\u00fa hib\u00e1kr\u00f3l a program ford\u00edt\u00e1sa sor\u00e1n ez\u00e9rt fut\u00e1s id\u0151ben keletkeznek.</p> <p>Amikor a program fut\u00e1sa sor\u00e1n egy met\u00f3dusban hiba keletkezik, a met\u00f3duson bel\u00fcl egy kiv\u00e9tel objektum j\u00f6n l\u00e9tre a mem\u00f3ri\u00e1ban, amit a futtat\u00f3k\u00f6rnyezetnek \u00e1tadunk, a met\u00f3dus v\u00e9grehajt\u00e1sa meg\u00e1ll, \u00e9s a h\u00edv\u00f3 f\u00e9l sz\u00e1m\u00e1ra tov\u00e1bbk\u00fcldj\u00fck a l\u00e9trej\u00f6tt kiv\u00e9telobjektumot, aki lekezelheti, vagy tov\u00e1bbdobhatja azt.</p> <p>Kiv\u00e9tel dob\u00f3d\u00e1s eset\u00e9n a fejleszt\u0151 k\u00f6rnyezet megjelen\u00edt egy \u00fczenetet, amely tartalmazza a kiv\u00e9tel nev\u00e9t, a program sor\u00e1t, ahol a kiv\u00e9tel el\u0151fordult, \u00e9s egy \u00fagy nevezett <code>stack trace</code>-t. A <code>stack trace</code> tartalmazza a met\u00f3dust, amiben a hiba keletkezett, azt a met\u00f3dust ami a kor\u00e1bbi met\u00f3dust h\u00edvta \u00e9s \u00edgy tov\u00e1bb teljesen a Main met\u00f3dusig. A kiv\u00e9tel t\u00edpus\u00e1b\u00f3l \u00e9s a sorsz\u00e1mb\u00f3l k\u00f6nnyen k\u00f6vetkeztethet\u00fcnk a hiba ok\u00e1ra \u00e9s k\u00f6nnyen jav\u00edthatjuk.</p>"},{"location":"java_se_6/#kivetelek-kezelese","title":"Kiv\u00e9telek kezel\u00e9se","text":"<p>A kiv\u00e9lek kezel\u00e9s\u00e9re a Java nyelvben a t\u00f6bbi nyelvhez hasonl\u00f3an \u00fagynevezett <code>try-catch</code> blokkokat haszn\u00e1lhatunk.</p>"},{"location":"java_se_6/#try-catch","title":"try-catch","text":"<p>Vegy\u00fck az al\u00e1bbi p\u00e9ld\u00e1t. A program a felhaszn\u00e1l\u00f3t\u00f3l k\u00e9r k\u00e9t tetsz\u0151leges eg\u00e9sz sz\u00e1mot, majd kisz\u00e1m\u00edtja a h\u00e1nyadosukat. A null\u00e1val val\u00f3 oszt\u00e1sra az eg\u00e9sz\u00e9rt\u00e9k aritmetika nincs felk\u00e9sz\u00edtve \u00edgy az oszt\u00e1sn\u00e1l egy ArithmeticException kiv\u00e9tel dob\u00f3dik, ha az oszt\u00f3 0.</p> <pre><code>public class Main {\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\nint dividend = scanner.nextInt();\nint divisor = scanner.nextInt();\nint fraction = 0;\ntry {\nfraction = dividend / divisor;\n} catch (Exception e) {\nSystem.out.println(\"Zero division is undefined!\");\n} finally {\nSystem.out.println(fraction);\n}\n}\n}\n</code></pre> <p>Ahhoz, hogy kezelni tudjuk a probl\u00e9m\u00e1s k\u00f3dr\u00e9szletet, mag\u00e1t az oszt\u00e1st egy <code>try</code> blokkba tessz\u00fck. A <code>try</code> blokkon bel\u00fcl, ha kiv\u00e9tel dob\u00f3dik, azt a <code>try</code>-hoz tartoz\u00f3 <code>catch</code> blokk elkapja. \u00cdgy a program fut\u00e1sa nem termin\u00e1l a hiba miatt. A <code>finally</code> blokk, mindenk\u00e9pp megh\u00edv\u00f3dik, ak\u00e1r t\u00f6rt\u00e9nt kiv\u00e9tel a v\u00e9grehajt\u00e1s sor\u00e1n ak\u00e1r nem. A <code>finally</code> blokk opcion\u00e1lis \u00e1ltal\u00e1ban f\u00e1jlok bez\u00e1r\u00e1s\u00e1ra, csak adatb\u00e1zis kapcsolat megsz\u0171ntet\u00e9s\u00e9re szoktuk haszn\u00e1lni.</p> <p>A <code>catch</code> blokknak van egy param\u00e9tere, ami az Exception t\u00edpus\u00e1t \u00edrja le, egy <code>try</code> blokkhoz t\u00e1rsulhat t\u00f6bb <code>catch</code> \u00e1g is, a megfelel\u0151 Exception t\u00edpusok kezel\u00e9se miatt.</p>"},{"location":"java_se_6/#throws-kulcsszo","title":"throws kulcssz\u00f3","text":"<p>Ha tudjuk, hogy a k\u00f3dunk amit \u00edrunk Exception-t dobhat, akkor ezt jelezhetj\u00fck a met\u00f3duson kereszt\u00fcl. A met\u00f3dus param\u00e9ter list\u00e1ja ut\u00e1n a <code>throws</code> kulcssz\u00f3val megadhatjuk, hogy milyen Exception-t dobhat az adott met\u00f3dus. \u00cdgy a t\u00f6bbi fejleszt\u0151 l\u00e1tja, hogy olyan met\u00f3dust h\u00edv, amit c\u00e9lszer\u0171 <code>try-catch</code> blokkba tenni.</p> <pre><code>    public static int division(int dividend,int divisor)throws ArithmeticException{\nreturn dividend/divisor;\n}\n</code></pre>"},{"location":"java_se_6/#throw-kulcsszo","title":"throw kulcssz\u00f3","text":"<p>Lehet\u0151s\u00e9g\u00fcnk van nek\u00fcnk is Exception-t dobni, ha a programoz\u00e1si logik\u00e1nkat s\u00e9rt\u0151 \u00e1llapot fordul el\u0151 a k\u00f3dban. P\u00e9ld\u00e1ul van egy met\u00f3dusunk, aminek van egy String param\u00e9tere \u00e9s mi visszat\u00e9r\u00fcnk a megford\u00edtott Stringgel. Ha a met\u00f3dusunk egy <code>null</code> objektummal van h\u00edvva, akkor dobhatunk egy Exception-t, ezzel jelezve, hogy a met\u00f3dusunk nem rendeltet\u00e9sszer\u0171en van haszn\u00e1lva.</p> <pre><code>    public static String reverseString(String inputString){\nif(inputString==null){\nthrow new IllegalArgumentException();\n}\n...\n}\n</code></pre> <p>Kiv\u00e9telt a <code>throw</code> kulcssz\u00f3val dobhatunk, ilyenkor l\u00e9tre kell hoznunk egy kiv\u00e9tel p\u00e9ld\u00e1nyt, valamilyen Exception t\u00edpusb\u00f3l.</p>"},{"location":"java_se_6/#kivetel-tipusok","title":"Kiv\u00e9tel t\u00edpusok","text":"<p>A be\u00e9p\u00edtett kiv\u00e9tel t\u00edpusokat k\u00e9t f\u0151 csoportra bonthatjuk.</p>"},{"location":"java_se_6/#checked-exception","title":"Checked exception","text":"<p>A Checked exception vagyis ellen\u0151rz\u00f6tt kiv\u00e9tel t\u00edpusokn\u00e1l, ford\u00edt\u00e1si hib\u00e1t kapunk, ha nem kezelj\u00fck le a kiv\u00e9telt a k\u00f3dunkban. A Java ford\u00edt\u00f3 k\u00e9nyszer\u00edt minket, hogy az adott met\u00f3dust ami ellen\u0151rz\u00f6tt kiv\u00e9telt dobhat egy <code>try-catch</code> blokkba tegy\u00fck.</p>"},{"location":"java_se_6/#unchecked-exception","title":"Unchecked exception","text":"<p>Ezzel szemben Unchecked exception vagyis nem ellen\u0151rz\u00f6tt kiv\u00e9tel t\u00edpusokn\u00e1l, nem k\u00e9nyszer\u00edt minket a ford\u00edt\u00f3, hogy a kiv\u00e9telt lekezelj\u00fck azonban, ha kiv\u00e9tel dob\u00f3dik egy <code>try-catch</code> blokkon k\u00edv\u00fcl, akkor az a program termin\u00e1l\u00e1shoz vezet.</p>"},{"location":"java_se_6/#sajat-exception-tipus","title":"Saj\u00e1t Exception t\u00edpus","text":"<p>Lehet\u0151s\u00e9g\u00fcnk van saj\u00e1t exception t\u00edpus deklar\u00e1l\u00e1s\u00e1ra is, ha \u00e1ltal\u00e1lunk defini\u00e1lt hib\u00e1kat szeretn\u00e9nk l\u00e9trehozni. P\u00e9ld\u00e1ul, ha van egy oszt\u00e1lyunk, aminek az egyik sz\u00e1m param\u00e9tere csak 0 \u00e9s 100 k\u00f6z\u00f6tt vehet fell \u00e9rt\u00e9ket. L\u00e9trehozhatunk egy saj\u00e1t Exception t\u00edpust, ami akkor dob\u00f3dik, ha a megadott sz\u00e1m k\u00edv\u00fcl esik az intervallumon.</p> <pre><code>public class NumberOutOfInterval extends Exception {\npublic NumberOutOfInterval() {\nsuper(\"Number is out of interval!\");\n}\n}\n</code></pre>"},{"location":"java_se_6/#logikai-hibak","title":"Logikai hib\u00e1k","text":"<p>Miut\u00e1n elt\u00e1vol\u00edtottuk a szintaktikai \u00e9s fut\u00e1si hib\u00e1kat, a program sikeresen fut. De n\u00e9ha a program m\u00e9g mindig nem azt csin\u00e1lja, amit szeretn\u00e9nk, vagy nem j\u00f6n l\u00e9tre kimenet. Az ilyen t\u00edpus\u00fa hib\u00e1kat, amelyek hib\u00e1s kimenetet biztos\u00edtanak, de hibamentesnek t\u0171nnek, logikai hib\u00e1knak nevezz\u00fck. Logikai hib\u00e1k akkor fordulnak el\u0151, ha tervez\u00e9si hiba van a programban. Ezek a leggyakoribb hib\u00e1k, amelyek kezd\u0151kkel fordulnak el\u0151, \u00e9s \u00e1ltal\u00e1ban a legnehezebb megtal\u00e1lni \u00e9s kik\u00fcsz\u00f6b\u00f6lni \u0151ket.</p>"},{"location":"java_se_6/#hibakeresesi-technikak","title":"Hibakeres\u00e9si technik\u00e1k","text":""},{"location":"java_se_6/#oszd-meg-es-uralkodj","title":"Oszd meg \u00e9s uralkodj","text":"<p>Kommentelj\u00fck ki vagy ideiglenesen t\u00f6r\u00f6lj\u00fck a k\u00f3d egy r\u00e9sz\u00e9t. Ha a program lefordul \u00e9s sikeresen m\u0171k\u00f6dik, akkor tudjuk, hogy a hiba az elt\u00e1vol\u00edtott ter\u00fcleten volt. Ha tov\u00e1bbra is fenn\u00e1ll a hiba, akkor pr\u00f3b\u00e1ljuk m\u00e1s ter\u00fcletek ideiglenes inaktiv\u00e1l\u00e1s\u00e1t, am\u00edg a probl\u00e9ma forr\u00e1s\u00e1t nem tal\u00e1ljuk meg.</p>"},{"location":"java_se_6/#ertekek-megvizsgalasa","title":"\u00c9rt\u00e9kek megvizsg\u00e1l\u00e1sa","text":"<p>N\u00e9zz\u00fck meg, hogy a v\u00e1ltoz\u00f3ink j\u00f3 \u00e9rt\u00e9ket vesznek fel \u00e9s a met\u00f3dusaink j\u00f3 \u00e9rt\u00e9kekkel t\u00e9rnek vissza. A legt\u00f6bb esetben a logikai hib\u00e1kat egy hib\u00e1s logika, egy f\u00e9lresz\u00e1mol\u00e1s, egy l\u00e9p\u00e9s hi\u00e1nya\u2026 stb. okozza. A v\u00e9grehajt\u00e1si folyamat k\u00fcl\u00f6nb\u00f6z\u0151 szakaszaiban l\u00e9v\u0151 \u00e9rt\u00e9kek megvizsg\u00e1l\u00e1s\u00e1val rem\u00e9lhet\u0151leg meghat\u00e1rozhatja, hol hib\u00e1ztunk. Az \u00e9rt\u00e9keket megvizsg\u00e1lhatjuk Loggol\u00e1s seg\u00edts\u00e9g\u00e9vel vagy a program Debug m\u00f3dban t\u00f6rt\u00e9n\u0151 futtat\u00e1s\u00e1val.</p>"},{"location":"java_se_6/#gyakorlo-feladatok","title":"Gyakorl\u00f3 feladatok","text":""},{"location":"java_se_6/#1-feladat","title":"1. Feladat:","text":"<p>K\u00e9sz\u00edts egy programot, amely a konzolr\u00f3l beolvassa egy szem\u00e9ly \u00e9letkor\u00e1t. Ha a megadott \u00e9letkor 0 \u00e9s 120 \u00e9v k\u00f6z\u00f6tti, akkor az \u00e9letkor \u00e9rv\u00e9nyes \u00e9s \u00edrjuk ki a konzol kimenetre, k\u00fcl\u00f6nben dobjunk egy <code>NemMegfeleloEletkorException</code>-t.</p>"},{"location":"java_se_6/#2-feladat","title":"2. Feladat:","text":"<p>K\u00e9pzeld el, hogy egy boltban dolgozol, \u00e9s feladatod a term\u00e9kek k\u00e9szleten tart\u00e1sa. K\u00e9sz\u00edts egy <code>Termek</code> oszt\u00e1lyt, amelynek van egy <code>String</code> nev \u00e9s egy <code>int</code> <code>keszletenLevoMennyiseg</code> attrib\u00fatuma. Ha egy term\u00e9k mennyis\u00e9ge 0 al\u00e1 cs\u00f6kken, akkor dobj egy saj\u00e1t kiv\u00e9telt, amit <code>NincsKeszletenException</code>-nak nevezel el.</p> <ul> <li>A <code>Termek</code> oszt\u00e1lynak legyen egy <code>levonKeszletbol(int mennyiseg)</code>   met\u00f3dusa, amely a mennyis\u00e9get levonja a k\u00e9szletb\u0151l. Ha a k\u00e9szlet nem   elegend\u0151, akkor dobjon <code>NincsKeszletenException</code> kiv\u00e9telt.</li> <li>A <code>NincsKeszletenException</code> kiv\u00e9telnek legyen egy \u00fczenete, amely   tartalmazza, hogy melyik term\u00e9k nem el\u00e9rhet\u0151.</li> <li>A <code>main()</code> met\u00f3dusban hozz l\u00e9tre n\u00e9h\u00e1ny term\u00e9ket, \u00e9s pr\u00f3b\u00e1ld meg   levonni a k\u00e9szletb\u0151l n\u00e9h\u00e1nyat, majd kezeld a kiv\u00e9teleket.</li> </ul>"},{"location":"java_se_6/#3-feladat","title":"3. Feladat:","text":"<p>Hozzunk letre egy <code>TermeszetesSzam</code> oszt\u00e1lyt, aminek egy <code>int</code> szam mez\u0151je van. A konstruktora egy <code>int</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3t v\u00e1rjon, amennyiben a kapott sz\u00e1m nem negat\u00edv \u00e1llitsuk be a sz\u00e1m mez\u0151 \u00e9rt\u00e9k\u00e9t a kapott sz\u00e1mmal, ellenkez\u0151 esetben dobjunk egy <code>NemPozitivSzamException</code>-t, amit mi hozunk l\u00e9tre. Az exception sz\u00f6vege tartalmazza a sz\u00e1mot, ami miatt a kiv\u00e9tel dob\u00f3dott.</p> <p>A <code>main()</code> met\u00f3dusban olvassunk be a konzolr\u00f3l sz\u00e1mokat \u00e9s pr\u00f3b\u00e1ljunk meg l\u00e9trehozni 5 term\u00e9szetes sz\u00e1mot. Kezelj\u00fck a kiv\u00e9teleket \u00e9s az alkalmaz\u00e1s fusson am\u00edg a felhaszn\u00e1l\u00f3 nem ad 5 megfelel\u0151 sz\u00e1mot.</p> <p>N\u00e9zz\u00fck meg milyen kiv\u00e9tel dob\u00f3dik, ha nem pozit\u00edv sz\u00e1mot pr\u00f3b\u00e1l megadni a felhaszn\u00e1l\u00f3 \u00e9s kezelj\u00fck ezt a hib\u00e1t is.</p> <p>A sikeres beolvas\u00e1s ut\u00e1n \u00edrjuk ki az 5 sz\u00e1mot.</p>"},{"location":"java_se_7/","title":"Java IO","text":""},{"location":"java_se_7/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Ebben a szekci\u00f3ban megismerked\u00fcnk a <code>java.io</code> csomaggal. A <code>java.io</code> a Java programoz\u00e1si nyelv alapvet\u0151 be- \u00e9s kimeneti ( I/O) m\u0171veletekhez haszn\u00e1lt csomagja. Az \"I/O\" a \"Input/Output\" r\u00f6vid\u00edt\u00e9se, \u00e9s az adatok beolvas\u00e1s\u00e1t (input) \u00e9s ki\u00edr\u00e1s\u00e1t (output) jelenti az alkalmaz\u00e1sok \u00e9s a k\u00fclvil\u00e1g k\u00f6z\u00f6tt.</p>"},{"location":"java_se_7/#file-osztaly","title":"File oszt\u00e1ly","text":"<p>Az <code>java.io.File</code> oszt\u00e1ly a Java I/O csomag r\u00e9sze, \u00e9s lehet\u0151v\u00e9 teszi az alkalmaz\u00e1sok sz\u00e1m\u00e1ra a f\u00e1jlok \u00e9s k\u00f6nyvt\u00e1rak kezel\u00e9s\u00e9t a f\u00e1jlrendszerben. A <code>File</code> oszt\u00e1ly nem olvas vagy \u00edr adatokat a f\u00e1jlokb\u00f3l, hanem a f\u00e1jlok \u00e9s k\u00f6nyvt\u00e1rak manipul\u00e1l\u00e1s\u00e1t v\u00e9gzi, p\u00e9ld\u00e1ul f\u00e1jl l\u00e9trehoz\u00e1s\u00e1t, m\u00f3dos\u00edt\u00e1s\u00e1t, t\u00f6rl\u00e9s\u00e9t stb.</p> <pre><code>public class FileExample {\npublic static void main(String[] args) {\ntry {\nFile file = new File(\"example.txt\"); // (1)\nif (file.createNewFile()) { // (2)\nSystem.out.println(\"A f\u00e1jl l\u00e9trej\u00f6tt.\");\n} else {\nSystem.out.println(\"A f\u00e1jl m\u00e1r l\u00e9tezik.\");\n}\nif (file.delete()) { // (3)\nSystem.out.println(\"A f\u00e1jl t\u00f6r\u00f6lve lett.\");\n} else {\nSystem.out.println(\"A f\u00e1jlt nem siker\u00fclt t\u00f6r\u00f6lni.\");\n}\nFile directory = new File(\"myDirectory\"); //(4)\nif (directory.mkdir()) {\nSystem.out.println(\"A k\u00f6nyvt\u00e1r l\u00e9trej\u00f6tt.\");\n} else {\nSystem.out.println(\"A k\u00f6nyvt\u00e1r m\u00e1r l\u00e9tezik vagy nem siker\u00fclt l\u00e9trehozni.\");\n}\nSystem.out.println(\"Abszol\u00fat el\u00e9r\u00e9si \u00fat: \" + file.getAbsolutePath()); // (5)\nSystem.out.println(\"F\u00e1jl vagy k\u00f6nyvt\u00e1r: \" + (directory.isFile() ? \"F\u00e1jl\" : \"K\u00f6nyvt\u00e1r\")); // (6)\nSystem.out.println(\"L\u00e9tezik: \" + file.exists()); // (7)\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre> <ol> <li>F\u00e1jl vagy k\u00f6nyvt\u00e1r l\u00e9trehoz\u00e1sa (relat\u00edv el\u00e9r\u00e9si \u00fat) Abszol\u00fat el\u00e9r\u00e9si \u00fat haszn\u00e1lat\u00e1ra is van lehet\u0151s\u00e9g    <pre><code> File file = new File(\"C:\\\\Users\\\\username\\\\Desktop\\\\example.txt\");\n</code></pre></li> <li>F\u00e1jl l\u00e9trehoz\u00e1sa</li> <li>F\u00e1jl t\u00f6rl\u00e9se</li> <li>K\u00f6nyvt\u00e1r l\u00e9trehoz\u00e1sa</li> <li>A <code>File</code> objektum abszol\u00fat \u00fatvonal\u00e1nak el\u00e9r\u00e9se.</li> <li>Ellen\u0151rizz\u00fck, hogy egy elem k\u00f6nyvt\u00e1r-e vagy sem</li> <li>Ellen\u0151rizz\u00fck, hogy az elem l\u00e9tezik-e</li> </ol> <p>A <code>File</code> oszt\u00e1ly tov\u00e1bbi met\u00f3dusokkal is rendelkezik, amelyek seg\u00edtenek az el\u00e9r\u00e9si utak kezel\u00e9s\u00e9ben, az elemek ellen\u0151rz\u00e9s\u00e9ben \u00e9s a f\u00e1jl attrib\u00fatumok lek\u00e9rdez\u00e9s\u00e9ben.</p>"},{"location":"java_se_7/#input-es-output","title":"Input \u00e9s Output","text":"<p>A Java I/O oszt\u00e1lyok adatok beolvas\u00e1s\u00e1ra \u00e9s adatok kimenet\u00e9nek kezel\u00e9s\u00e9re szolg\u00e1lnak. Ezt a funkci\u00f3t k\u00e9t alapvet\u0151 csoportra lehet osztani: az adatok beolvas\u00e1s\u00e1t \u00e9s az adatok kimenet\u00e9t kezel\u0151 r\u00e9szekre. Az \u00f6r\u00f6kl\u0151d\u00e9s szempontj\u00e1b\u00f3l az <code>InputStream</code> vagy <code>Reader</code> oszt\u00e1lyokb\u00f3l sz\u00e1rmaznak az adatok beolvas\u00e1s\u00e1hoz sz\u00fcks\u00e9ges oszt\u00e1lyok gy\u0171jtem\u00e9nye. Ugyanakkor az <code>OutputStream</code> vagy <code>Writer</code> oszt\u00e1lyokb\u00f3l sz\u00e1rmaznak az adatok kimenet\u00e9t szab\u00e1lyoz\u00f3 eszk\u00f6z\u00f6k.</p> <p>Ezen oszt\u00e1lyok k\u00f6z\u00f6tti hierarchia azt jelenti, hogy az <code>InputStream</code> \u00e9s <code>Reader</code> oszt\u00e1lyok \u00e1ltal\u00e1nosabbak, \u00e9s az ezekb\u0151l sz\u00e1rmaz\u00f3 oszt\u00e1lyok specializ\u00e1l\u00f3dnak a k\u00fcl\u00f6nb\u00f6z\u0151 t\u00edpus\u00fa bemeneti adatok kezel\u00e9s\u00e9re. Hasonl\u00f3k\u00e9ppen, az <code>OutputStream</code> \u00e9s <code>Writer</code> oszt\u00e1lyok \u00e1ltal\u00e1nos\u00edtj\u00e1k a kimeneti m\u0171veleteket, amelyeket az azokb\u00f3l sz\u00e1rmaz\u00f3 oszt\u00e1lyok finom\u00edtanak a speci\u00e1lis kimeneti form\u00e1tumokhoz.</p> <p>Az adatok beolvas\u00e1s\u00e1hoz \u00e9s ki\u00edr\u00e1s\u00e1hoz az <code>InputStream</code> \u00e9s <code>OutputStream</code> oszt\u00e1lyok a <code>read</code> \u00e9s <code>write</code> met\u00f3dusokat biztos\u00edtj\u00e1k, amelyek lehet\u0151v\u00e9 teszik byte-ok vagy byte t\u00f6mb\u00f6k olvas\u00e1s\u00e1t \u00e9s \u00edr\u00e1s\u00e1t. Fontos meg\u00e9rteni, hogy ezek az alapvet\u0151 oszt\u00e1lyok \u00e1ltal\u00e1ban nem ker\u00fclnek k\u00f6zvetlen\u00fcl haszn\u00e1latra a k\u00f3dunkban, hanem m\u00e1s, k\u00e9nyelmesebb interf\u00e9szeket ny\u00fajt\u00f3 oszt\u00e1lyokat haszn\u00e1lunk, p\u00e9ld\u00e1ul a <code>BufferedReader</code> vagy a <code>BufferedWriter</code> oszt\u00e1lyokat.</p> <p>Mivel a k\u00e9nyelmes I/O kezel\u00e9s \u00e9rdek\u00e9ben gyakran t\u00f6bb objektumot kell egym\u00e1sba \u00e1gyazva haszn\u00e1lnunk, az I/O folyamat meg\u00e9rt\u00e9se id\u0151nk\u00e9nt bonyolult lehet. Ez\u00e9rt l\u00e9teznek olyan magasabb szint\u0171 oszt\u00e1lyok \u00e9s keretrendszerek, amelyek seg\u00edthetnek a hat\u00e9konyabb \u00e9s k\u00e9nyelmesebb I/O m\u0171veletek kivitelez\u00e9s\u00e9ben.</p>"},{"location":"java_se_7/#beolvasas-fajlokbol","title":"Beolvas\u00e1s f\u00e1jlokb\u00f3l","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileReadingExample {\npublic static void main(String[] args) {\ntry {\nFile filePath = new File(\"sample.txt\"); // (1)\nFileReader fileReader = new FileReader(filePath); // (2)\nBufferedReader bufferedReader = new BufferedReader(fileReader); // (3)\nString line;\nwhile ((line = bufferedReader.readLine()) != null) { // (4)\nSystem.out.println(line);\n}\nbufferedReader.close();// (5)\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre> <ol> <li>F\u00e1jl objektum l\u00e9trehoz\u00e1sa az el\u00e9r\u00e9si \u00fattal.</li> <li><code>FileReader</code> objektum l\u00e9trehoz\u00e1sa.</li> <li><code>BufferedReader</code> objektum l\u00e9trehoz\u00e1sa a <code>FileReader</code> objektum seg\u00edts\u00e9g\u00e9vel.</li> <li>Soronk\u00e9nti beolvas\u00e1s \u00e9s ki\u00edrat\u00e1s</li> <li>A f\u00e1jl bez\u00e1r\u00e1sa</li> </ol> <p>Ebben a p\u00e9ld\u00e1ban a <code>FileReader</code> \u00e9s a <code>BufferedReader</code> oszt\u00e1lyokat haszn\u00e1ljuk a f\u00e1jl beolvas\u00e1s\u00e1hoz. Az <code>FileReader</code> oszt\u00e1ly a f\u00e1jl megnyit\u00e1s\u00e1ra \u00e9s beolvas\u00e1s\u00e1ra szolg\u00e1l, m\u00edg a <code>BufferedReader</code> egy pufferelt karakter olvas\u00f3t ny\u00fajt, amely hat\u00e9konyabb olvas\u00e1st tesz lehet\u0151v\u00e9.</p> <p>A <code>try-catch</code> blokk az\u00e9rt van jelen, hogy kezelje a potenci\u00e1lis I/O kiv\u00e9teleket. Az <code>IOException</code> azokat az eseteket fedi le, amikor hiba t\u00f6rt\u00e9nik a f\u00e1jl olvas\u00e1sa k\u00f6zben.</p> <p>A <code>readLine()</code> met\u00f3dus soronk\u00e9nt olvassa a f\u00e1jlt, \u00e9s amikor a v\u00e9g\u00e9re \u00e9r, <code>null</code> \u00e9rt\u00e9kkel t\u00e9r vissza. \u00cdgy k\u00f6nnyed\u00e9n v\u00e9gigolvashatjuk a f\u00e1jl tartalm\u00e1t soronk\u00e9nt.</p>"},{"location":"java_se_7/#beolvasas-a-scanner-osztaly-hasznalataval","title":"Beolvas\u00e1s a Scanner oszt\u00e1ly haszn\u00e1lat\u00e1val","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileReadingExample {\npublic static void main(String[] args) {\ntry {\nFile filePath = new File(\"sample.txt\"); // (1)\nScanner scanner = new Scanner(filePath); // (2)\nwhile (scanner.hasNextLine()) {\nString line = scanner.nextLine(); // (3)\nSystem.out.println(line); // (4)\n}\nscanner.close();// (5)\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre> <ol> <li>F\u00e1jl objektum l\u00e9trehoz\u00e1sa az el\u00e9r\u00e9si \u00fattal.</li> <li><code>Scanner</code> objektum l\u00e9trehoz\u00e1sa a <code>File</code> objektum seg\u00edts\u00e9g\u00e9vel.</li> <li>Sor beolvas\u00e1sa a f\u00e1jlb\u0151l.</li> <li>A beolvasott sor ki\u00edr\u00e1sa a konzol kimenetre.</li> <li>A f\u00e1jl bez\u00e1r\u00e1sa</li> </ol> <p>A kor\u00e1bban is haszn\u00e1lt <code>Scanner</code> oszt\u00e1ly a konzolr\u00f3l val\u00f3 beolvas\u00e1son k\u00edv\u00fcl lehet\u0151v\u00e9 teszi az egyszer\u0171 \u00e9s k\u00e9nyelmes adatbeolvas\u00e1st, \u00e9s k\u00fcl\u00f6n\u00f6sen hasznos, ha a f\u00e1jlban egyszer\u0171bb t\u00edpus\u00fa adatok vannak, p\u00e9ld\u00e1ul sz\u00f6veges adatok vagy sz\u00e1mok.</p> <p>Miut\u00e1n a <code>Scanner</code> objektumot l\u00e9trehoztuk a haszn\u00e1lata megegyezik azzal, amikor a konzolr\u00f3l val\u00f3 beolvas\u00e1sra haszn\u00e1ltuk.</p>"},{"location":"java_se_7/#iras-fajlokba","title":"\u00cdr\u00e1s f\u00e1jlokba","text":"<pre><code>import java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileWritingExample {\npublic static void main(String[] args) {\ntry {\nFile filePath = new File(\"output.txt\"); // (1)\nFileWriter fileWriter = new FileWriter(filePath); // (2)\nBufferedWriter bufferedWriter = new BufferedWriter(fileWriter); // (3)\nbufferedWriter.write(\"Ez egy p\u00e9lda arra, hogy hogyan lehet adatot f\u00e1jlba \u00edrni.\"); // (4)\nbufferedWriter.newLine(); // (5)\nbufferedWriter.write(\"M\u00e9g egy sor.\");\nbufferedWriter.close(); // (6)\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre> <ol> <li>F\u00e1jl objektum l\u00e9trehoz\u00e1sa az el\u00e9r\u00e9si \u00fattal.</li> <li><code>FileWriter</code> objektum l\u00e9trehoz\u00e1sa.</li> <li><code>BufferedWriter</code> objektum l\u00e9trehoz\u00e1sa a <code>FileWriter</code> objektum seg\u00edts\u00e9g\u00e9vel.</li> <li>Adat ki\u00edr\u00e1sa a f\u00e1jlba.</li> <li>Sort\u00f6r\u00e9s besz\u00far\u00e1sa a f\u00e1jlba.</li> <li>A f\u00e1jl bez\u00e1r\u00e1sa</li> </ol> <p>Ebben a p\u00e9ld\u00e1ban a <code>FileWriter</code> \u00e9s a <code>BufferedWriter</code> oszt\u00e1lyokat haszn\u00e1ljuk a f\u00e1jlba \u00edr\u00e1s\u00e1hoz. A <code>FileWriter</code> oszt\u00e1ly a f\u00e1jl megnyit\u00e1s\u00e1ra \u00e9s \u00edr\u00e1s\u00e1ra szolg\u00e1l, m\u00edg a <code>BufferedWriter</code> egy pufferelt karakter \u00edr\u00f3t ny\u00fajt, amely hat\u00e9konyabb \u00edr\u00e1st tesz lehet\u0151v\u00e9.</p> <p>Az <code>IOException</code>-t a <code>try-catch</code> blokkban kezelj\u00fck, amely az esetleges I/O hib\u00e1kat fedi le.</p> <p>A <code>write()</code> met\u00f3dus haszn\u00e1lhat\u00f3 a karakterek vagy karakter sorozatok ki\u00edr\u00e1s\u00e1ra a f\u00e1jlba. A <code>newLine()</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel \u00faj sort illeszthet\u00fcnk be a f\u00e1jlba.</p> <p>V\u00e9g\u00fcl ne felejts\u00fck el a <code>BufferedWriter</code> p\u00e9ld\u00e1nyt bez\u00e1rni, hogy a f\u00e1jl megfelel\u0151en lez\u00e1r\u00f3djon \u00e9s a v\u00e1ltoztat\u00e1sok elment\u0151djenek.</p>"},{"location":"java_se_7/#try-with-resources","title":"try-with-resources","text":"<p>A <code>try with resources</code> \u00faj\u00edt\u00e1st az Java 7-ben vezett\u00e9k be, \u00e9s lehet\u0151v\u00e9 teszi az er\u0151forr\u00e1sok (pl. f\u00e1jl, h\u00e1l\u00f3zati kapcsolat) automatikus bez\u00e1r\u00e1s\u00e1t an\u00e9lk\u00fcl, hogy kifejezetten le kellene z\u00e1rnod azokat a finally blokkban.</p> <pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class TryWithResourcesExample {\npublic static void main(String[] args) {\nFile filePath = new File(\"sample.txt\"); // (1)\ntry (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) { // (2)\nString line;\nwhile ((line = bufferedReader.readLine()) != null) { // (3)\nSystem.out.println(line);\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre> <ol> <li>F\u00e1jl objektum l\u00e9trehoz\u00e1sa az el\u00e9r\u00e9si \u00fattal.</li> <li><code>BufferedReader</code> objektum l\u00e9trehoz\u00e1sa a <code>FileReader</code> objektum seg\u00edts\u00e9g\u00e9vel a <code>try</code> szerkezeten bel\u00fcl.</li> <li>Soronk\u00e9nti beolvas\u00e1s \u00e9s ki\u00edrat\u00e1s</li> </ol> <p>Ebben a p\u00e9ld\u00e1ban a <code>BufferedReader</code> p\u00e9ld\u00e1nyt a <code>try with resources</code> szerkezetbe helyezz\u00fck. A Java biztos\u00edtja, hogy a <code>BufferedReader</code> p\u00e9ld\u00e1ny automatikusan bez\u00e1r\u00f3dik a <code>try</code> blokk v\u00e9g\u00e9n, f\u00fcggetlen\u00fcl att\u00f3l, hogy a blokk v\u00e9grehajt\u00e1sa sor\u00e1n a kiv\u00e9tel keletkezik-e vagy sem.</p> <p>Ez a szerkezet jelent\u0151sen megk\u00f6nny\u00edti az er\u0151forr\u00e1sok kezel\u00e9s\u00e9t \u00e9s z\u00e1r\u00e1s\u00e1t, \u00e9s cs\u00f6kkenti az olyan hib\u00e1k kock\u00e1zat\u00e1t, amik a bez\u00e1r\u00e1s elmulaszt\u00e1s\u00e1b\u00f3l sz\u00e1rmazn\u00e1nak.</p>"},{"location":"java_se_7/#csv-fajlok-kezelese","title":"CSV f\u00e1jlok kezel\u00e9se","text":"<p>A CSV (Comma-Separated Values) egy olyan sz\u00f6veges f\u00e1jlform\u00e1tum, amelyet gyakran haszn\u00e1lnak adatt\u00e1bl\u00e1k, adatlist\u00e1k vagy t\u00e1bl\u00e1zatok t\u00e1rol\u00e1s\u00e1ra \u00e9s megoszt\u00e1s\u00e1ra. A CSV form\u00e1tum egyszer\u0171, k\u00f6nnyen olvashat\u00f3 \u00e9s \u00edrhat\u00f3, \u00e9s \u00e1ltal\u00e1ban t\u00e1mogatott sokf\u00e9le alkalmaz\u00e1sban, p\u00e9ld\u00e1ul sz\u00f6vegszerkeszt\u0151kben, t\u00e1bl\u00e1zatkezel\u0151kben \u00e9s adatb\u00e1zis-kezel\u0151 rendszerekben.</p> <p>A CSV f\u00e1jl adatai sz\u00f6vegk\u00e9nt vannak t\u00e1rolva, \u00e9s a cell\u00e1kat, oszlopokat vagy mez\u0151ket a vessz\u0151 karakterrel (,) v\u00e1lasztj\u00e1k el egym\u00e1st\u00f3l. A CSV f\u00e1jlban \u00e1ltal\u00e1ban minden sor egy rekordot vagy elemet tartalmaz, \u00e9s a sorokban l\u00e9v\u0151 mez\u0151k adatai az adott sorban szint\u00e9n vessz\u0151kkel vannak elv\u00e1lasztva.</p> <p>Vegy\u00fck az al\u00e1bbi csv f\u00e1jlt.</p> sample.csv<pre><code>N\u00e9v,Kor,Orsz\u00e1g\nAlice,28,USA\nBob,32,UK\nCharlie,24,Canada\n</code></pre> <p>Ebben a p\u00e9ld\u00e1ban a CSV f\u00e1jl h\u00e1rom oszlopot tartalmaz: N\u00e9v, Kor \u00e9s Orsz\u00e1g. Minden sor egy egyedi rekordot k\u00e9pvisel, \u00e9s a mez\u0151k a vessz\u0151 karakterrel vannak elv\u00e1lasztva.</p>"},{"location":"java_se_7/#csv-fajlok-feldolgozasa","title":"CSV f\u00e1jlok feldolgoz\u00e1sa","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class CSVFileProcessing {\npublic static void main(String[] args) {\nFile filePath = new File(\"sample.csv\"); // (1)\ntry (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) { // (2)\nString line;\nwhile ((line = bufferedReader.readLine()) != null) { // (3)\nString[] fields = line.split(\",\"); // (4)\nSystem.out.println(\"N\u00e9v: \" + fields[0] + \", Kor: \" + fields[1] + \", Orsz\u00e1g: \" + fields[2]); // (5)\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre> <ol> <li>F\u00e1jl objektum l\u00e9trehoz\u00e1sa az el\u00e9r\u00e9si \u00fattal.</li> <li><code>BufferedReader</code> objektum l\u00e9trehoz\u00e1sa a <code>FileReader</code> objektum seg\u00edts\u00e9g\u00e9vel a <code>try</code> szerkezeten bel\u00fcl.</li> <li>Soronk\u00e9nti beolvas\u00e1s</li> <li>Felbontjuk a sort a vessz\u0151 karakterek ment\u00e9n.</li> <li>Ki\u00edrjuk az adatokat a mez\u0151k szerint</li> </ol> <p>A kor\u00e1bbi <code>sample.csv</code> f\u00e1jl beolvas\u00e1s\u00e1n\u00e1l felt\u00e9telezz\u00fck, hogy minden oszlop h\u00e1rom \u00e9rt\u00e9ket tartalmaz. A <code>split()</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel sz\u00e9tv\u00e1lasztjuk a sort a vessz\u0151 karakterek ment\u00e9n, \u00e9s a kapott mez\u0151ket egy t\u00f6mbben t\u00e1roljuk.</p>"},{"location":"java_se_7/#csv-fajlok-letrehozasa","title":"CSV f\u00e1jlok l\u00e9trehoz\u00e1sa","text":"<pre><code>import java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class CreateCSVFile {\npublic static void main(String[] args) {\nFile filePath = new File(\"sample.csv\"); // (1)\ntry (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(filePath))) { // (2)\nString header = \"N\u00e9v,Kor,Orsz\u00e1g\"; // (3)\nbufferedWriter.write(header);\nbufferedWriter.newLine();\nString[] names = {\"Alice\", \"Bob\", \"Charlie\"}; // (4)\nint[] ages = {28, 32, 24};\nString[] countries = {\"USA\", \"UK\", \"Canada\"};\nfor (int i = 0; i &lt; names.length; i++) { // (5)\nString line = names[i] + \",\" + ages[i] + \",\" + countries[i];\nbufferedWriter.write(line);\nbufferedWriter.newLine();\n}\nSystem.out.println(\"CSV f\u00e1jl sikeresen l\u00e9trehozva \u00e9s \u00edrva.\");\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre> <ol> <li>F\u00e1jl objektum l\u00e9trehoz\u00e1sa az el\u00e9r\u00e9si \u00fattal.</li> <li><code>BufferedWriter</code> objektum l\u00e9trehoz\u00e1sa a <code>FileWriter</code> objektum seg\u00edts\u00e9g\u00e9vel a <code>try</code> szerkezeten bel\u00fcl.</li> <li>Fejl\u00e9c sor l\u00e9trehoz\u00e1sa \u00e9s be\u00edr\u00e1sa a f\u00e1jlba.</li> <li>Adat rekordok l\u00e9trehoz\u00e1sa.</li> <li>Egy <code>for</code> ciklussal v\u00e9gig megy\u00fcnk az adat rekordokon \u00e9s be\u00edrjuk \u0151ket a csv f\u00e1jlba.</li> </ol> <p>El\u0151sz\u00f6r a fejl\u00e9c sort hozz\u00e1adjuk, majd az adatokat (n\u00e9v, kor, orsz\u00e1g) \u00edrjuk be a f\u00e1jlba. A <code>BufferedWriter</code> oszt\u00e1lyt haszn\u00e1ljuk, hogy hat\u00e9konyan \u00edrjunk a f\u00e1jlba.</p>"},{"location":"java_se_7_ex/","title":"Java IO gyakorl\u00f3 feladatok","text":""},{"location":"java_se_7_ex/#1-feladat","title":"1. Feladat","text":"<p>Gener\u00e1ljunk le k\u00e9t sz\u00f6vegf\u00e1jlt az <code>a.txt</code> \u00e9s a <code>b.txt</code> f\u00e1jlokat:</p> <ul> <li><code>a.txt</code> tartalma: 1 \u00e9s 10 k\u00f6z\u00f6tt a p\u00e1ratlan sz\u00e1mok</li> <li><code>b.txt</code> tartalma: 1 \u00e9s 10 k\u00f6z\u00f6tt a p\u00e1ros sz\u00e1mok</li> </ul> <p>F\u00e9s\u00fclj\u00fck \u00f6ssze az <code>a.txt</code> \u00e9s <code>b.txt</code> f\u00e1jlokat a <code>c.txt</code> f\u00e1jlba \u00fagy, hogy felv\u00e1ltva olvasunk bel\u0151l\u00fck!</p>"},{"location":"java_se_7_ex/#2-feladat","title":"2. Feladat","text":"<p>K\u00e9sz\u00edts\u00fcnk programot ami a konzolr\u00f3l beolvas szavakat, ad nekik egy sorsz\u00e1mot, majd ki\u00edrja a <code>szavak.txt</code> nev\u0171 f\u00e1jlba. Ha a beg\u00e9pelt sz\u00f3 <code>exit</code> akkor kil\u00e9p. Teh\u00e1t, ha az els\u0151 beolvasott sz\u00f3 az volt, hogy macska, akkor a <code>szavak.txt</code> f\u00e1jlba (ha nem l\u00e9tezik, hozzunk l\u00e9tre egyet k\u00f3db\u00f3l) be\u00edrja, hogy <code>1 macska</code>. Ha a k\u00f6vetkez\u0151 sz\u00f3 az hogy kutya, akkor a f\u00e1jlba beker\u00fcl, hogy <code>2 kutya</code> \u00e9s \u00edgy tov\u00e1bb, am\u00edg az <code>exit</code> parancs le nem \u00e1ll\u00edtja a programot.</p>"},{"location":"java_se_7_ex/#3-feladat","title":"3. Feladat","text":"<p>Vegy\u00fck az al\u00e1bbi <code>Termek</code> oszt\u00e1lyt. K\u00e9sz\u00edts egy statikus <code>writeTermekToCSV()</code> met\u00f3dust, ami egy termek t\u00f6mb\u00f6t kap param\u00e9ter\u00fcl \u00e9s ki\u00edrja azt a <code>termek.csv</code> f\u00e1jlba. A <code>main()</code> met\u00f3dusban hozz l\u00e9tre egy t\u00f6mb\u00f6t 10 darab term\u00e9kkel \u00e9s h\u00edvd meg a <code>writeTermekToCSV()</code> met\u00f3dust.</p> <pre><code>class Termek {\nprivate static int kovetkezoAzonosito = 100000;\nprivate int azonosito;\nprivate String megnevezes;\nprivate int ar;\npublic Termek(String megnevezes, int ar) {\nthis.azonosito = kovetkezoAzonosito++;\nthis.megnevezes = megnevezes;\nthis.ar = ar;\n}\npublic int getAzonosito() {\nreturn azonosito;\n}\npublic String getMegnevezes() {\nreturn megnevezes;\n}\npublic int getAr() {\nreturn ar;\n}\n}\n</code></pre>"},{"location":"java_se_7_ex/#4-feladat","title":"4. Feladat","text":"<p>Vegy\u00fck az al\u00e1bbi <code>Student</code> \u00e9s <code>Subject</code> oszt\u00e1lyt.</p> <pre><code>class Student {\nprivate final int id;\nprivate final String name;\nprivate final Subject[] grades;\nStudent(int id, String name, Subject[] grades) {\nthis.id = id;\nthis.name = name;\nthis.grades = grades;\n}\npublic double getAverageScore() {\n// TODO\nreturn 0;\n}\npublic Performance getPerformance() {\n// TODO\nreturn null;\n}\n@Override\npublic String toString() {\n// TODO\nreturn null;\n}\n}\n</code></pre> <pre><code>class Subject {\nprivate final String name;\nprivate final int score;\nSubject(String name, int score) {\nthis.name = name;\nthis.score = score;\n}\npublic String getName() {\nreturn name;\n}\npublic int getScore() {\nreturn score;\n}\n}\n</code></pre> <p>A <code>Student</code> oszt\u00e1ly egy di\u00e1kot reprezent\u00e1l. Minden di\u00e1knak van egy <code>int</code> id egy <code>String</code> name \u00e9s egy <code>Subject[]</code> grades adattagja. A feladatod a hi\u00e1nyz\u00f3 <code>getAverageScore()</code>, <code>getPerformance()</code> \u00e9s <code>toString()</code> met\u00f3dusok implement\u00e1l\u00e1sa.</p> <ul> <li><code>getAverageScore()</code> - T\u00e9rjen vissza a tant\u00e1rgyakon el\u00e9rt \u00e1tlagos pontsz\u00e1mmal.</li> <li><code>getPerformance()</code> - Hozz l\u00e9tre egy <code>Performance</code> enumot, az al\u00e1bbi 4 lehets\u00e9ges \u00e9rt\u00e9kkel \u00e9s t\u00e9rj vissza a megfelel\u0151   enummal.<ul> <li><code>EXCELENT</code> - Ha az \u00e1tlag pontsz\u00e1m 90 pont felett van.</li> <li><code>GOOD</code> - Ha az \u00e1tlag pontsz\u00e1m 80 pont felett van.</li> <li><code>AVERAGE</code> - Ha az \u00e1tlag pontsz\u00e1m 70 pont felett van.</li> <li><code>BELOW_AVERAGE</code>  - Ha az \u00e1tlag pontsz\u00e1m 70 pont alatt van.</li> </ul> </li> <li><code>toString()</code> - Jelen\u00edtse meg a di\u00e1k adatait a k\u00f6vetkez\u0151 form\u00e1ban:   <pre><code>Student: Alice\nAverage Score: 85.0\nPerformance: Good\n</code></pre></li> </ul> <p>K\u00e9sz\u00edts egy programot, ami beolvassa a al\u00e1bbi <code>grades.txt</code> f\u00e1jlt. Hozz l\u00e9tre minden rekordb\u00f3l egy objektumot \u00e9s \u00edrd ki a konzolra a <code>toString</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel a di\u00e1k adatait.</p> grades.txt<pre><code>student_id, name, math, history, english\n1, Alice, 85, 92, 78\n2, Bob, 76, 88, 92\n3, Carol, 95, 89, 78\n4, David, 68, 75, 80\n5, Eve, 90, 85, 92\n</code></pre>"},{"location":"java_se_7_ex/#5-feladat","title":"5. Feladat","text":"<p>K\u00e9sz\u00edts egy Java programot, ami beolvassa a <code>sample_text.txt</code> f\u00e1jl tartalm\u00e1t \u00e9s megsz\u00e1molja minden sz\u00f3 el\u0151fordul\u00e1si sz\u00e1m\u00e1t, majd ezeket ki\u00edrja a <code>word_frequency.txt</code> f\u00e1jlba az al\u00e1bbi form\u00e1ban:</p> <pre><code>almafa 1\nalma 3\nkorte 2\nfa 2\npiros 1\n</code></pre> sample_text.txt<pre><code>almafa alma korte alma fa piros alma korte fa\n</code></pre>"},{"location":"java_se_7_ex/#6-feladat","title":"6. Feladat","text":"<p>K\u00e9sz\u00edts egy programot, ami egy mapp\u00e1b\u00f3l beolvassa az \u00f6sszes <code>*.txt</code> kiterjeszt\u00e9s\u0171 f\u00e1jlt \u00e9s \u00f6sszef\u00e9s\u00fcli azokat egy <code>merged.txt</code> f\u00e1jlba.</p>"},{"location":"java_se_7_ex/#7-feladat","title":"7. Feladat","text":"<p>K\u00e9sz\u00edts egy programot, ami rekurz\u00edvan ki\u00edrja egy mappa \u00f6sszes elem\u00e9t a konzolra.</p>"},{"location":"java_se_7_ex/#8-feladat","title":"8. Feladat","text":"<p>K\u00e9sz\u00edts egy programot, ami k\u00fcl\u00f6nb\u00f6z\u0151 aut\u00f3k co2 kibocs\u00e1jt\u00e1si adatait olvassa be \u00e9s dolgozza fel. Az alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se sor\u00e1n a <code>FuelType</code> enumot \u00e9s a <code>CarEmissionInfo</code> oszt\u00e1lyt haszn\u00e1ld.</p> <pre><code>public enum FuelType {\nREGULAR_GASOLINE, //X\nPREMIUM_GASOLINE, //Z\nDIESEL, // D\nE85, //E\nNATURAL_GAS, // N\nUNKNOWN\n}\n</code></pre> <p>Egy enum a k\u00fcl\u00f6nb\u00f6z\u0151 \u00fczemanyag t\u00edpusokkal.</p> <pre><code>public class CarEmissionInfo {\nprivate final String manufacturer;\nprivate final String model;\nprivate final double engineSize;\nprivate final FuelType fuelType;\nprivate final int co2Emission;\npublic CarEmissionInfo(String manufacturer, String model, double engineSize, FuelType fuelType, int co2Emission) {\nthis.manufacturer = manufacturer;\nthis.model = model;\nthis.engineSize = engineSize;\nthis.fuelType = fuelType;\nthis.co2Emission = co2Emission;\n}\n//... Getter, setter, toString met\u00f3dusok\n}\n</code></pre> <p>Az aut\u00f3 adatait tartalmaz\u00f3 oszt\u00e1ly.</p> <p>A feladatod az emission.csv f\u00e1jl beolvas\u00e1sa \u00e9s a megfelel\u0151 objektumot l\u00e9trehoz\u00e1sa a rekordok alapj\u00e1n.</p> emission.csv<pre><code>Make,Model,Vehicle Class,Engine Size(L),Cylinders,Transmission,Fuel Type,Fuel Consumption City (L/100 km),Fuel Consumption Hwy (L/100 km),Fuel Consumption Comb (L/100 km),Fuel Consumption Comb (mpg),CO2 Emissions(g/km)\nACURA,ILX,COMPACT,2,4,AS5,Z,9.9,6.7,8.5,33,196\nACURA,ILX,COMPACT,2.4,4,M6,Z,11.2,7.7,9.6,29,221\nACURA,ILX HYBRID,COMPACT,1.5,4,AV7,Z,6,5.8,5.9,48,136\nACURA,MDX 4WD,SUV - SMALL,3.5,6,AS6,Z,12.7,9.1,11.1,25,255\n...\n</code></pre> <p>A feldolgoz\u00e1s sor\u00e1n, nem kell az \u00f6sszes oszlopot felhaszn\u00e1lni!</p> <ul> <li>K\u00e9sz\u00edts a <code>CarEmissionInfo</code> oszt\u00e1lyba egy <code>toString()</code> met\u00f3dust \u00e9s \u00edrd ki a konzolra az aut\u00f3k adatait.</li> <li>K\u00e9sz\u00edts egy <code>emission_filtered.csv</code> f\u00e1jlt, amibe az els\u0151 sz\u00e1z aut\u00f3 relev\u00e1ns oszlopait \u00edrd ki:   emission_filtered.csv<pre><code>Make,Model,Engine Size(L),Fuel Type,CO2 Emissions(g/km)\nACURA,ILX,2.4,Z,196\nACURA,ILX,2.4,Z,221\nACURA,ILX HYBRID,1.5,Z,136\nACURA,MDX 4WD,3.5,Z,255\n...\n</code></pre></li> </ul>"},{"location":"java_se_7_ex/#9-feladat","title":"9. Feladat","text":"<p>Az al\u00e1bbi <code>RealEstate</code> oszt\u00e1llyal fogunk dolgozni.</p> <pre><code>public class RealEstate {\nprivate final double area;\nprivate final int numberOfRooms;\npublic RealEstate(double area, int numberOfRooms) {\nthis.area = area;\nthis.numberOfRooms = numberOfRooms;\n}\npublic double getArea() {\nreturn area;\n}\npublic int getNumberOfRooms() {\nreturn numberOfRooms;\n}\n}\n</code></pre> <p>K\u00e9sz\u00edts egy <code>Flat</code> oszt\u00e1lyt, ami a <code>RealEstate</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik \u00e9s b\u0151v\u00edtsd ki a <code>boolean</code> balcony, \u00e9s <code>int</code> level adattagokkal. K\u00e9sz\u00edts hozz\u00e1 param\u00e9teres konstruktort \u00e9s getter met\u00f3dust az \u00faj adattagokhoz. \u00cdrd fel\u00fcl a toString met\u00f3dust, hogy az \u00faj attrib\u00fatumokat is figyelembe vegye.</p> <p>K\u00e9sz\u00edts egy <code>House</code> oszt\u00e1lyt, ami a <code>RealEstate</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik \u00e9s b\u0151v\u00edtsd ki a <code>boolean</code> pool, \u00e9s <code>double</code> gardenArea adattagokkal. K\u00e9sz\u00edts hozz\u00e1 param\u00e9teres konstruktort \u00e9s getter met\u00f3dust az \u00faj adattagokhoz. \u00cdrd fel\u00fcl a toString met\u00f3dust, hogy az \u00faj attrib\u00fatumokat is figyelembe vegye.</p> <p>Vegy\u00fck az al\u00e1bbi csv f\u00e1jlt. Olvassuk be a <code>real_estates.csv</code> f\u00e1jlt \u00e9s hozzunk l\u00e9tre megfelel\u0151 <code>Flat</code> \u00e9s <code>House</code> objektumokat \u00e9s t\u00e1roljuk el egy <code>RealEstate[]</code> t\u00f6mbben. A t\u00f6mb \u00f6sszes elem\u00e9n h\u00edvjuk meg a <code>toString</code> met\u00f3dust. Majd az ingatlan t\u00edpus\u00e1t\u00f3l f\u00fcgg\u0151en \u00edrjuk ki a <code>flat.csv</code> vagy <code>house.csv</code> f\u00e1jlba az \u00f6sszes elemet.</p> real_estates.csv<pre><code>area,number_of_rooms,type,balcony,level,pool,garden_area\n60,2,Flat,1,2,,\n52,3,Flat,0,3,,\n73,4,Flat,1,5,,\n42,1,Flat,0,4,,\n80,5,Flat,1,6,,\n60,2,House,,,0,30\n52,3,House,,,0,54\n73,4,House,,,1,23\n42,1,House,,,0,12\n80,5,House,,,1,130\n</code></pre>"},{"location":"java_se_8_1/","title":"Absztrakt oszt\u00e1lyok \u00e9s interf\u00e9szek","text":""},{"location":"java_se_8_1/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Az objektumorient\u00e1lt programoz\u00e1s alapj\u00e1t az oszt\u00e1lyok haszn\u00e1lata k\u00e9pezi, amelyek lehet\u0151v\u00e9 teszik a k\u00f3db\u00e1zis struktur\u00e1lt fel\u00e9p\u00edt\u00e9s\u00e9t \u00e9s az adatok \u00e9s viselked\u00e9sek hat\u00e9kony kezel\u00e9s\u00e9t. Azonban az eddig megismert oszt\u00e1lyokon t\u00fal tov\u00e1bbi oszt\u00e1ly t\u00edpusok is rendelkez\u00e9s\u00fcnkre \u00e1llnak, hogy m\u00e9lyebben kifejezz\u00fck az \u00f6r\u00f6kl\u0151d\u00e9si \u00e9s viselked\u00e9si kapcsolatokat a programokban. Ebben a fejezetben m\u00e9lyrehat\u00f3an megvizsg\u00e1ljuk az absztrakt oszt\u00e1lyok \u00e9s interf\u00e9szek szerep\u00e9t \u00e9s el\u0151nyeit a Java nyelvben.</p>"},{"location":"java_se_8_1/#absztrakt-osztaly","title":"Absztrakt oszt\u00e1ly","text":"<p>Az absztrakt oszt\u00e1lyok speci\u00e1lis oszt\u00e1lyok, amelyekben lehetnek olyan met\u00f3dusok, melyekhez nincs k\u00f3d rendelve, csak a defin\u00edci\u00f3t \u00edrjuk el\u0151. Nyilv\u00e1nval\u00f3, hogy egy ilyen oszt\u00e1lyt nem tudunk p\u00e9ld\u00e1nyos\u00edtani, hiszen a nem implemet\u00e1lt met\u00f3dusokat nem tudjuk futtatni. Egy absztrakt oszt\u00e1lyb\u00f3l csak lesz\u00e1rmaztatni tudunk oszt\u00e1lyokat, amikben a nem implement\u00e1lt met\u00f3dusokat megval\u00f3s\u00edtjuk az <code>override</code> kullcssz\u00f3val. Ezeket a lesz\u00e1rmaztatott oszt\u00e1lyokat m\u00e1r p\u00e9ld\u00e1nyos\u00edthatjuk. Egyszer\u0171en megfogalmazva az absztrakt oszt\u00e1lyok valamif\u00e9le szerz\u0151d\u00e9sek, amelyek a sz\u00e1rmaztatott oszt\u00e1lyok sz\u00e1m\u00e1ra el\u0151\u00edrnak bizonyos szabv\u00e1nyos viselked\u00e9st.</p> <p>N\u00e9zz\u00fck az al\u00e1bbi oszt\u00e1ly hierarchi\u00e1t:</p> <pre><code>class Vehicle {\nprivate String brand;\nprivate int year;\npublic Vehicle(String brand, int year) {\nthis.brand = brand;\nthis.year = year;\n}\npublic void start() {\nSystem.out.println(\"A j\u00e1rm\u0171 elindult.\");\n}\npublic void stop() {\nSystem.out.println(\"A j\u00e1rm\u0171 le\u00e1llt.\");\n}\npublic void displayInfo() {\nSystem.out.println(\"M\u00e1rka: \" + brand + \", \u00c9v: \" + year);\n}\n}\nclass Car extends Vehicle {\nprivate int numberOfDoors;\npublic Car(String brand, int year, int numberOfDoors) {\nsuper(brand, year);\nthis.numberOfDoors = numberOfDoors;\n}\npublic void honk() {\nSystem.out.println(\"A g\u00e9pkocsi dud\u00e1l.\");\n}\n}\nclass Motorbike extends Vehicle {\nprivate boolean hasSidecar;\npublic Motorbike(String brand, int year, boolean hasSidecar) {\nsuper(brand, year);\nthis.hasSidecar = hasSidecar;\n}\npublic void wheelie() {\nSystem.out.println(\"A motor megemelkedik a h\u00e1ts\u00f3 ker\u00e9k\u00e9n.\");\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nCar car = new Car(\"Toyota\", 2022, 4);\nMotorbike motorbike = new Motorbike(\"Honda\", 2021, false);\ncar.displayInfo();\ncar.start();\ncar.honk();\ncar.stop();\nSystem.out.println();\nmotorbike.displayInfo();\nmotorbike.start();\nmotorbike.wheelie();\nmotorbike.stop();\n}\n}\n</code></pre> <p>Ebben a p\u00e9ld\u00e1ban a <code>Vehicle</code> oszt\u00e1ly \u00e1ltal\u00e1nos j\u00e1rm\u0171 tulajdons\u00e1gokat tartalmaz, mint a m\u00e1rka \u00e9s az \u00e9v. A <code>Car</code> oszt\u00e1ly \u00e9s a <code>Motorbike</code> oszt\u00e1ly mindkett\u0151 a <code>Vehicle</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik, \u00e9s specifikus tulajdons\u00e1gokkal \u00e9s met\u00f3dusokkal rendelkeznek. A <code>Car</code> oszt\u00e1ly p\u00e9ld\u00e1nyai az aut\u00f3hoz kapcsol\u00f3d\u00f3 tulajdons\u00e1gokkal rendelkeznek, mint p\u00e9ld\u00e1ul az ajt\u00f3k sz\u00e1ma, m\u00edg a <code>Motorbike</code> oszt\u00e1ly p\u00e9ld\u00e1nyai a motorhoz kapcsol\u00f3d\u00f3 tulajdons\u00e1gokkal, mint p\u00e9ld\u00e1ul a h\u00e1ts\u00f3 ker\u00e9k emelked\u00e9se.</p> <p>Ebben a p\u00e9ld\u00e1ban a <code>Vehicle</code> oszt\u00e1lyb\u00f3l t\u00f6rt\u00e9n\u0151 objektum l\u00e9trehoz\u00e1snak nincs \u00e9rtelme, hiszen egy elvont fogalom. A val\u00f3di objektumok mindig a <code>Car</code> vagy <code>Motorbike</code> oszt\u00e1lyokb\u00f3l t\u00f6rt\u00e9nnek p\u00e9ld\u00e1nyos\u00edt\u00e1sra. A <code>Vehicle</code> oszt\u00e1lyt, az\u00e9rt hoztuk l\u00e9tre, hogy a <code>Car</code> \u00e9s <code>Motorbike</code> oszt\u00e1ly k\u00f6z\u00f6s tulajdons\u00e1gait \u00e9s met\u00f3dusait kiemelj\u00fck egy \u00e1ltal\u00e1nos form\u00e1ba. Ha olyan oszt\u00e1lyt hozunk l\u00e9tre amib\u0151l nem szeretn\u00e9nk p\u00e9ld\u00e1nyos\u00edtani, csak m\u00e1s gyerek oszt\u00e1lyok k\u00f6z\u00f6s tulajdons\u00e1gait szeretn\u00e9nk kiemelni, akkor oszt\u00e1ly helyett absztrakt oszt\u00e1lyt is l\u00e9trehozhatunk. Az absztrakt oszt\u00e1ly abban k\u00fcl\u00f6nb\u00f6zik a sima oszt\u00e1lyt\u00f3l, hogy nem lehet bel\u0151le p\u00e9ld\u00e1nyt l\u00e9trehozni.</p> <p>Alak\u00edtsuk \u00e1t a fenti p\u00e9ld\u00e1t, hogy a <code>Vehicle</code> oszt\u00e1ly absztrakt oszt\u00e1ly legyen.</p> <pre><code>abstract class Vehicle {\nprivate String brand;\nprivate int year;\npublic Vehicle(String brand, int year) {\nthis.brand = brand;\nthis.year = year;\n}\npublic void start() {\nSystem.out.println(\"A j\u00e1rm\u0171 elindult.\");\n}\npublic void stop() {\nSystem.out.println(\"A j\u00e1rm\u0171 le\u00e1llt.\");\n}\npublic void displayInfo() {\nSystem.out.println(\"M\u00e1rka: \" + brand + \", \u00c9v: \" + year);\n}\n}\n// ...\n</code></pre> <p>Absztrakt oszt\u00e1lyt az <code>abstract</code> kulcssz\u00f3val tudunk l\u00e9trehozni. Ahogy a p\u00e9ld\u00e1ban l\u00e1tjuk, nem kellett m\u00f3dos\u00edtani az oszt\u00e1lyon vagy a bel\u0151le sz\u00e1rmazott oszt\u00e1lyon az\u00e9rt, mert absztrakt oszt\u00e1lyt csin\u00e1ltunk a <code>Vehicle</code> oszt\u00e1lyb\u00f3l m\u00e9g a konstruktor is megmaradt, amit a gyerek oszt\u00e1lyokban ki kell el\u00e9g\u00edteni, azonban a ford\u00edt\u00f3 nem engedi nek\u00fcnk, hogy p\u00e9ld\u00e1nyt hozzunk l\u00e9tre az absztrakt oszt\u00e1lyb\u00f3l.</p>"},{"location":"java_se_8_1/#absztrakt-metodusok","title":"Absztrakt met\u00f3dusok","text":"<p>Az absztrakt oszt\u00e1lyoknak m\u00e1s el\u0151nye is van a sima oszt\u00e1lyokkal szemben. Lehet\u0151s\u00e9g\u00fcnk van absztrakt met\u00f3dusokat l\u00e9trehozni. Az absztrakt met\u00f3dusokat az absztrakt oszt\u00e1lyok olyan v\u00e1zlatk\u00e9nt haszn\u00e1lj\u00e1k, amelyekb\u0151l az \u00f6r\u00f6kl\u0151d\u0151 lesz\u00e1rmazott oszt\u00e1lyoknak implement\u00e1lniuk kell ezeket a met\u00f3dusokat.</p> <p>Az absztrakt met\u00f3dusokat az <code>abstract</code> kulcssz\u00f3val jel\u00f6lj\u00fck meg az absztrakt oszt\u00e1lyon bel\u00fcl, \u00e9s nem tartalmaznak implement\u00e1ci\u00f3t, csak a met\u00f3dus fejl\u00e9c\u00e9t defini\u00e1lj\u00e1k. Az absztrakt met\u00f3dusokat a lesz\u00e1rmazott oszt\u00e1lyoknak k\u00f6telez\u0151en fel\u00fcl kell \u00edrniuk (implement\u00e1lniuk), k\u00fcl\u00f6nben a lesz\u00e1rmazott oszt\u00e1ly is absztrakt oszt\u00e1lly\u00e1 v\u00e1lik.</p> <p>Az absztrakt met\u00f3dusok hasznosak olyan esetekben, amikor az absztrakt oszt\u00e1lyban szeretn\u00e9nk k\u00f6z\u00f6s viselked\u00e9st deklar\u00e1lni, de az implement\u00e1ci\u00f3t a lesz\u00e1rmazott oszt\u00e1lyokra szeretn\u00e9nk b\u00edzni. Ez lehet\u0151v\u00e9 teszi a lesz\u00e1rmazott oszt\u00e1lyoknak, hogy a saj\u00e1t specifikus viselked\u00e9s\u00fcket adj\u00e1k hozz\u00e1 az absztrakt met\u00f3dusokhoz.</p> <p>N\u00e9zz\u00fck az al\u00e1bbi p\u00e9ld\u00e1t:</p> <pre><code>abstract class Shape {\nabstract double calculateArea(); // (1)\n}\nclass Circle extends Shape {\nprivate double radius;\npublic Circle(double radius) {\nthis.radius = radius;\n}\n@Override\ndouble calculateArea() { // (2)\nreturn Math.PI * radius * radius;\n}\n}\nclass Rectangle extends Shape {\nprivate double width;\nprivate double height;\npublic Rectangle(double width, double height) {\nthis.width = width;\nthis.height = height;\n}\n@Override\ndouble calculateArea() { // (3)\nreturn width * height;\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nCircle circle = new Circle(5);\nRectangle rectangle = new Rectangle(4, 6);\nSystem.out.println(\"Circle area: \" + circle.calculateArea());\nSystem.out.println(\"Rectangle area: \" + rectangle.calculateArea());\n}\n}\n</code></pre> <ol> <li>Absztrakt met\u00f3dus deklar\u00e1ci\u00f3</li> <li>Az absztrakt met\u00f3dus implement\u00e1ci\u00f3ja a Circle oszt\u00e1lyban</li> <li>Az absztrakt met\u00f3dus implement\u00e1ci\u00f3ja a Rectangle oszt\u00e1lyban</li> </ol> <p>Ahogy a p\u00e9ld\u00e1n l\u00e1tjuk a <code>Circle</code> \u00e9s <code>Rectangle</code> oszt\u00e1lyok mindkett\u0151 a <code>Shape</code> oszt\u00e1lyb\u00f3l sz\u00e1rmaznak, \u00e9s implement\u00e1lj\u00e1k a saj\u00e1t calculateArea met\u00f3dusukat a specifikus viselked\u00e9s kifejez\u00e9s\u00e9re. Ahogy a kor\u00e1bbi <code>Vehicle</code> oszt\u00e1lyn\u00e1l is a <code>Shape</code> oszt\u00e1ly absztrakt oszt\u00e1ly. A ter\u00fclet sz\u00e1m\u00edt\u00e1s nincs \u00e9rtelmezve egy elvont fogalom eset\u00e9n, ez\u00e9rt a <code>calculateArea()</code> met\u00f3dusnak nem tudunk implement\u00e1ci\u00f3t adni az \u0151soszt\u00e1lyon bel\u00fcl, azonban minden alakzat rendelkezik ter\u00fclettel, ez\u00e9rt a konkr\u00e9t oszt\u00e1lyokban m\u00e1r \u00e9rtelmezett a met\u00f3dus. Ahhoz, hogy biztos\u00edtsuk, hogy minden <code>Shape</code> b\u0151l sz\u00e1rmaz\u00f3 alakzaton tudjunk ter\u00fcletet sz\u00e1molni a met\u00f3dust absztraktt\u00e1 tessz\u00fck, \u00edgy a lesz\u00e1rmazott oszt\u00e1lyoknak fel\u00fcl kell \u00edrniuk a met\u00f3dust.</p>"},{"location":"java_se_8_1/#interface","title":"Interface","text":"<p>Az <code>interface</code> nem oszt\u00e1ly, hanem egy t\u00edpus, mely nem tartalmaz semmilyen k\u00f3dot, csak tulajdons\u00e1gok \u00e9s met\u00f3dusok szignat\u00far\u00e1j\u00e1t, defin\u00edci\u00f3j\u00e1t. Az oszt\u00e1lynak, mely implement\u00e1lja az adott <code>interface</code>-t, k\u00f6telez\u0151en tartalmaznia kell a tulajdons\u00e1gokat \u00e9s meg kell val\u00f3s\u00edtani az <code>interface</code>-ben lev\u0151 met\u00f3dusokat. Ez\u00e9rt, ha egy oszt\u00e1ly implemet\u00e1l egy <code>interface</code>-t, biztosak lehet\u00fcnk benne, hogy tartalmazza azokat a met\u00f3dusokat \u00e9s tulajdons\u00e1gokat, melyet az <code>interface</code> -ben el\u0151\u00edrtunk ez\u00e9rt tekinthet\u00fcnk az interface-ekre szerz\u0151d\u00e9sk\u00e9nt ami el\u0151\u00edrja bizonyos met\u00f3dusok jelenl\u00e9t\u00e9t.</p> <p>Egy oszt\u00e1ly t\u00f6bb <code>interface</code>-t is implement\u00e1lhat, ez\u00e1ltal k\u00f6zel hasonl\u00f3an viselkedhet, mintha t\u00f6bb sz\u00fcl\u0151je lenne, azonban mivel az <code>interface</code>-ban el\u0151\u00edrt met\u00f3dusok nem tartalmaznak met\u00f3dus t\u00f6rzset csak a met\u00f3dus el\u0151\u00edr\u00e1s\u00e1t, \u00edgy nem tal\u00e1lkozunk a t\u00f6bbsz\u00f6r\u00f6s \u00f6r\u00f6kl\u0151d\u00e9s okozta probl\u00e9m\u00e1val.</p> <p>Ha egy <code>interface</code>-ben mez\u0151ket is defini\u00e1lunk, akkor azok impliciten publikusak, statikusak \u00e9s finalok lesznek. Erre az\u00e9rt van sz\u00fcks\u00e9g, mert az <code>interface</code>-ek nem p\u00e9ld\u00e1nyos\u00edthat\u00f3ak, konstruktoruk sem lehet, \u00edgy a legval\u00f3sz\u00edn\u0171bb eset az, hogy az adattagokat mindenki sz\u00e1m\u00e1ra el\u00e9rhet\u0151k\u00e9nt szeretn\u00e9nk tenni <code>public</code>, ha nem lehet \u0151ket objektum p\u00e9ld\u00e1nyhoz k\u00f6tni, akkor csak az oszt\u00e1lyhoz k\u00f6thetj\u00fck \u0151ket <code>static</code>, \u00e9s hogy mindenk\u00e9pp legyenek inicializ\u00e1lva konstruktor hi\u00e1ny\u00e1ban is <code>final</code>.</p> <pre><code>interface Task {\nvoid execute();\nString getType();\n}\nclass CodingTask implements Task {\n@Override\npublic void execute() {\nSystem.out.println(\"K\u00f3dol\u00e1si feladat v\u00e9grehajt\u00e1sa...\");\n}\n@Override\npublic String getType() {\nreturn \"K\u00f3dol\u00e1s\";\n}\n}\nclass DesignTask implements Task {\n@Override\npublic void execute() {\nSystem.out.println(\"Tervez\u00e9si feladat v\u00e9grehajt\u00e1sa...\");\n}\n@Override\npublic String getType() {\nreturn \"Tervez\u00e9s\";\n}\n}\nclass TestingTask implements Task {\n@Override\npublic void execute() {\nSystem.out.println(\"Tesztel\u00e9si feladat v\u00e9grehajt\u00e1sa...\");\n}\n@Override\npublic String getType() {\nreturn \"Tesztel\u00e9s\";\n}\n}\nclass TaskManager {\nvoid processTask(Task task) {\nSystem.out.println(\"Kezdeti l\u00e9p\u00e9sek a(z) \" + task.getType() + \" feladat kezel\u00e9s\u00e9hez.\");\ntask.execute();\nSystem.out.println(\"Feladatkezel\u00e9s befejezve.\");\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nTask codingTask = new CodingTask();\nTask designTask = new DesignTask();\nTask testingTask = new TestingTask();\nTaskManager taskManager = new TaskManager();\ntaskManager.processTask(codingTask);\nSystem.out.println();\ntaskManager.processTask(designTask);\nSystem.out.println();\ntaskManager.processTask(testingTask);\n}\n}\n</code></pre> <p>Ebben a p\u00e9ld\u00e1ban van egy <code>Task interface</code>, amelyet a <code>CodingTask</code>, <code>DesignTask</code> \u00e9s <code>TestingTask</code> oszt\u00e1lyok implement\u00e1lnak. Az <code>interface</code> defini\u00e1lja az <code>execute</code> met\u00f3dust a feladatok v\u00e9grehajt\u00e1s\u00e1hoz \u00e9s a <code>getType</code> met\u00f3dust a feladat t\u00edpus\u00e1nak lek\u00e9r\u00e9s\u00e9hez. A <code>TaskManager</code> oszt\u00e1ly egy <code>processTask</code> met\u00f3dussal rendelkezik, amelyet b\u00e1rmely feladat t\u00edpus\u00e1val haszn\u00e1lhatunk a feladatok kezel\u00e9s\u00e9hez, mert azok mind megval\u00f3s\u00edtj\u00e1k a <code>Task interface</code>-t.</p>"},{"location":"java_se_8_1/#java-8-ujitasok","title":"Java 8 \u00faj\u00edt\u00e1sok","text":"<p>Fontos megjegyezni, hogy a Java 8 el\u0151tti id\u0151szakban az <code>interface</code>-k t\u00f6rzs n\u00e9lk\u00fcli met\u00f3dusokat tartalmaztak. Azonban a Java 8 megjelen\u00e9s\u00e9vel megny\u00edlt a lehet\u0151s\u00e9g arra, hogy egyes met\u00f3dusokat implement\u00e1ljunk k\u00f6zvetlen\u00fcl az <code>interface</code>-ekben is. Ezt a v\u00e1ltoztat\u00e1st az indokolta, hogy sok esetben sz\u00fcks\u00e9g volt \u00faj met\u00f3dusok bevezet\u00e9s\u00e9re az <code>interface</code>-ekben, azonbanha az \u00faj met\u00f3dusokat egyszer\u0171en hozz\u00e1adt\u00e1k volna az <code>interface</code>-ekhez, akkor a m\u00f3dos\u00edtott <code>interface</code>-ek nem lettek volna kompatibilek a r\u00e9gi k\u00f3ddal.</p> <p>A <code>default</code> kulcssz\u00f3 alkalmaz\u00e1sa lehet\u0151v\u00e9 teszi az <code>interface</code>-ekben deklar\u00e1lt met\u00f3dusoknak, hogy saj\u00e1t t\u00f6rzs\u00fck lehessen. Ezzel megjel\u00f6lj\u00fck, hogy ezek a met\u00f3dusok nem absztrakt met\u00f3dusok, vagyis az implement\u00e1l\u00f3 oszt\u00e1lyban lehet\u0151s\u00e9g van fel\u00fcl\u00edrni \u0151ket, de ez nem k\u00f6telez\u0151. Ha az <code>interface</code> met\u00f3dus\u00e1hoz <code>static</code> kulcssz\u00f3t rendel\u00fcnk, akkor az implement\u00e1l\u00f3 oszt\u00e1lyban nem \u00edrhat\u00f3 fel\u00fcl, r\u00e1ad\u00e1sul a met\u00f3dusra az <code>interface</code> nev\u00e9n kereszt\u00fcl is hivatkozhatunk.</p> <pre><code>interface Vehicle {\nvoid start();\nvoid stop();\ndefault void honk() {\nSystem.out.println(\"Tututu!\");\n}\n}\nclass Car implements Vehicle {\n@Override\npublic void start() {\nSystem.out.println(\"Az aut\u00f3 elindult.\");\n}\n@Override\npublic void stop() {\nSystem.out.println(\"Az aut\u00f3 le\u00e1llt.\");\n}\n}\nclass Motorbike implements Vehicle {\n@Override\npublic void start() {\nSystem.out.println(\"A motorker\u00e9kp\u00e1r elindult.\");\n}\n@Override\npublic void stop() {\nSystem.out.println(\"A motorker\u00e9kp\u00e1r le\u00e1llt.\");\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nCar car = new Car();\nMotorbike motorbike = new Motorbike();\ncar.start();\ncar.honk();\ncar.stop();\nSystem.out.println();\nmotorbike.start();\nmotorbike.honk();\nmotorbike.stop();\n}\n}\n</code></pre> <p>Ebben a p\u00e9ld\u00e1ban az <code>Vehicle interface</code> deklar\u00e1l k\u00e9t absztrakt met\u00f3dust, <code>start</code> \u00e9s <code>stop</code>, amelyeket az implement\u00e1l\u00f3 oszt\u00e1lyoknak (<code>Car</code> \u00e9s <code>Motorbike</code>) implement\u00e1lniuk kell. Az <code>interface</code> tov\u00e1bb\u00e1 tartalmaz egy <code>default</code> met\u00f3dust, <code>honk</code>, amely alap\u00e9rtelmezett dudahangot ad vissza.</p> <p>Mind a <code>Car</code> oszt\u00e1ly, mind a <code>Motorbike</code> oszt\u00e1ly megval\u00f3s\u00edtja az <code>Vehicle</code> <code>interface</code>-t. Mindk\u00e9t oszt\u00e1ly implement\u00e1lja a <code>start</code> \u00e9s <code>stop</code> met\u00f3dusokat, \u00e9s \u00f6r\u00f6kli a <code>honk</code> met\u00f3dust az <code>interface</code>-b\u0151l.</p>"},{"location":"java_se_8_1/#java-9-ujitasok","title":"Java 9 \u00faj\u00edt\u00e1sok","text":"<p>Azzal, hogy Java 8-ban hozott \u00faj\u00edt\u00e1snak k\u00f6sz\u00f6nhet\u0151en az <code>interface</code>-ekbe beker\u00fclhettek a t\u00f6rzzsel rendelkez\u0151 met\u00f3dusok is, \u00e9rtelm\u00e9t veszti, hogy ne lehessen priv\u00e1t met\u00f3dust defini\u00e1lni egy <code>interface</code>-en bel\u00fcl. A <code>default</code> \u00e9s <code>statikus</code> met\u00f3dusokon kereszt\u00fcl imm\u00e1r a priv\u00e1t met\u00f3dusok el\u00e9rhet\u0151ek lehetnek, \u00cdgy a Java 9-es verzi\u00f3j\u00e1t\u00f3l kezdve lehet\u0151s\u00e9g\u00fcnk van priv\u00e1t met\u00f3dust is deklar\u00e1lni az <code>interface</code>-ekben.</p>"},{"location":"java_se_8_1/#absztrakt-osztaly-vagy-interface","title":"Absztrakt oszt\u00e1ly vagy Interface","text":"<p>N\u00e9ha bonyolult lehet eld\u00f6nteni, hogy az adott probl\u00e9ma megold\u00e1s\u00e1hoz <code>interface</code>-t vagy absztrakt oszt\u00e1lyt haszn\u00e1ljunk. Az al\u00e1bbi t\u00e1bl\u00e1zatban l\u00e1thatj\u00e1tok az absztrakt oszt\u00e1ly \u00e9s <code>interface</code> k\u00f6zti k\u00fcl\u00f6nbs\u00e9geket, amelyeket ment\u00e9n egyszer\u0171bben tudtuk d\u00f6nt\u00e9st hozni.</p> Interface Absztrakt oszt\u00e1ly nem tartalmazhat adattagot adattagok \u00e9s konstansok is defini\u00e1lhat\u00f3k nem p\u00e9ld\u00e1nyos\u00edthat\u00f3 nem p\u00e9ld\u00e1nyos\u00edthat\u00f3 nem lehet konstuktora lehet konstruktora az oszt\u00e1lyok megval\u00f3s\u00edthatnak t\u00f6bb interface-t, ugyanazt az interface-t megval\u00f3s\u00edthatja t\u00f6bb oszt\u00e1ly. egy oszt\u00e1ly csak egy absztrakt oszt\u00e1lyb\u00f3l sz\u00e1rmazhat, ugyanaz az absztrakt oszt\u00e1ly t\u00f6bb oszt\u00e1lynak is az \u0151se lehet az interface-t megval\u00f3s\u00edt\u00f3 oszt\u00e1lynak az \u00f6sszes met\u00f3dust meg kell val\u00f3s\u00edtania. az absztrakt oszt\u00e1lyb\u00f3l sz\u00e1rmaz\u00f3 oszt\u00e1ly lehet szint\u00e9n absztrakt, akkor nem kell minden \u0151soszt\u00e1lybeli met\u00f3dust implement\u00e1lnia. Ha a lesz\u00e1rmaztatott oszt\u00e1ly nem absztrakt, akkor k\u00f6telez\u0151 az \u00f6sszes absztrakt met\u00f3dust megval\u00f3s\u00edtania Interface csak interface lesz\u00e1rmazottja lehet. Absztrakt oszt\u00e1lyb\u00f3l sz\u00e1rmazhat absztrakt vagy nem absztrakt oszt\u00e1ly is Az interface-ek egy oszt\u00e1ly perif\u00e9ri\u00e1s k\u00e9pess\u00e9geit hat\u00e1rozz\u00e1k meg. P\u00e9ld\u00e1ul egy ember \u00e9s egy j\u00e1rm\u0171 is megval\u00f3s\u00edthatja az IMozoghat interface-t. Egy absztrakt oszt\u00e1ly az oszt\u00e1ly alapvet\u0151 identit\u00e1s\u00e1t defin\u00e1lja, a lesz\u00e1rmaztatott objektumok azonos t\u00edpus\u00faak. Ha a k\u00fcl\u00f6nb\u00f6z\u0151 implemet\u00e1ci\u00f3k csak a met\u00f3dusok szignat\u00far\u00e1j\u00e1ban egyeznek, a megval\u00f3s\u00edt\u00e1sban l\u00e9nyegesen k\u00fcl\u00f6nb\u00f6znek, ink\u00e1bb interface-t haszn\u00e1ljunk Ha a k\u00fcl\u00f6nb\u00f6z\u0151 implement\u00e1ci\u00f3k hasonl\u00f3an viselkednek, ink\u00e1bb az absztrakt oszt\u00e1ly haszn\u00e1latos. Lassabb Gyorsabb"},{"location":"java_se_8_1_ex/","title":"Absztrakt oszt\u00e1lyok \u00e9s interf\u00e9szek gyakorl\u00f3 feladatok","text":""},{"location":"java_se_8_1_ex/#1-feladat","title":"1. Feladat","text":"<p>Hozz l\u00e9tre egy absztrakt Pet oszt\u00e1lyt, ami egy h\u00e1zikedvencet fog reprezent\u00e1lni. A Pet oszt\u00e1lynak legyen egy <code>int</code> numberOfLegs \u00e9s egy <code>String</code> name adattagja \u00e9s tartalmazzon egy absztrakt <code>sound()</code> met\u00f3dust.</p> <p>Hozz l\u00e9tre <code>Dog</code> \u00e9s <code>Cat</code> alaposzt\u00e1lyokat, amelyek a <code>Pet</code> oszt\u00e1lyb\u00f3l sz\u00e1rmaznak. \u00cdrd fel\u00fcl a <code>sound</code> met\u00f3dust a kutya eset\u00e9n \u00edrja ki a konzolra, hogy \"Vau\" macska eset\u00e9n pedig, hogy \"Miau\".</p> <p>Hozz l\u00e9tre egy t\u00f6mb\u00f6t ami k\u00e9t <code>Pet</code> objektumot t\u00e1rol \u00e9s t\u00f6ltsd fel egy <code>Dog</code> \u00e9s egy <code>Cat</code> objektummal. Menj v\u00e9gig a list\u00e1n \u00e9s h\u00edvd meg mindk\u00e9t objektumon a <code>sound</code> met\u00f3dust.</p>"},{"location":"java_se_8_1_ex/#2-feladat","title":"2. Feladat","text":"<p>Hozz l\u00e9tre egy <code>Presentable</code> interf\u00e9szt, ami el\u0151\u00edr egy <code>void present()</code> met\u00f3dost. A met\u00f3dos feladata, hogy megjelen\u00edtse az objektumot a konzol kimeneten. Hozz l\u00e9tre k\u00e9t oszt\u00e1lyt, aminek van legal\u00e1bb 3 k\u00fcl\u00f6nb\u00f6z\u0151 attrib\u00fatuma. K\u00e9sz\u00edts param\u00e9teres <code>konstruktort</code> az oszt\u00e1lyokhoz \u00e9s <code>getter-setter</code> met\u00f3dusokat is. Val\u00f3s\u00edtsd meg a <code>toString</code> met\u00f3dust \u00e9s implement\u00e1ld a present met\u00f3dust is. A <code>present</code> met\u00f3dus, m\u00e1s szerkezetbe \u00edrja ki a konzolra az adatokat mint a <code>toString</code>.</p>"},{"location":"java_se_8_2/","title":"Generikus t\u00edpusok","text":""},{"location":"java_se_8_2/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A Java 5 egyik kulcsfontoss\u00e1g\u00fa \u00faj\u00edt\u00e1sa a generikus t\u00edpusok behozatala a Java nyelvbe. A generikus t\u00edpusok lehet\u0151v\u00e9 teszik a programoz\u00f3k sz\u00e1m\u00e1ra, hogy \u00e1ltal\u00e1nos, \u00fajrafelhaszn\u00e1lhat\u00f3 \u00e9s t\u00edpusbiztos k\u00f3dot \u00edrjanak olyan helyzetekben, ahol k\u00fcl\u00f6nb\u00f6z\u0151 t\u00edpus\u00fa adatokkal dolgoznak. Ez a fejezet m\u00e9lyebben bemutatja a generikus t\u00edpusok fogalm\u00e1t, alkalmaz\u00e1sukat \u00e9s el\u0151nyeiket.</p>"},{"location":"java_se_8_2/#generikus-tipusok-hasznalata","title":"Generikus t\u00edpusok haszn\u00e1lata","text":"<p>A generikus t\u00edpusok lehet\u0151v\u00e9 teszik, hogy oszt\u00e1lyokat, interf\u00e9szeket \u00e9s met\u00f3dusokat \u00edrjunk, amelyek param\u00e9terk\u00e9nt egy \u00e1ltal\u00e1nos t\u00edpust fogadnak be, an\u00e9lk\u00fcl, hogy el\u0151re defini\u00e1ln\u00e1nk a konkr\u00e9t t\u00edpust. Ennek eredm\u00e9nyek\u00e9nt a k\u00f3d \u00fajrafelhaszn\u00e1lhat\u00f3 \u00e9s rugalmasabb lesz, mivel ugyanazt a k\u00f3dot t\u00f6bbf\u00e9le t\u00edpussal haszn\u00e1lhatjuk.</p> <p>A generikus t\u00edpusok haszn\u00e1lat\u00e1val a programoz\u00f3k meg\u0151rizhetik a t\u00edpusbiztons\u00e1got, \u00e9s cs\u00f6kkenthetik a t\u00edpushib\u00e1k kock\u00e1zat\u00e1t. A ford\u00edt\u00e1si id\u0151ben t\u00f6rt\u00e9n\u0151 t\u00edpusellen\u0151rz\u00e9s biztos\u00edtja, hogy a k\u00f3d csak az el\u0151re defini\u00e1lt t\u00edpusokkal kompatibilis adatokkal m\u0171k\u00f6dj\u00f6n.</p> <p>Generikus t\u00edpusokat az\u00e9rt haszn\u00e1lunk, hogy a programoz\u00f3 ne legyen k\u00f6tve a konkr\u00e9t t\u00edpusokhoz, hanem egy \u00e1ltal\u00e1nosabb megold\u00e1st tudjon alkalmazni, amely t\u00f6bbf\u00e9le t\u00edpussal is m\u0171k\u00f6dik. Ez k\u00fcl\u00f6n\u00f6sen hasznos adatszerkezetek (pl. list\u00e1k, vermek, sorok) \u00e9s algoritmusok eset\u00e9n, ahol a k\u00f3d egy \u00e1ltal\u00e1nos megk\u00f6zel\u00edt\u00e9st alkalmaz, f\u00fcggetlen\u00fcl att\u00f3l, hogy milyen t\u00edpus\u00fa adatokkal dolgozik \u00e9ppen.</p>"},{"location":"java_se_8_2/#generikus-osztalyok","title":"Generikus oszt\u00e1lyok","text":"<pre><code>public class GenericList&lt;T&gt; { // (1)\nprivate Object[] elements; // (2)\nprivate int size; // (3)\nprivate static final int DEFAULT_CAPACITY = 10; // (4)\npublic GenericList() {\nelements = new Object[DEFAULT_CAPACITY];\nsize = 0;\n}\npublic void add(T element) { // (5)\nif (size == elements.length) {\nresize();\n}\nelements[size++] = element;\n}\npublic T get(int index) { // (6)\nif (index &lt; 0 || index &gt;= size) {\nthrow new IndexOutOfBoundsException(\"Invalid index: \" + index);\n}\nreturn (T) elements[index];\n}\npublic int size() { // (7)\nreturn size;\n}\nprivate void resize() { // (8)\nint newCapacity = elements.length * 2;\nelements = java.util.Arrays.copyOf(elements, newCapacity);\n}\npublic static void main(String[] args) {\nGenericList&lt;String&gt; stringList = new GenericList&lt;&gt;(); // (9)\nstringList.add(\"Apple\");\nstringList.add(\"Banana\");\nstringList.add(\"Orange\");\nfor (int i = 0; i &lt; stringList.size(); i++) {\nSystem.out.println(stringList.get(i));\n}\nGenericList&lt;Integer&gt; intList = new GenericList&lt;&gt;(); // (10)\nintList.add(10);\nintList.add(20);\nintList.add(30);\nfor (int i = 0; i &lt; intList.size(); i++) {\nSystem.out.println(intList.get(i));\n}\n}\n}\n</code></pre> <ol> <li>Az oszt\u00e1lyunkat kib\u0151v\u00edtj\u00fck a generikus <code>&lt;T&gt;</code> param\u00e9terrel.</li> <li>L\u00e9trehozunk egy Object t\u00f6mb\u00f6t az elemeknek.</li> <li>A <code>size</code> v\u00e1ltoz\u00f3 t\u00e1rolja a kollekci\u00f3nk aktu\u00e1lis m\u00e9ret\u00e9t.</li> <li>A <code>DEFAULT_CAPACITY</code> konstans t\u00e1rolja a kollekci\u00f3nk kezd\u0151 kapacit\u00e1s\u00e1t.</li> <li>L\u00e9trehozunk egy <code>add</code> met\u00f3dust ami a generikus <code>T</code> t\u00edpus\u00fa objektumot fogad. \u00c9s megpr\u00f3b\u00e1lja elhelyezni a kollekci\u00f3ban.    Ha nincs el\u00e9g hely, akkor megh\u00edvja a <code>resize</code> met\u00f3dust.</li> <li>L\u00e9trehozunk egy <code>get</code> met\u00f3dust ami a generikus <code>T</code> t\u00edpus\u00fa objektummal t\u00e9r vissza. Ha olyan indexet kap, ami k\u00edv\u00fcl    esik a t\u00f6mb intervallum\u00e1n egy <code>IndexOutOfBoundsException</code> keletkezik.</li> <li>Visszat\u00e9r a list\u00e1nk aktu\u00e1lis m\u00e9ret\u00e9vel.</li> <li>Ha nincs el\u00e9g hely a list\u00e1nkban, akkor az elemek t\u00e1rol\u00e1s\u00e1ra l\u00e9trehoz egy \u00faj t\u00f6mb\u00f6t k\u00e9tszer akkor m\u00e9rettel, majd    \u00e1tm\u00e1solja az elemeket az \u00faj list\u00e1ba.</li> <li>L\u00e9trehozunk egy <code>GenericList</code> objektumot <code>&lt;String&gt;</code> t\u00edpusk\u00f6t\u00e9ssel.</li> <li>L\u00e9trehozunk egy <code>GenericList</code> objektumot <code>&lt;Integer&gt;</code> t\u00edpusk\u00f6t\u00e9ssel.</li> </ol> <p>A kor\u00e1bbi \u00f3r\u00e1k alkalm\u00e1val t\u00f6bbsz\u00f6r hoztunk l\u00e9tre hasonl\u00f3 adatszerkezetet, hogy valamilyen oszt\u00e1ly p\u00e9ld\u00e1nyait el tudjuk t\u00e1rolni egy dinamikus list\u00e1ban. A generikus t\u00edpusok haszn\u00e1lat\u00e1val lehet\u0151s\u00e9g\u00fcnk van egy \u00e1ltal\u00e1nos megold\u00e1s elk\u00e9sz\u00edt\u00e9s\u00e9re, amit k\u00e9s\u0151bb b\u00e1rmilyen t\u00edpus\u00fa objektum elt\u00e1rol\u00e1s\u00e1ra tudunk haszn\u00e1lni.</p>"},{"location":"java_se_8_2/#generikus-metodusok","title":"Generikus met\u00f3dusok","text":"<pre><code>public class GenericMethod {\npublic static &lt;T&gt; boolean equalTo(T t1, T t2) { // (1)\nreturn t1.equals(t2);\n}\npublic static void main(String[] args) {\nboolean egyenlo_1 = GenericMethod.&lt;String&gt;equalTo(\"Alma\", \"K\u00f6rte\"); // (2)\nboolean egyenlo_2 = GenericMethod.&lt;Integer&gt;equalTo(6, 8); boolean egyenlo_3 = GenericMethod.&lt;Integer&gt;equalTo(4, 6.4); // (3)\n}\n}\n</code></pre> <ol> <li>Az <code>equalTo</code> met\u00f3dusunkat kib\u0151v\u00edtj\u00fck a generikus <code>&lt;T&gt;</code> param\u00e9terrel, majd k\u00e9t generikus t\u00edpus\u00fa objektumot v\u00e1runk    param\u00e9ter\u00fcl.</li> <li>A met\u00f3dus h\u00edv\u00e1sakor le tudjuk k\u00f6tni a generikus param\u00e9tert.</li> <li>Ha lek\u00f6tj\u00fck a generikus param\u00e9tert, viszont olyan objektumokkal pr\u00f3b\u00e1ljuk h\u00edvni a met\u00f3dus, amik nem    olyan t\u00edpus\u00faak ford\u00edt\u00e1si hib\u00e1t kapunk.</li> </ol> <p>A generikus oszt\u00e1lyokon t\u00fal lehet\u0151s\u00e9g\u00fcnk van generikus met\u00f3dusok l\u00e9trehoz\u00e1s\u00e1ra is. A generikus t\u00edpus jel\u00f6l\u00e9st az oszt\u00e1lyokhoz hasonl\u00f3an a <code>&lt;&gt;</code> gy\u00e9m\u00e1nt oper\u00e1torral tudjuk jel\u00f6lni a met\u00f3dus szignat\u00far\u00e1j\u00e1ban.</p>"},{"location":"java_se_8_2/#generikus-nev-konvenciok","title":"Generikus n\u00e9v konvenci\u00f3k","text":"<p>A generikus t\u00edpus jel\u00f6l\u00e9s\u00e9re b\u00e1rmilyen karaktert haszn\u00e1lhatunk azonban a Javaban van n\u00e9h\u00e9ny generikus t\u00edpus n\u00e9v konvenci\u00f3 amihez, ha tartjuk magunkat megseg\u00edtj\u00fck a t\u00f6bbi fejleszt\u0151 munk\u00e1j\u00e1t. \u00cdgy ha tehetj\u00fck az al\u00e1bbi esetekben haszn\u00e1ljuk a konvenci\u00f3 szerinti jel\u00f6l\u00e9st.</p> <ul> <li><code>E</code> - Elem (Element)</li> <li><code>K</code> - Kulcs  (Key)</li> <li><code>N</code> - Sz\u00e1m (Number)</li> <li><code>T</code> - T\u00edpus (Type)</li> <li><code>V</code> - \u00c9rt\u00e9k (Value)</li> <li><code>S</code>, <code>U</code> stb. - Tov\u00e1bbi t\u00edpusok</li> </ul>"},{"location":"java_se_8_2/#generikus-tipus-korlatozas","title":"Generikus t\u00edpus korl\u00e1toz\u00e1s","text":"<p>A generikus t\u00edpus korl\u00e1toz\u00e1s lehet\u0151s\u00e9get ny\u00fajt arra, hogy megadjuk, hogy a generikus t\u00edpusparam\u00e9ter milyen t\u00edpusokat fogadhat el vagy milyen felt\u00e9teleknek kell megfelelnie. Ez seg\u00edt pontosabban szab\u00e1lyozni a generikus k\u00f3d viselked\u00e9s\u00e9t \u00e9s hozz\u00e1adni bizonyos t\u00edpusbiztons\u00e1got.</p> <pre><code>public class GenericSorting {\npublic static &lt;T extends Comparable&lt;T&gt;&gt; void bubbleSort(T[] array) { // (1)\nint n = array.length;\nfor (int i = 0; i &lt; n - 1; i++) { // (2)\nfor (int j = 0; j &lt; n - i - 1; j++) {\nif (array[j].compareTo(array[j + 1]) &gt; 0) {\nT temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\n}\npublic static void main(String[] args) {\nInteger[] intArray = {5, 2, 9, 1, 5, 6}; // (3)\nString[] strArray = {\"Banana\", \"Apple\", \"Orange\", \"Grapes\"}; // (4)\nSystem.out.println(\"Integer t\u00f6mb rendez\u00e9se:\");\nbubbleSort(intArray); // (5)\nfor (int num : intArray) {\nSystem.out.print(num + \" \");\n}\nSystem.out.println();\nSystem.out.println(\"String t\u00f6mb rendez\u00e9se:\");\nbubbleSort(strArray); // (6)\nfor (String str : strArray) {\nSystem.out.print(str + \" \");\n}\n}\n}\n</code></pre> <ol> <li> <p>A <code>bubbleSort</code> met\u00f3dusunkat kib\u0151v\u00edtj\u00fck a generikus <code>&lt;T extends Comparable&lt;T&gt;&gt;</code> param\u00e9terrel. Az <code>extends</code> kulcssz\u00f3    alkalmaz\u00e1s\u00e1val el\u0151\u00edrjuk, hogy az a t\u00edpus, amit \u00e1tadunk a generikus met\u00f3dusnak meg kell, hogy val\u00f3s\u00edtsa a <code>Comparable</code>    interf\u00e9szt. Maga a <code>Comparable</code> interf\u00e9sz is generikus t\u00edpus\u00fa, ez\u00e9rt \u00e1tadjuk az \u0151 generikus t\u00edpus\u00e1nak az \u00e1ltalunk    defini\u00e1lt <code>T</code> t\u00edpust.</p> </li> <li> <p>A bubor\u00e9kos rendez\u00e9si algoritmus implement\u00e1ci\u00f3ja.</p> </li> <li>L\u00e9trehozunk egy sz\u00e1mokat tartalmaz\u00f3 t\u00f6mb\u00f6t.</li> <li>L\u00e9trehozunk egy sz\u00f6vegeket tartalmaz\u00f3 t\u00f6mb\u00f6t.</li> <li>Megh\u00edvjuk a rendez\u00e9si algoritmusunkat a sz\u00e1mokat tartalmaz\u00f3 t\u00f6mb\u00f6n.</li> <li>Megh\u00edvjuk a rendez\u00e9si algoritmusunkat a sz\u00f6vegeket tartalmaz\u00f3 t\u00f6mb\u00f6n.</li> </ol> <p>Ebben a p\u00e9ld\u00e1ban a bubbleSort met\u00f3dus egy generikus t\u00edpus\u00fa t\u00f6mb\u00f6t vesz \u00e1t, amely implement\u00e1lja a <code>Comparable</code> interf\u00e9szt. Ez a met\u00f3dus alkalmazza a bubor\u00e9krendez\u00e9st a t\u00f6mb elemein, hogy n\u00f6vekv\u0151 sorrendbe rendezze \u0151ket. \u00cdgy l\u00e9trehoztunk egy \u00e1ltal\u00e1nos rendez\u00e9si algoritmust, amit b\u00e1rmilyen oszt\u00e1ly objektumain tudunk haszn\u00e1lni, ha azok implement\u00e1lj\u00e1k a <code>Comparable</code> interf\u00e9szt.</p> <code>Comparable</code> interf\u00e9szr\u0151l b\u0151vebben Comparable interface<pre><code>public interface Comparable&lt;T&gt; {\nint compareTo(T o);\n}\n</code></pre> <p>Az <code>int</code> <code>compareTo(T o)</code> met\u00f3dus az interf\u00e9sz egyetlen absztrakt met\u00f3dusa. Ezt a met\u00f3dust az oszt\u00e1lyoknak kell   megval\u00f3s\u00edtaniuk, \u00e9s vissza kell adniuk egy negat\u00edv, pozit\u00edv vagy nulla \u00e9rt\u00e9ket att\u00f3l f\u00fcgg\u0151en, hogy az aktu\u00e1lis objektum   kisebb, nagyobb vagy egyenl\u0151-e a m\u00e1sik objektummal. A Java be\u00e9p\u00edtett oszt\u00e1lyai k\u00f6z\u00fcl sok t\u00e1maszkodik az interf\u00e9szre,    hogy rel\u00e1ci\u00f3ba \u00e1ll\u00edtson fel k\u00fcl\u00f6nb\u00f6z\u0151 objektumok k\u00f6z\u00f6tt. Ha szeretn\u00e9nk, hogy az oszt\u00e1lyunk rendezhet\u0151 legyen valamilyen logika ment\u00e9n   nek\u00fcnk is implement\u00e1lni kell a <code>Comperable</code> interf\u00e9szt az oszt\u00e1lyunkban.</p>"},{"location":"java_se_8_3/","title":"Java Collection Framework","text":""},{"location":"java_se_8_3/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A gy\u0171jtem\u00e9nyek (vagy m\u00e1s n\u00e9ven t\u00e1rol\u00f3k, kont\u00e9nerek, kollekci\u00f3k) olyan t\u00edpuskonstrukci\u00f3s eszk\u00f6z\u00f6k, melynek c\u00e9lja egy vagy t\u00f6bb t\u00edpusba tartoz\u00f3 objektumok mem\u00f3ri\u00e1ban t\u00f6rt\u00e9n\u0151 \u00f6sszefoglal\u00f3 jelleg\u0171 t\u00e1rol\u00e1sa, manipul\u00e1l\u00e1sa \u00e9s lek\u00e9rdez\u00e9se.</p> <p>Ebben a szekci\u00f3ban megismerked\u00fcnk a java gy\u0171jtem\u00e9ny keretrendszerrel (Java Collections Framework, JCF), ami egy egys\u00e9ges architekt\u00fara a gy\u0171jtem\u00e9nyek haszn\u00e1lat\u00e1ra \u00e9s manipul\u00e1l\u00e1s\u00e1ra. A gy\u0171jtem\u00e9ny keretrendszer tartalmazza:</p> <ul> <li>interf\u00e9szek: absztrakt adatt\u00edpusok reprezent\u00e1ci\u00f3ja. Az interf\u00e9szek lehet\u0151v\u00e9 teszik a gy\u0171jtem\u00e9nyek   szolg\u00e1ltat\u00e1sainak (   publikus interf\u00e9sz\u00e9nek) megval\u00f3s\u00edt\u00e1s-f\u00fcggetlen \u00e1br\u00e1zol\u00e1s\u00e1t.</li> <li>implement\u00e1ci\u00f3k: a gy\u0171jtem\u00e9ny interf\u00e9szek konkr\u00e9t implement\u00e1ci\u00f3i. F\u0151k\u00e9nt ezek az \u00fajrafelhaszn\u00e1lhat\u00f3 adatstrukt\u00far\u00e1k.</li> <li>algoritusok: azok a met\u00f3dusok, amelyek hasznos m\u0171veleteket val\u00f3s\u00edtanak meg, mint p\u00e9ld\u00e1ul a keres\u00e9s vagy a rendez\u00e9s   egy   objektumon, ami implement\u00e1lhat\u00f3 k\u00fcl\u00f6nb\u00f6z\u0151 gy\u0171jtem\u00e9ny interf\u00e9szeken. Ezeket az algoritmusokat t\u00f6bbalak\u00fanak h\u00edvjuk:   azonos met\u00f3dus haszn\u00e1lhat\u00f3 k\u00fcl\u00f6nb\u00f6z\u0151 implement\u00e1ci\u00f3k eset\u00e9n is. Els\u0151sorban az algoritmusok \u00fajrafelhaszn\u00e1lhat\u00f3   funkcionalit\u00e1sa.</li> </ul>"},{"location":"java_se_8_3/#jfc-architektura","title":"JFC architekt\u00fara","text":"<p>A Java Collections Framework (JCF) architekt\u00far\u00e1ja hierarchikus strukt\u00far\u00e1ban van kialak\u00edtva, amelynek k\u00f6z\u00e9ppontj\u00e1ban az interf\u00e9szek \u00e9s oszt\u00e1lyok kollekci\u00f3s kateg\u00f3ri\u00e1i \u00e1llnak. A k\u00f6vetkez\u0151kben n\u00e9zz\u00fck meg a JCF architekt\u00far\u00e1j\u00e1t a legfontosabb komponensekkel.</p> <p></p>"},{"location":"java_se_8_3/#collection","title":"Collection","text":"<p>A <code>Collection</code> a gy\u0171jtem\u00e9ny hierarchia gy\u00f6kere. A <code>Collection</code> objektumok csoportj\u00e1t reprezent\u00e1lja, amiket elemeknek h\u00edvjuk. A <code>Collection</code> interf\u00e9sz a legkisebb k\u00f6z\u00f6s nevez\u0151 a gy\u0171jtem\u00e9ny implement\u00e1ci\u00f3k k\u00f6z\u00f6tt, \u00e9s akkor \u00e9rdemes ezt v\u00e1lasztani, ha a lehet\u0151 legnagyobb rugalmass\u00e1gra van sz\u00fcks\u00e9g. A gy\u0171jtem\u00e9nyek n\u00e9h\u00e1ny t\u00edpusa enged\u00e9lyezi az elemek duplik\u00e1l\u00e1s\u00e1t, a t\u00f6bbi pedig nem. A gy\u0171jtem\u00e9nyek n\u00e9h\u00e1ny t\u00edpusa rendezett, a t\u00f6bbi nem rendezett. A Java platform nem biztos\u00edt k\u00f6zvetlen implement\u00e1ci\u00f3t ehhez az interf\u00e9szhez, ehelyett a sokkal specifikusabb al-interf\u00e9szeket implement\u00e1lja.</p>"},{"location":"java_se_8_3/#set","title":"Set","text":"<p>Ez a gy\u0171jtem\u00e9ny nem tartalmazhat duplik\u00e1lt elemeket. Ezt az interf\u00e9szt halmazok t\u00e1rol\u00e1s\u00e1ra szokt\u00e1k haszn\u00e1lni, mint p\u00e9ld\u00e1ul a fut\u00f3 processzek halmaza.</p>"},{"location":"java_se_8_3/#fontosabb-set-metodusok","title":"Fontosabb Set met\u00f3dusok","text":"<ul> <li><code>add(E element)</code>: Hozz\u00e1adja az elemet a halmazhoz, vagy nem csin\u00e1l semmit, ha m\u00e1r benne van.</li> <li><code>remove(Object o)</code>: Elt\u00e1vol\u00edtja az adott elemet a halmazb\u00f3l, ha l\u00e9tezik.</li> <li><code>contains(Object o)</code>: Ellen\u0151rzi, hogy az elem szerepel-e a halmazban.</li> <li><code>size()</code>: Visszaadja a halmaz m\u00e9ret\u00e9t.</li> <li><code>isEmpty()</code>: Ellen\u0151rzi, hogy a halmaz \u00fcres-e.</li> <li><code>clear()</code>: Kit\u00f6rli az \u00f6sszes elemet a halmazb\u00f3l.</li> <li><code>iterator()</code>: Visszaadja az iter\u00e1tort a halmaz bej\u00e1r\u00e1s\u00e1hoz.</li> </ul>"},{"location":"java_se_8_3/#set-megvalositasok","title":"Set megval\u00f3s\u00edt\u00e1sok","text":"<p>A k\u00e9t legt\u00f6bbet haszn\u00e1lt <code>Set</code> implement\u00e1ci\u00f3 a Java Collections Framework-ben:</p> <p>HashSet</p> <p>A <code>HashSet</code> a legelterjedtebb \u00e9s leggyakrabban haszn\u00e1lt <code>Set</code> implement\u00e1ci\u00f3. Amikor egy elemet hozz\u00e1adunk a <code>HashSet</code>-hez az <code>add</code> met\u00f3dussal, a <code>HashSet</code> az elem <code>hash</code> \u00e9rt\u00e9k\u00e9t kisz\u00e1m\u00edtja a <code>hash</code> f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel.</p> <p>Ezut\u00e1n a hash \u00e9rt\u00e9ket a <code>HashSet</code> egy bels\u0151 strukt\u00far\u00e1ban (\u00e1ltal\u00e1ban hash t\u00e1bl\u00e1ban) haszn\u00e1lja, hogy meghat\u00e1rozza, hova helyezze el az \u00faj elemet a halmazban. A hash \u00e9rt\u00e9k alapj\u00e1n egy bucket-be (v\u00f6d\u00f6r) ker\u00fcl, amely tartalmazhat egy vagy t\u00f6bb elemet.</p> <p>Amikor egy elemet keres\u00fcnk a <code>HashSet</code>-ben a <code>contains</code> met\u00f3dus seg\u00edts\u00e9vel, el\u0151sz\u00f6r a hash f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel kisz\u00e1m\u00edtjuk az elem hash \u00e9rt\u00e9k\u00e9t. Ezut\u00e1n a <code>HashSet</code> megn\u00e9zi az adott hash \u00e9rt\u00e9khez tartoz\u00f3 v\u00f6dr\u00f6t, \u00e9s csak ebben a v\u00f6d\u00f6rben keresi az elemet. Ez a l\u00e9p\u00e9s jelent\u0151sen gyors\u00edtja a keres\u00e9st, mivel csak n\u00e9h\u00e1ny elemmel kell \u00f6sszehasonl\u00edtani az adott v\u00f6d\u00f6rben.</p> A hash f\u00fcggv\u00e9ny <p>A hash f\u00fcggv\u00e9ny egy olyan matematikai f\u00fcggv\u00e9ny, amely bemeneti adatokat (\u00e1ltal\u00e1ban tetsz\u0151leges hossz\u00faakat) \u00e1talak\u00edt egy r\u00f6gz\u00edtett m\u00e9ret\u0171 (\u00e1ltal\u00e1ban r\u00f6videbb) k\u00f3dd\u00e1 vagy \"hash \u00e9rt\u00e9kk\u00e9\". A hash f\u00fcggv\u00e9nyeknek az a c\u00e9ljuk, hogy a bemeneti adatokb\u00f3l olyan kimenetet hozzanak l\u00e9tre, amely egy\u00e9rtelm\u0171en reprezent\u00e1lja a bemeneti adatokat, \u00e9s lehet\u0151v\u00e9 teszi a hat\u00e9kony keres\u00e9st \u00e9s \u00f6sszehasonl\u00edt\u00e1st.</p> <p>TreeSet</p> <p>A <code>TreeSet</code> egy rendezett halmaz, ami azt jelenti, hogy az elemek alap\u00e9rtelmezett vagy egy adott sorrend szerint ker\u00fclnek rendez\u00e9sre. A <code>TreeSet</code> az alap\u00e9rtelmezett rendez\u00e9s vagy egy meghat\u00e1rozott kompar\u00e1tor alapj\u00e1n sorolja fel az elemeket. A <code>TreeSet</code> m\u00f6g\u00f6tt \u00e1ll\u00f3 adatszerkezet egy kiegyens\u00falyozott bin\u00e1ris keres\u0151fa, amely lehet\u0151v\u00e9 teszi hat\u00e9kony keres\u00e9seket, tartom\u00e1ny-kiv\u00e1laszt\u00e1sokat \u00e9s iter\u00e1ci\u00f3kat.</p> Kiegyens\u00falyozott bin\u00e1ris keres\u0151fa <p>A kiegyens\u00falyozott bin\u00e1ris keres\u0151fa (Balanced Binary Search Tree vagy AVL Tree) egy speci\u00e1lis t\u00edpus\u00fa bin\u00e1ris keres\u0151fa, amely garant\u00e1lja, hogy a fa magass\u00e1ga minden beilleszt\u00e9s vagy elt\u00e1vol\u00edt\u00e1s ut\u00e1n k\u00f6zel azonos marad. Ennek eredm\u00e9nyek\u00e9nt a keres\u00e9s, besz\u00far\u00e1s \u00e9s t\u00f6rl\u00e9s m\u0171veletek \u00e1tlagosan gyorsabbak, mivel a fa magass\u00e1ga korl\u00e1tozott \u00e9s az elemek egyenletesen oszlanak el.</p> <p>Amikor v\u00e1lasztani kell a k\u00e9t implement\u00e1ci\u00f3 k\u00f6z\u00f6tt, \u00e9rdemes m\u00e9rlegelni az alkalmaz\u00e1s ig\u00e9nyeit. Ha a rendezetts\u00e9g fontos \u00e9s gyakran keres\u00e9seket v\u00e9gez\u00fcnk, akkor a <code>TreeSet</code> lehet a jobb v\u00e1laszt\u00e1s. Ha a rendezetts\u00e9g nem kritikus, \u00e9s a teljes\u00edtm\u00e9ny az els\u0151dleges szempont, akkor a <code>HashSet</code> \u00e1ltal\u00e1ban jobban teljes\u00edt.</p>"},{"location":"java_se_8_3/#pelda","title":"P\u00e9lda","text":"<pre><code>import java.util.HashSet;\nimport java.util.Set;\npublic class SetExample {\npublic static void main(String[] args) {\nSet&lt;String&gt; fruits = new HashSet&lt;&gt;();\nfruits.add(\"Apple\");\nfruits.add(\"Banana\");\nfruits.add(\"Apple\");  // (1)\nSystem.out.println(\"M\u00e9ret: \" + fruits.size());\nfruits.remove(\"Banana\");\nSystem.out.println(\"Tartalmazza a Grapefruit-et? \" + fruits.contains(\"Grapefruit\"));\nfor (String fruit : fruits) {\nSystem.out.println(fruit);\n}\n}\n}\n</code></pre> <ol> <li>Nem lesz hozz\u00e1adva, mert a halmaz m\u00e1r tartalmazza az Apple sz\u00f3t.</li> </ol> <p>Ebben a p\u00e9ld\u00e1ban egy <code>HashSet</code> implement\u00e1ci\u00f3t haszn\u00e1lunk a <code>Set</code> interf\u00e9sz bemutat\u00e1s\u00e1ra. Az <code>add</code> met\u00f3dussal hozz\u00e1adunk elemeket a halmazhoz, majd a <code>remove</code> met\u00f3dussal elt\u00e1vol\u00edtunk egy elemet. A <code>contains</code> met\u00f3dussal ellen\u0151rizz\u00fck, hogy a halmaz tartalmazza-e a megadott elemet. V\u00e9g\u00fcl egy <code>for-each</code> ciklussal bej\u00e1rjuk \u00e9s ki\u00edrjuk az \u00f6sszes elemet a halmazban.</p>"},{"location":"java_se_8_3/#list","title":"List","text":"<p>A <code>List</code> rendezetts\u00e9get biztos\u00edt\u00f3 gy\u0171jtem\u00e9ny, n\u00e9ha szekvenci\u00e1nak is h\u00edvj\u00e1k. A list\u00e1k tartalmazhatnak duplik\u00e1lt elemeket. A lista felhaszn\u00e1l\u00f3ja eg\u00e9sz index seg\u00edts\u00e9g\u00e9vel hozz\u00e1 tud f\u00e9rni az elemekhez (hasonl\u00f3an a t\u00f6mb\u00f6k indexel\u00e9s\u00e9hez), valamint lehet\u0151s\u00e9get kap a lista egyszer\u0171 bej\u00e1r\u00e1s\u00e1hoz. A <code>List</code> seg\u00edts\u00e9g\u00e9vel hat\u00e9konyan lehet dinamikus m\u00e9ret\u0171 list\u00e1kat kezelni \u00e9s manipul\u00e1lni.</p>"},{"location":"java_se_8_3/#fontosabb-list-metodusok","title":"Fontosabb List met\u00f3dusok","text":"<ul> <li><code>add(E element)</code>: Hozz\u00e1adja az elemet a list\u00e1hoz a v\u00e9g\u00e9re.</li> <li><code>add(int index, E element)</code>: Hozz\u00e1adja az elemet a megadott indexre a list\u00e1ban, eltolva a t\u00f6bbi elemet.</li> <li><code>get(int index)</code>: Visszaadja az adott index\u0171 elemet.</li> <li><code>set(int index, E element)</code>: Fel\u00fcl\u00edrja az adott index\u0171 elemet az \u00faj elemmel.</li> <li><code>remove(int index)</code>: Elt\u00e1vol\u00edtja az adott index\u0171 elemet.</li> <li><code>size()</code>: Visszaadja a lista m\u00e9ret\u00e9t.</li> <li><code>contains(Object o)</code>: Ellen\u0151rzi, hogy az elem szerepel-e a list\u00e1ban.</li> <li><code>indexOf(Object o)</code>: Visszaadja az els\u0151 el\u0151fordul\u00e1s\u00fa elem index\u00e9t a list\u00e1ban, vagy -1-et, ha nincs benne.</li> </ul>"},{"location":"java_se_8_3/#list-megvalositasok","title":"List megval\u00f3s\u00edt\u00e1sok","text":"<p>A k\u00e9t legt\u00f6bbet haszn\u00e1lt <code>List</code> implement\u00e1ci\u00f3 a Java Collections Framework-ben:</p> <p>ArrayList</p> <p>Az <code>ArrayList</code> egy dinamikus m\u00e9ret\u0171 t\u00f6mb\u00f6t reprezent\u00e1l. Az elemeket egy t\u00f6mbben t\u00e1rolja, \u00e9s ha az adatokat hozz\u00e1adjuk vagy elt\u00e1vol\u00edtjuk, az <code>ArrayList</code> dinamikusan n\u00f6veli vagy cs\u00f6kkenti a t\u00f6mb m\u00e9ret\u00e9t. Az <code>ArrayList</code> gyors hozz\u00e1f\u00e9r\u00e9st \u00e9s gyors v\u00e9letlenszer\u0171 hozz\u00e1ad\u00e1st \u00e9s elt\u00e1vol\u00edt\u00e1st k\u00edn\u00e1l. Az \u00e1tlagos esetben az <code>ArrayList</code> gyorsabb az adat hozz\u00e1f\u00e9r\u00e9s\u00e9ben, mivel a t\u00f6mb elemei k\u00f6zvetlen\u00fcl el\u00e9rhet\u0151k index alapj\u00e1n.</p> <p>LinkedList</p> <p>A <code>LinkedList</code> egy k\u00e9tir\u00e1ny\u00fa l\u00e1ncolt list\u00e1t reprezent\u00e1l. Minden elem rendelkezik egy referenci\u00e1val az el\u0151z\u0151 \u00e9s a k\u00f6vetkez\u0151 elemre. A <code>LinkedList</code> hat\u00e9konyabb, ha gyakran sz\u00fcks\u00e9g van az elemek besz\u00far\u00e1s\u00e1ra vagy elt\u00e1vol\u00edt\u00e1s\u00e1ra a list\u00e1ban. Az elemek k\u00f6z\u00f6tti besz\u00far\u00e1s \u00e9s elt\u00e1vol\u00edt\u00e1s gyorsabb lehet, mint az <code>ArrayList</code>-n\u00e9l, de az elemek hozz\u00e1f\u00e9r\u00e9se lassabb, mivel nem k\u00f6zvetlen\u00fcl el\u00e9rhet\u0151k index alapj\u00e1n, hanem v\u00e9gig kell menni a l\u00e1ncolaton.</p> <p>Amikor v\u00e1lasztani kell a k\u00e9t implement\u00e1ci\u00f3 k\u00f6z\u00f6tt, \u00e9rdemes \u00e1tgondolni, hogy milyen m\u0171veleteket kell gyakran elv\u00e9gezni a list\u00e1n, \u00e9s mi a priorit\u00e1s: gyors adatel\u00e9r\u00e9s vagy hat\u00e9kony besz\u00far\u00e1s/elt\u00e1vol\u00edt\u00e1s.</p>"},{"location":"java_se_8_3/#pelda_1","title":"P\u00e9lda","text":"<pre><code>import java.util.ArrayList;\nimport java.util.List;\npublic class ListExample {\npublic static void main(String[] args) {\nList&lt;String&gt; names = new ArrayList&lt;&gt;();\nnames.add(\"Alice\");\nnames.add(\"Bob\");\nnames.add(\"Eve\");\nSystem.out.println(\"M\u00e1sodik n\u00e9v: \" + names.get(1));\nnames.remove(0);\nfor (String name : names) {\nSystem.out.println(name);\n}\n}\n}\n</code></pre> <p>Ebben a p\u00e9ld\u00e1ban egy <code>ArrayList</code> implement\u00e1ci\u00f3t haszn\u00e1lunk a <code>List</code> interf\u00e9sz bemutat\u00e1s\u00e1ra. Az <code>add</code> met\u00f3dussal hozz\u00e1adunk elemeket a list\u00e1hoz, a <code>get</code> met\u00f3dussal lek\u00e9rj\u00fck egy adott index\u0171 elemet, majd az <code>remove</code> met\u00f3dussal elt\u00e1vol\u00edtjuk az els\u0151 elemet. A <code>for-each</code> ciklussal bej\u00e1rjuk \u00e9s ki\u00edrjuk az \u00f6sszes elemet a list\u00e1ban.</p>"},{"location":"java_se_8_3/#queue","title":"Queue","text":"<p>A <code>Queue</code> egy olyan kollekci\u00f3 t\u00edpust defini\u00e1l, amely egy sorban t\u00e1rolja az elemeket, \u00e9s a sorrend fontos szerepet j\u00e1tszik az elemek kezel\u00e9s\u00e9ben. A <code>Queue</code> a FIFO (First-In-First-Out) elvet k\u00f6veti, ami azt jelenti, hogy az els\u0151k\u00e9nt hozz\u00e1adott elem az els\u0151, amelyet kivesz\u00fcnk a sorb\u00f3l.</p>"},{"location":"java_se_8_3/#fontosabb-queue-metodusok","title":"Fontosabb Queue met\u00f3dusok","text":"<ul> <li><code>add(E e)</code>: Hozz\u00e1ad egy elemet a sor v\u00e9g\u00e9hez.</li> <li><code>offer(E e)</code>: Hasonl\u00f3an hozz\u00e1ad egy elemet a sor v\u00e9g\u00e9hez, de visszat\u00e9r hamis \u00e9rt\u00e9kkel, ha nem siker\u00fclt hozz\u00e1adni.</li> <li><code>remove()</code>: Elt\u00e1vol\u00edtja \u00e9s visszaadja a sor els\u0151 elem\u00e9t.</li> <li><code>poll()</code>: Elt\u00e1vol\u00edtja \u00e9s visszaadja a sor els\u0151 elem\u00e9t, vagy null-t, ha \u00fcres.</li> <li><code>peek()</code>: Visszaadja a sor els\u0151 elem\u00e9t an\u00e9lk\u00fcl, hogy elt\u00e1vol\u00edtan\u00e1.</li> </ul>"},{"location":"java_se_8_3/#queue-megvalositasok","title":"Queue megval\u00f3s\u00edt\u00e1sok","text":"<p>Az egyik leggyakrabban haszn\u00e1lt <code>Queue</code> implement\u00e1ci\u00f3 a Java Collections Framework-ben a <code>LinkedList</code>. A <code>LinkedList</code> egyar\u00e1nt alkalmas <code>List</code> \u00e9s <code>Queue</code> implement\u00e1ci\u00f3k\u00e9nt is.</p>"},{"location":"java_se_8_3/#pelda_2","title":"P\u00e9lda","text":"<pre><code>import java.util.LinkedList;\nimport java.util.Queue;\npublic class QueueExample {\npublic static void main(String[] args) {\nQueue&lt;String&gt; queue = new LinkedList&lt;&gt;();\nqueue.offer(\"First\");\nqueue.offer(\"Second\");\nqueue.offer(\"Third\");\nSystem.out.println(\"Els\u0151 elem: \" + queue.peek());\nwhile (!queue.isEmpty()) {\nSystem.out.println(\"Kivett elem: \" + queue.poll());\n}\n}\n}\n</code></pre> <p>Ebben a p\u00e9ld\u00e1ban a <code>LinkedList</code> implement\u00e1ci\u00f3t haszn\u00e1ljuk, hogy a Queue haszn\u00e1lat\u00e1t bemutassuk. A <code>offer</code> met\u00f3dussal hozz\u00e1adjuk az elemeket a sorhoz, a <code>peek</code> met\u00f3dussal megn\u00e9zz\u00fck az els\u0151 elemet, majd a <code>poll</code> met\u00f3dussal folyamatosan kivessz\u00fck \u00e9s ki\u00edrjuk az \u00f6sszes elemet a sorb\u00f3l.</p>"},{"location":"java_se_8_3/#map","title":"Map","text":"<p>A <code>Map</code> olyan adatszerkezetet defini\u00e1l, amely kulcs-\u00e9rt\u00e9k p\u00e1rokat t\u00e1rol. A kulcs-\u00e9rt\u00e9k p\u00e1rok egyedi kulcsokhoz vannak rendelve, \u00e9s a kulcsok seg\u00edts\u00e9g\u00e9vel lehet hozz\u00e1f\u00e9rni az \u00e9rt\u00e9kekhez. A <code>Map</code> seg\u00edts\u00e9g\u00e9vel hat\u00e9konyan lehet azonos\u00edt\u00f3kat t\u00e1rolni \u00e9s az azokhoz tartoz\u00f3 adatokat kezelni.</p>"},{"location":"java_se_8_3/#fontosabb-map-metodusok","title":"Fontosabb Map met\u00f3dusok","text":"<ul> <li><code>put(K key, V value)</code>: Egy \u00faj kulcs-\u00e9rt\u00e9k p\u00e1rt ad hozz\u00e1 a t\u00e9rk\u00e9phez, vagy friss\u00edti a megl\u00e9v\u0151 p\u00e1rt, ha a kulcs m\u00e1r   l\u00e9tezik.</li> <li><code>get(Object key)</code>: Visszaadja a megadott kulcshoz tartoz\u00f3 \u00e9rt\u00e9ket, vagy null-t, ha a kulcs nem tal\u00e1lhat\u00f3.</li> <li><code>remove(Object key)</code>: Elt\u00e1vol\u00edtja a megadott kulcshoz tartoz\u00f3 p\u00e1rt a kollekci\u00f3b\u00f3l.</li> <li><code>containsKey(Object key)</code>: Ellen\u0151rzi, hogy a <code>Map</code> tartalmazza-e a megadott kulcsot.</li> <li><code>keySet()</code>: Visszaadja a <code>Map</code> kulcsainak halmaz\u00e1t.</li> <li><code>values()</code>: Visszaadja a <code>Map</code> \u00e9rt\u00e9keinek halmaz\u00e1t.</li> <li><code>entrySet()</code>: Visszaadja a kulcs-\u00e9rt\u00e9k p\u00e1rok halmaz\u00e1t.</li> </ul>"},{"location":"java_se_8_3/#map-megvalositasok","title":"Map megval\u00f3s\u00edt\u00e1sok","text":"<p>A k\u00e9t leggyakrabban haszn\u00e1lt <code>Map</code> implement\u00e1ci\u00f3 a Java Collections Framework-ben:</p> <p>HashMap</p> <p>A <code>HashMap</code> egy hash t\u00e1bl\u00e1t haszn\u00e1l az elemek t\u00e1rol\u00e1s\u00e1ra. A hash t\u00e1bla egy olyan adatszerkezet, amely egy kulcs-\u00e9rt\u00e9k p\u00e1rok gyors keres\u00e9s\u00e9re \u00e9s el\u00e9r\u00e9s\u00e9re szolg\u00e1l. Az elemek hash k\u00f3dj\u00e1t haszn\u00e1lja arra, hogy megtal\u00e1lja, hol kell fizikailag t\u00e1rolni az adott \u00e9rt\u00e9ket.</p> <p>TreeMap</p> <p>A TreeMap egy kiegyens\u00falyozott bin\u00e1ris keres\u0151f\u00e1t haszn\u00e1l az elemek t\u00e1rol\u00e1s\u00e1ra. Ez a keres\u0151fa a kulcsokat rendezetten t\u00e1rolja, \u00edgy az elemek k\u00f6z\u00f6tti keres\u00e9s \u00e9s hozz\u00e1f\u00e9r\u00e9s hat\u00e9konyabb.</p> <p>Amikor v\u00e1lasztani kell a k\u00e9t implement\u00e1ci\u00f3 k\u00f6z\u00f6tt, \u00e9rdemes m\u00e9rlegelni az alkalmaz\u00e1s ig\u00e9nyeit. Ha a rendezetts\u00e9g fontos \u00e9s gyakran keres\u00e9seket v\u00e9gez\u00fcnk, akkor a <code>TreeMap</code> lehet a jobb v\u00e1laszt\u00e1s. Ha a rendezetts\u00e9g nem kritikus, \u00e9s a teljes\u00edtm\u00e9ny az els\u0151dleges szempont, akkor a <code>HashMap</code> \u00e1ltal\u00e1ban jobban teljes\u00edt.</p>"},{"location":"java_se_8_3/#pelda_3","title":"P\u00e9lda","text":"<pre><code>import java.util.HashMap;\nimport java.util.Map;\npublic class MapExample {\npublic static void main(String[] args) {\nMap&lt;String, Integer&gt; grades = new HashMap&lt;&gt;();\ngrades.put(\"Alice\", 95);\ngrades.put(\"Bob\", 87);\ngrades.put(\"Eve\", 78);\nSystem.out.println(\"Bob jegye: \" + grades.get(\"Bob\"));\nfor (Map.Entry&lt;String, Integer&gt; entry : grades.entrySet()) {\nSystem.out.println(entry.getKey() + \": \" + entry.getValue());\n}\n}\n}\n</code></pre> <p>Ebben a p\u00e9ld\u00e1ban egy <code>HashMap</code> implement\u00e1ci\u00f3t haszn\u00e1lunk a <code>Map</code> interf\u00e9sz bemutat\u00e1s\u00e1ra. A <code>put</code> met\u00f3dussal adunk hozz\u00e1 kulcs-\u00e9rt\u00e9k p\u00e1rokat a sz\u00f3t\u00e1rhoz, a <code>get</code> met\u00f3dussal lek\u00e9rj\u00fck egy kulcshoz tartoz\u00f3 \u00e9rt\u00e9ket. A <code>entrySet</code> met\u00f3dussal bej\u00e1rjuk az \u00f6sszes kulcs-\u00e9rt\u00e9k p\u00e1rt \u00e9s ki\u00edrjuk az \u00e9rt\u00e9keket.</p>"},{"location":"java_se_8_3/#sajat-tipusok-kollekcioi","title":"Saj\u00e1t t\u00edpusok kollekci\u00f3i","text":"<p>Ahogy kor\u00e1bban m\u00e1r megismerkedt\u00fcnk vele a saj\u00e1t t\u00edpusok \u00f6sszehasonl\u00edt\u00e1s\u00e1ra nem haszn\u00e1lhatjuk az <code>==</code> oper\u00e1tort, mert a legt\u00f6bb esetben az egyenl\u0151s\u00e9g vizsg\u00e1l\u00e1t\u00e1n\u00e1l mi nem a mem\u00f3ria c\u00edmek egyez\u00e9s\u00e9re vagyunk k\u00edv\u00e1ncsiak. A bemutatott kollekci\u00f3k k\u00f6z\u00fcl t\u00f6bb eset\u00e9ben sz\u00fcks\u00e9g\u00fcnk van tov\u00e1bbi met\u00f3dusok elhelyez\u00e9s\u00e9re az oszt\u00e1lyunkban, hogy azok az elv\u00e1rt m\u00f3don m\u0171k\u00f6djenek.</p>"},{"location":"java_se_8_3/#equals","title":"equals()","text":"<p>Ahhoz, hogy egy kollekci\u00f3ban egy elem tartalmaz\u00e1s\u00e1t vizsg\u00e1lni tudjuk, a saj\u00e1t oszt\u00e1lyunknak mindenk\u00e9ppen implement\u00e1lnia kell az <code>equals()</code> met\u00f3dust. A kor\u00e1bban bemutatott <code>Set</code> adatszerkezet csak akkor tudja a sz\u00e1munkra elv\u00e1rt m\u00f3don garant\u00e1lni az elemek egyedis\u00e9g\u00e9t, ha az <code>equals()</code> met\u00f3dus megfelel\u0151en implement\u00e1lva van az oszt\u00e1lyunkban.</p> <p>Egy j\u00f3l meg\u00edrt <code>equals()</code> f\u00fcggv\u00e9nynek az al\u00e1bbi krit\u00e9riumoknak kell megfelelnie:</p> <ul> <li>reflex\u00edv: Egy objektumnak egyenl\u0151nek kell lennie \u00f6nmag\u00e1val.</li> <li>szimmetrikus: Az <code>x.equals(y)</code>-nak ugyan azzal az \u00e9rt\u00e9kkel kell visszat\u00e9rnie mint az <code>y.equals(x)</code>.</li> <li>tranzit\u00edv: Ha <code>x.equals(y)</code> \u00e9s <code>y.equals(z)</code>, akkor <code>x.equals(z)</code>-nek is igaznak kell lennie.</li> <li>konzisztens: Az <code>equals()</code> \u00e9rt\u00e9k\u00e9nek csak akkor szabad v\u00e1ltoznia, ha a met\u00f3dusban felhaszn\u00e1lt valamelyik adattag   \u00e9rt\u00e9ke v\u00e1ltozik, nem lehet v\u00e9letlenszer\u0171s\u00e9get haszn\u00e1lni.</li> </ul>"},{"location":"java_se_8_3/#hashcode","title":"hashCode()","text":"<p>Olyan adatszerkezetekn\u00e9l, amik valamilyen <code>hash</code>-el\u00e9si elj\u00e1r\u00e1st haszn\u00e1lnak az elemek t\u00e1rol\u00e1sa sor\u00e1n fontos, hogy implement\u00e1ljuk <code>hashCode()</code> met\u00f3dust. A met\u00f3dus feladata, hogy valamilyen <code>hash</code> k\u00f3dot rendeljen az objektumunkhoz. Amit p\u00e9ld\u00e1ul egy <code>HashSet</code> haszn\u00e1lni tud az elemek t\u00e1rol\u00e1sa sor\u00e1n.</p> <p>Egy j\u00f3l meg\u00edrt <code>hashCode()</code> f\u00fcggv\u00e9nynek az al\u00e1bbi krit\u00e9riumoknak kell megfelelnie:</p> <ul> <li>bels\u0151 konzisztencia: A <code>hashCode()</code> \u00e9rt\u00e9ke, csak akkor v\u00e1ltozhat, ha egy olyan attrib\u00fatum \u00e9rt\u00e9ke v\u00e1ltozik, ami   az <code>equals()</code> met\u00f3dusban is haszn\u00e1lva volt.</li> <li>egyenl\u0151s\u00e9g konzisztencia: Az <code>equals()</code> met\u00f3dos szerint egyenl\u0151 objektumok <code>hash</code> \u00e9rt\u00e9ke meg kell, hogy egyezzen.</li> <li>\u00fctk\u00f6z\u00e9s: A nem egyforma objektumoknak is lehet egyforma <code>hash</code> \u00e9rt\u00e9k\u00fck, azonban minimaliz\u00e1lni szeretn\u00e9nk az   \u00fctk\u00f6z\u00e9sek gyakoris\u00e1g\u00e1t.</li> </ul>"},{"location":"java_se_8_3/#compareto","title":"compareTo()","text":"<p>Ahogy kor\u00e1bban l\u00e1ttuk az oszt\u00e1lyunknak lehet\u0151s\u00e9ge van implement\u00e1lni a <code>Comparable</code> interf\u00e9szt. Az interf\u00e9sz el\u0151\u00edrja a <code>compareTo()</code> met\u00f3dust, amivel az objektumaink k\u00f6z\u00f6tt tudunk rel\u00e1ci\u00f3t fel\u00e1ll\u00edtsani. Az olyan adatszerkezetek, amelyek az adatokat rendezve t\u00e1rolj\u00e1k erre a <code>compareTo()</code> met\u00f3dusra t\u00e1maszkodnak a rendez\u00e9s fel\u00e1ll\u00edt\u00e1sa sor\u00e1n, \u00edgy ha a saj\u00e1t logik\u00e1nk szerint szeretn\u00e9nk rendez\u00e9st fel\u00e1ll\u00edtani az objektumaink k\u00f6z\u00f6tt implement\u00e1ltunk kell a <code>compareTo()</code> met\u00f3dust.</p>"},{"location":"java_se_8_3/#comparable-es-comparator-interfesz","title":"Comparable \u00e9s Comparator interf\u00e9sz","text":"<p>Az objektumok \u00f6sszehasonl\u00edt\u00e1sa elengedhetetlen a sz\u00e1mos alkalmaz\u00e1sban, k\u00fcl\u00f6n\u00f6sen azokban, ahol rendezni vagy keresni kell elemeket. A Java nyelvben k\u00e9t fontos interf\u00e9sz \u00e1ll rendelkez\u00e9sre az objektumok \u00f6sszehasonl\u00edt\u00e1s\u00e1hoz a <code>Comparable</code> \u00e9s a <code>Comparator</code>.</p>"},{"location":"java_se_8_3/#comparable-interfesz","title":"Comparable interf\u00e9sz","text":"<p>A <code>java.lang.Comparable</code> interf\u00e9sz egy egyszer\u0171 m\u00f3dszert defini\u00e1l, amely seg\u00edt az objektumok term\u00e9szetes rendez\u00e9si sorrendj\u00e9nek meghat\u00e1roz\u00e1s\u00e1ban.</p> Comparable.java<pre><code>public interface Comparable&lt;T&gt; {\nint compareTo(T o);\n}\n</code></pre> <p>A <code>compareTo</code> met\u00f3dus egy eg\u00e9sz sz\u00e1mot ad vissza, annak f\u00fcggv\u00e9ny\u00e9ben, hogy az \u00f6sszehasonl\u00edtott objektumok milyen rel\u00e1ci\u00f3ban \u00e1llnak.</p> <ul> <li>Negat\u00edv sz\u00e1m: Az aktu\u00e1lis objektum kisebb, mint a param\u00e9terk\u00e9nt kapott objektum.</li> <li>Nulla: Az aktu\u00e1lis objektum \u00e9s a param\u00e9terk\u00e9nt kapott objektum megegyezik.</li> <li>Pozit\u00edv sz\u00e1m: Az aktu\u00e1lis objektum nagyobb, mint a param\u00e9terk\u00e9nt kapott objektum.</li> </ul> <p>A legt\u00f6bb be\u00e9p\u00edtett oszt\u00e1ly, mint a String oszt\u00e1ly is m\u00e1r implement\u00e1lja a <code>Comparable</code> interf\u00e9szt, \u00edgy a <code>Collections.sort()</code> met\u00f3dus automatikusan haszn\u00e1lhat\u00f3 a rendez\u00e9shez, azonban lehet\u0151s\u00e9g\u00fcnk van a saj\u00e1t oszt\u00e1lyainkban is implement\u00e1lni az interf\u00e9szt.</p> <pre><code>class Book implements Comparable&lt;Book&gt; {\nprivate int id;\nprivate String title;\nprivate String author;\nprivate int publicationYear;\npublic Book(int id, String title, String author, int publicationYear) {\nthis.id = id;\nthis.title = title;\nthis.author = author;\nthis.publicationYear = publicationYear;\n}\n// Getterek \u00e9s setterek\n@Override\npublic int compareTo(Book other) {\n// K\u00f6nyveket az id alapj\u00e1n rendezz\u00fck a compareTo met\u00f3dusban.\nreturn Integer.compare(this.id, other.id); // (1)\n}\n@Override\npublic String toString() {\nreturn \"Book{\" +\n\"id=\" + id +\n\", title='\" + title + '\\'' +\n\", author='\" + author + '\\'' +\n\", publicationYear=\" + publicationYear +\n'}';\n}\n}\n</code></pre> <ol> <li>Megfigyelhetj\u00fck, hogy az <code>Integer</code> oszt\u00e1ly rendelkezik saj\u00e1t compare met\u00f3dussal, amit felhaszn\u00e1lhatunk a mi    \u00f6sszehasonl\u00edt\u00e1sunk sor\u00e1n is. Az oszt\u00e1ly compare met\u00f3dusa az al\u00e1bbi k\u00e9ppen n\u00e9z ki:     <pre><code>  public static int compare(int x,int y){\nreturn(x&lt;y)?-1:((x==y)?0:1);\n}\n</code></pre></li> </ol>"},{"location":"java_se_8_3/#comparator-interfesz","title":"Comparator interf\u00e9sz","text":"<p>A <code>java.util.Comparator</code> interf\u00e9sz egy rugalmasabb megk\u00f6zel\u00edt\u00e9st k\u00edn\u00e1l az objektumok \u00f6sszehasonl\u00edt\u00e1s\u00e1ra. Ezt az interf\u00e9szt haszn\u00e1lhatjuk olyan helyzetekben, ahol a term\u00e9szetes rendez\u00e9sen t\u00fal m\u00e1s \u00f6sszehasonl\u00edt\u00e1si szab\u00e1lyokat is alkalmazni szeretn\u00e9nk.</p> Comparator.java<pre><code>public interface Comparator&lt;T&gt; {\nint compare(T o1, T o2);\n}\n</code></pre> <p>A <code>compare</code> met\u00f3dus az \u00f6sszehasonl\u00edt\u00e1s eredm\u00e9ny\u00e9t adja vissza, hasonl\u00f3an a <code>compareTo</code> met\u00f3dushoz, azonban itt nem a saj\u00e1t objektumunk ker\u00fcl \u00f6sszehasonl\u00edt\u00e1sra a param\u00e9terben kapott objektummal, hanem az els\u0151 argumentum a m\u00e1sodikkal.</p> <p>Az el\u0151z\u0151 p\u00e9ld\u00e1nkat kieg\u00e9sz\u00edtve lehet\u0151s\u00e9g\u00fcnk van egy \u00faj Comparator oszt\u00e1lyt l\u00e9trehozni, ami a k\u00f6nyvek azonos\u00edt\u00f3ja helyett a k\u00f6nyvek c\u00edm\u00e9t haszn\u00e1lja a rendez\u00e9s fel\u00e1ll\u00edt\u00e1s\u00e1ra.</p> <pre><code>class TitleComparator implements Comparator&lt;Book&gt; {\n@Override\npublic int compare(Book book1, Book book2) {\n// K\u00f6nyveket c\u00edm alapj\u00e1n rendezz\u00fck.\nreturn book1.getTitle().compareTo(book2.getTitle());\n}\n}\n</code></pre>"},{"location":"java_se_8_3/#comparable-vagy-comparator","title":"Comparable vagy Comparator?","text":"<p>A <code>Comparable</code> interf\u00e9szt \u00e1ltal\u00e1ban akkor haszn\u00e1ljuk, ha az objektumoknak van egy meghat\u00e1rozott term\u00e9szetes rendez\u00e9si sorrendje. Ezt a rendez\u00e9st az oszt\u00e1lyon bel\u00fcl defini\u00e1ljuk a <code>compareTo</code> met\u00f3dus seg\u00edts\u00e9g\u00e9vel.</p> <p>A <code>Comparator</code> interf\u00e9szt haszn\u00e1ljuk akkor, amikor a rendez\u00e9si sorrendet dinamikusan vagy k\u00fcl\u00f6nb\u00f6z\u0151 szempontok alapj\u00e1n akarjuk m\u00f3dos\u00edtani. P\u00e9ld\u00e1ul egy adott oszt\u00e1lyhoz t\u00f6bbf\u00e9le rendez\u00e9si szab\u00e1lyt alkalmazhatunk k\u00fcl\u00f6nb\u00f6z\u0151 <code>Comparator</code> implement\u00e1ci\u00f3kkal.</p>"},{"location":"java_se_8_3/#utility-osztalyok","title":"Utility oszt\u00e1lyok","text":"<p>A Java Collections Framework (JCF) tartalmaz olyan seg\u00e9doszt\u00e1lyokat is, amelyek megk\u00f6nny\u00edtik \u00e9s kib\u0151v\u00edtik a kollekci\u00f3k ( list\u00e1k, halmazok stb.) kezel\u00e9s\u00e9t. Ezek az oszt\u00e1lyok a <code>java.util</code> csomagban tal\u00e1lhat\u00f3k.</p>"},{"location":"java_se_8_3/#collections","title":"Collections","text":"<p>A <code>java.util.Collections</code> oszt\u00e1ly a Java Collections Framework r\u00e9sze, \u00e9s k\u00fcl\u00f6nf\u00e9le seg\u00e9dmet\u00f3dusokat k\u00edn\u00e1l a kollekci\u00f3k kezel\u00e9s\u00e9hez \u00e9s manipul\u00e1l\u00e1s\u00e1hoz.</p>"},{"location":"java_se_8_3/#segedmetodusok","title":"Seg\u00e9dmet\u00f3dusok","text":"<p>A <code>sort()</code> met\u00f3dus a kollekci\u00f3 elemeit rendezett sorrendbe rendezi. Haszn\u00e1lat\u00e1hoz a kollekci\u00f3 elemeinek \u00f6sszehasonl\u00edthat\u00f3nak kell lenni\u00fck, vagyis implement\u00e1lniuk kell a <code>Comperable</code> interf\u00e9szt.</p> <pre><code>        List&lt;Integer&gt; numbers=new ArrayList&lt;&gt;(Arrays.asList(5,2,8,1,9));\nCollections.sort(numbers);\n</code></pre> <p>A <code>reverse()</code> a kollekci\u00f3 elemeinek sorrendj\u00e9t megford\u00edtja.</p> <pre><code>        List&lt;String&gt; names=new ArrayList&lt;&gt;(Arrays.asList(\"Alice\",\"Bob\",\"Charlie\"));\nCollections.reverse(names);\n</code></pre> <p>A <code>shuffle()</code> a kollekci\u00f3 elemeit v\u00e9letlenszer\u0171en \u00f6sszekeveri</p> <pre><code>        List&lt;String&gt; names=new ArrayList&lt;&gt;(Arrays.asList(\"Alice\",\"Bob\",\"Charlie\"));\nCollections.shuffle(names);\n</code></pre> <p>A <code>min()</code> \u00e9s <code>max()</code> visszaadja a kollekci\u00f3 legkisebb \u00e9s legnagyobb elem\u00e9t.</p> <pre><code>        List&lt;Integer&gt; numbers=new ArrayList&lt;&gt;(Arrays.asList(5,2,8,1,9));\nint minValue=Collections.min(numbers);\nint maxValue=Collections.max(numbers);\n</code></pre> <p>A <code>binarySearch()</code> bin\u00e1ris keres\u00e9st v\u00e9gez a rendezett kollekci\u00f3ban egy adott elemre, \u00e9s visszaadja az index\u00e9t.</p> <pre><code>        List&lt;String&gt; words=Arrays.asList(\"apple\",\"banana\",\"cherry\",\"date\");\nint index=Collections.binarySearch(words,\"banana\");\n</code></pre> <p>A <code>frequency()</code> megsz\u00e1molja, hogy egy adott elem h\u00e1nyszor fordul el\u0151 a kollekci\u00f3ban.</p> <pre><code>        List&lt;String&gt; fruits=Arrays.asList(\"apple\",\"banana\",\"apple\",\"cherry\");\nint frequency=Collections.frequency(fruits,\"apple\");\n</code></pre> <p>Az <code>emptyList()</code>, <code>emptySet()</code> \u00e9s <code>emptyMap()</code> \u00fcres \u00e9s m\u00f3dos\u00edthatatlan list\u00e1t, halmazt \u00e9s map-et hoz l\u00e9tre.</p> <pre><code>        List&lt;String&gt; emptyList=Collections.emptyList();\nSet&lt;Integer&gt; emptySet=Collections.emptySet();\nMap&lt;String, Integer&gt; emptyMap=Collections.emptyMap();\n</code></pre>"},{"location":"java_se_8_3/#arrays","title":"Arrays","text":"<p>A <code>java.util.Arrays</code> oszt\u00e1ly k\u00fcl\u00f6nb\u00f6z\u0151 seg\u00e9dmet\u00f3dusokat k\u00edn\u00e1l a t\u00f6mb\u00f6k egyszer\u0171 kezel\u00e9s\u00e9hez.</p>"},{"location":"java_se_8_3/#segedmetodusok_1","title":"Seg\u00e9dmet\u00f3dusok","text":"<p>A <code>sort()</code> a t\u00f6mb elemeit rendezett sorrendbe rendezi. Haszn\u00e1lat\u00e1hoz a t\u00f6mb elemeinek \u00f6sszehasonl\u00edthat\u00f3nak kell lenni\u00fck.</p> <pre><code>        int[]numbers={5,2,8,1,9};\nArrays.sort(numbers);\n</code></pre> <p>A <code>binarySearch()</code> bin\u00e1ris keres\u00e9st v\u00e9gez a rendezett t\u00f6mbben egy adott elemre, \u00e9s visszaadja az index\u00e9t.</p> <pre><code>        String[]words={\"apple\",\"banana\",\"cherry\",\"date\"};\nint index=Arrays.binarySearch(words,\"banana\");\n</code></pre> <p>A <code>copyOf()</code>: L\u00e9trehoz egy \u00faj t\u00f6mb\u00f6t, amely tartalmazza a megadott eredeti t\u00f6mb elemeit, \u00e9s megadott m\u00e9ret\u0171 vagy kisebb.</p> <pre><code>        int[]sourceArray={1,2,3};\nint[]newArray=Arrays.copyOf(sourceArray,5);\n</code></pre> <p>Az <code>equals()</code> \u00f6sszehasonl\u00edtja k\u00e9t t\u00f6mb tartalm\u00e1t, \u00e9s visszat\u00e9r igaz \u00e9rt\u00e9kkel, ha az elemeik egyeznek.</p> <pre><code>        int[]array1={1,2,3};\nint[]array2={1,2,3};\nboolean areEqual=Arrays.equals(array1,array2);\n</code></pre> <p>A <code>fill()</code> az \u00f6sszes t\u00f6mbelemet az adott \u00e9rt\u00e9kre \u00e1ll\u00edtja.</p> <pre><code>        char[]chars=new char[5];\nArrays.fill(chars,'X');\n</code></pre>"},{"location":"java_se_8_3_ex/","title":"Java Collection Framework gyakorl\u00f3 feladatok","text":""},{"location":"java_se_8_3_ex/#1-feladat","title":"1. Feladat","text":"<p>K\u00e9sz\u00edts\u00fcnk egy programot, amely eg\u00e9sz sz\u00e1mokat olvass be a konzol bemenetr\u0151l, am\u00edg negat\u00edv sz\u00e1mot nem ad meg a felhaszn\u00e1l\u00f3! Ha negat\u00edv sz\u00e1mot adott meg, \u00edrjuk ki a sz\u00e1mokat n\u00f6vekv\u0151 sorrendben.</p>"},{"location":"java_se_8_3_ex/#2-feladat","title":"2. Feladat","text":"<p>Olvassuk be az al\u00e1bbi unique.txt f\u00e1jlt \u00e9s minden sor\u00e1t adjuk hozz\u00e1 egy <code>Set</code>-hez. Mivel a <code>Set</code> defin\u00edci\u00f3 szerint nem tartalmazhat duplik\u00e1tumokat, ez\u00e9rt a halmaz m\u00e9rete megegyezik a f\u00e1jlban tal\u00e1lhat\u00f3 egyedi \u00e9rt\u00e9kek sz\u00e1m\u00e1val. \u00cdrjuk ki a konzolra, hogy h\u00e1ny egyedi \u00e9rt\u00e9k volt a f\u00e1jlban.</p>"},{"location":"java_se_8_3_ex/#3-feladat","title":"3. Feladat","text":"<p>Adott egy sz\u00f6veg, ami szavakb\u00f3l \u00e1ll. K\u00e9sz\u00edts egy programot, ami megsz\u00e1molja, hogy melyik sz\u00f3 h\u00e1nyszor szerepel a sz\u00f6vegben. A program kimenete egy <code>Map</code> legyen, ahol a kulcs a sz\u00f3, az \u00e9rt\u00e9k pedig a sz\u00f3 el\u0151fordul\u00e1sainak sz\u00e1ma.</p>"},{"location":"java_se_8_3_ex/#4-feladat","title":"4. Feladat","text":"<p>Vegy\u00fck az al\u00e1bbi di\u00e1k oszt\u00e1lyt.</p> <pre><code>public class Student implements Comparable&lt;Student&gt; {\nprivate final String name;\nprivate final int age;\nprivate final int height;\npublic Student(String name, int age, int height) {\nthis.name = name;\nthis.age = age;\nthis.height = height;\n}\n//getter, setter \u00e9s toString met\u00f3dusok\n@Override\npublic int compareTo(Student o) {\n// TODO\nreturn 0;\n}\n}\n</code></pre> <p>Val\u00f3s\u00edtsd meg az oszt\u00e1lyban tal\u00e1lhat\u00f3 <code>compareTo</code> met\u00f3dust, ami a di\u00e1kokat a nev\u00fck alapj\u00e1n rendezi. K\u00e9sz\u00edts egy list\u00e1t 5 di\u00e1kkal \u00e9s \u00edrd ki a konzolra a list\u00e1t rendezve.</p>"},{"location":"java_se_8_3_ex/#5-feladat","title":"5. Feladat","text":"<p>Az el\u0151z\u0151 <code>Student</code> oszt\u00e1lyhoz, k\u00e9sz\u00edts egy <code>StudentAgeComparator</code> \u00e9s egy <code>StudentHeightComparator</code> oszt\u00e1lyt. A <code>StudentAgeComparator</code> a di\u00e1kokat az \u00e9letkoruk szerint rendezi m\u00edg a <code>StudentHeightComparator</code> a magass\u00e1guk szerint. K\u00e9sz\u00edts egy list\u00e1t 5 di\u00e1kkal \u00e9s \u00edrd ki a konzolra a list\u00e1t rendezve mind a k\u00e9t <code>Comparator</code> oszt\u00e1lyt felhaszn\u00e1lva.</p>"},{"location":"java_se_8_3_ex/#6-feladat","title":"6. Feladat","text":"<p>Vegy\u00fck az al\u00e1bbi probl\u00e9m\u00e1t, van egy f\u00e1jlunk amiben emberek email c\u00edmei \u00e9s telefonsz\u00e1mai vannak vegyesen.</p> <pre><code>Angela Williams 331-744-1775\nMichele Burrows 162-374-5521\nTammy Deyoung tammydeyoung@neo.com\nKarl Duff 647-088-9812\nValerie Hartl valerie_hartl@outlook.com\nDawn Walters 329-152-8053\nJeanne Wishman 499-444-3400\nJames Brock james.brock@gmail.com\nKathleen Deshay kathleendeshay@icloud.com\nGuy Hughley guy.hughley@brevo.com\nScott Prather 786-688-0112\nLisa Boice 220-686-1590\n</code></pre> <p>A f\u00e1jlban vegyesen vannak az emberek email c\u00edmei \u00e9s telefonsz\u00e1mai, vannak duplik\u00e1lt elemek \u00e9s nem tudjuk, hogy egy n\u00e9vhez h\u00e1ny email c\u00edm \u00e9s telefonsz\u00e1m tartozik. A feladatunk az lesz, hogy minden szem\u00e9lyhez \u00f6ssze szedj\u00fck a hozz\u00e1 tartoz\u00f3 email c\u00edmeket \u00e9s telefonsz\u00e1mokat kisz\u0171rve a duplik\u00e1tumokat.</p>"},{"location":"java_se_8_3_ex/#7-feladat","title":"7. Feladat","text":"<p>K\u00e9sz\u00edts egy programot, ami k\u00fcl\u00f6nb\u00f6z\u0151 aut\u00f3k co2 kibocs\u00e1jt\u00e1si adatait olvassa be \u00e9s dolgozza fel. Az alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se sor\u00e1n a <code>FuelType</code> enumot \u00e9s a <code>CarEmissionInfo</code> oszt\u00e1lyt haszn\u00e1ld.</p> <pre><code>public enum FuelType {\nREGULAR_GASOLINE, //X\nPREMIUM_GASOLINE, //Z\nDIESEL, // D\nE85, //E\nNATURAL_GAS, // N\nUNKNOWN\n}\n</code></pre> <p>Egy enum a k\u00fcl\u00f6nb\u00f6z\u0151 \u00fczemanyag t\u00edpusokkal.</p> <pre><code>public class CarEmissionInfo {\nprivate final String manufacturer;\nprivate final String model;\nprivate final double engineSize;\nprivate final FuelType fuelType;\nprivate final int co2Emission;\npublic CarEmissionInfo(String manufacturer, String model, double engineSize, FuelType fuelType, int co2Emission) {\nthis.manufacturer = manufacturer;\nthis.model = model;\nthis.engineSize = engineSize;\nthis.fuelType = fuelType;\nthis.co2Emission = co2Emission;\n}\n//... Getter, setter, toString met\u00f3dusok\n}\n</code></pre> <p>Az aut\u00f3 adatait tartalmaz\u00f3 oszt\u00e1ly.</p> <p>A feladatod az emission.csv f\u00e1jl beolvas\u00e1sa \u00e9s az objektumok elt\u00e1rol\u00e1sa egy megfelel\u0151 adatszerkezetbe.</p> <ul> <li>Val\u00f3s\u00edtsd meg az al\u00e1bbi met\u00f3dusokat:<ul> <li><code>getMinCo2Emission</code> - T\u00e9rjen vissza a legkisebb co2 emission \u00e9rt\u00e9kkel.</li> <li><code>getMaxCo2Emission</code> - T\u00e9rjen vissza a legnagyobb co2 emission \u00e9rt\u00e9kkel.</li> <li><code>getUniqueEngineSizeCount</code> - T\u00e9rjen a k\u00fcl\u00f6nb\u00f6z\u0151 motor m\u00e9retek sz\u00e1m\u00e1val.</li> <li><code>getAllManufacturer</code> - T\u00e9rjen vissza egy list\u00e1val, ami tartalmazza az \u00f6sszes k\u00fcl\u00f6nb\u00f6z\u0151 gy\u00e1rt\u00f3t.</li> <li><code>getAllEmissionInfoByEngineSize</code> - T\u00e9rjen vissza egy list\u00e1val, ami az \u00f6sszes <code>CarEmissionInfo</code> objektumot   tartalmazza, aminek a motorm\u00e9rete megegyezik a param\u00e9ter\u00fcl kapott motor m\u00e9rettel. Ha nincs egyez\u00e9s t\u00e9rjen vissza   \u00fcres list\u00e1val.</li> <li><code>getAllEmissionInfoOrderByCo2EmissionDesc</code> - T\u00e9rjen vissza a list\u00e1val a <code>Co2Emission</code> \u00e9rt\u00e9k szerint cs\u00f6kken\u0151   sorrendben.</li> <li><code>getEmissionInfoGroupByFuelType</code> - T\u00e9rjen vissza egy <code>Map</code> adatszerkezettel, ahol a kulcs <code>FuelType</code> \u00e9s az \u00e9rt\u00e9k   egy lista, azokkal a <code>CarEmissionInfo</code> objektumokkal, amelyeknek az \u00fczemanyagt\u00edpusa megegyezik a kulccsal.</li> </ul> </li> </ul>"},{"location":"java_se_8_3_ex/#8-feladat","title":"8. Feladat","text":"<p>N\u00e9zz\u00fck az al\u00e1bbi <code>otos.csv</code> f\u00e1jlt (ez egy\u00e9bk\u00e9nt a https://bet.szerencsejatek.hu/jatekok/otoslotto/sorsolasok c\u00edmr\u0151l t\u00f6lthet\u0151 le), \u00e9s olvasd be. A f\u00e1jl pontosvessz\u0151vel (<code>;</code>) elv\u00e1lasztva t\u00e1rolja a mez\u0151ket, az al\u00e1bbi form\u00e1tumban.</p> \u00c9v H\u00e9t H\u00faz\u00e1sd\u00e1tum 5 tal\u00e1lat (db) 5 tal\u00e1lat (Ft) 4 tal\u00e1lat (db) 4 tal\u00e1lat (Ft) 3 tal\u00e1lat (db) 3 tal\u00e1lat (Ft) 2 tal\u00e1lat (db) 2 tal\u00e1lat (Ft) Sz\u00e1mok 2023 28 2023.07.15. 0 0 Ft 20 2 088 310 Ft 2160 20 255 Ft 61381 2 430 Ft 27  56  75  76  81 2023 27 2023.07.08. 1 1 724 177 660 Ft 48 950 325 Ft 2975 16 065 Ft 76481 2 130 Ft 4  17  55  67  89 2023 26 2023.07.01. 0 0 Ft 17 2 556 520 Ft 2467 18 455 Ft 63441 2 445 Ft 18  42  44  48  86 <p>\u00cdrj egy <code>LottoStatistic</code> oszt\u00e1lyt \u00e9s val\u00f3s\u00edtsd meg az al\u00e1bbi met\u00f3dusokat:</p> <ul> <li>mostFrequentNumber() - T\u00e9rjen vissza a legt\u00f6bbett kih\u00fazott sz\u00e1mmal</li> <li>leastFrequentNumber() - T\u00e9rjen vissza a legkevesebbet kih\u00fazott sz\u00e1mmal</li> <li>highestPrize() - \u00cdrja ki a konzolra, hogy mekkora volt a legnagyobb kifizet\u00e9s \u00e9s mikor t\u00f6rt\u00e9nt.</li> <li>highestPrizes() - \u00cdrja ki a konzolra, hogy mekkora volt az 5 legnagyobb kifizet\u00e9s.</li> <li>myNumbers(Set numbers) - A met\u00f3dus kapjon 5 sz\u00e1mot \u00e9s n\u00e9zze meg, nyert-e valamikor \u00e9s ha igen, h\u00e1nyszor. <li>getNumbers(int year, int week) - T\u00e9rjen vissza, az adott heti nyertes sz\u00e1mokkal.</li> <li>numberStatistics() - T\u00e9rjen vissza egy Map-el amiben minden sz\u00e1mhoz rendeld hozz\u00e1, hogy h\u00e1nyszor lett kih\u00fazva.</li> <li>numberStatistics_2() - T\u00e9rjen vissza egy Map-el amiben minden sz\u00e1mhoz rendeld hozz\u00e1, mely heteken ker\u00fcltek kih\u00faz\u00e1sra.</li>"},{"location":"resources/feladat/","title":"\u00d3rai feladat","text":"<ol> <li> <p>K\u00e9sz\u00edts egy Jatek oszt\u00e1lyt! T\u00e1rold egy a j\u00e1t\u00e9k nev\u00e9t,neh\u00e9zs\u00e9gi szintj\u00e9t (0-10 k\u00f6z\u00f6tti eg\u00e9sz sz\u00e1m, be\u00e1ll\u00edt\u00e1skor ezt ellen\u0151rizd le. Ha 0-n\u00e1l kisebb \u00e9rt\u00e9ket kap, 0 legyen, ha 10-n\u00e9l nagyobbat, 10 legyen) Tov\u00e1bb\u00e1 t\u00e1rold le azt, hogy a j\u00e1t\u00e9k milyen Konzolon! Hozz l\u00e9tre az adattagoknak megfelel\u0151en egy param\u00e9teres konstruktort! Hozz l\u00e9tre egy GitGud \u00e9s egy NemTamogatottJatek nev\u0171 kiv\u00e9tel oszt\u00e1lyt, melyek rendelkezzenek egy default \u00e9s egy param\u00e9teres konstruktorral is!</p> </li> <li> <p>Hozz l\u00e9tre egy Konzol nev\u0171, absztrakt oszt\u00e1lyt! T\u00e1rold le a konzol nev\u00e9t, valamint legyen egy absztrakt jatszik met\u00f3dusa, mely egy Jatek, valamint egy eg\u00e9sz sz\u00e1m (skill) t\u00edpus\u00fa param\u00e9tert v\u00e1r, GitGud \u00e9s NemTamogatottJatek t\u00edpus\u00fa kiv\u00e9teleket dobhat. K\u00e9sz\u00edts egy, az adattagnak megfelel\u0151 param\u00e9teres konstruktort is!</p> </li> <li> <p>K\u00e9sz\u00edts egy Jatekos nev\u0171 oszt\u00e1lyt is! T\u00e1rold el a j\u00e1t\u00e9kos nev\u00e9t, skillj\u00e9t (0-10 k\u00f6z\u00f6tti eg\u00e9sz sz\u00e1m, be\u00e1ll\u00edt\u00e1skor ezt is ellen\u0151rizd le). T\u00e1rolj tov\u00e1bb\u00e1 egy darab Konzolt \u00e9s egy Jatek list\u00e1t is a j\u00e1t\u00e9kosn\u00e1l! K\u00e9sz\u00edts megfelel\u0151 param\u00e9teres konstruktort. Legyen egy kockul met\u00f3dusa, amely v\u00e9gigmegy a j\u00e1t\u00e9kos \u00e1ltal birtokolt j\u00e1t\u00e9kokon \u00e9s mindegyikkel megpr\u00f3b\u00e1l j\u00e1tszani (mindegyikre megh\u00edvja a birtokolt Konzol jatek met\u00f3dus\u00e1t). Amennyiben sikeres a j\u00e1t\u00e9k (nem dobott kiv\u00e9telt), a j\u00e1t\u00e9kos skill-je n\u00f6vekedjen eggyel. Ellenkez\u0151 esetben \u00edrd ki az alap\u00e9rtelmezett hibakimenetre, hogy melyik j\u00e1t\u00e9kos mely j\u00e1t\u00e9kot nem tudta v\u00e9gigj\u00e1tszani.</p> </li> <li> <p>Sz\u00e1rmaztass a Konzol oszt\u00e1lyb\u00f3l egy XBOX \u00e9s egy Playstation oszt\u00e1lyt is! Mindkett\u0151 egy default konstruktorral rendelkezzen, melyek be\u00e1ll\u00edtj\u00e1k a konzol nev\u00e9t (\u201cXBOX One\u201d vagy \u201cPlaystation 5\u201d)! XBOX eset\u00e9ben a jatek met\u00f3dus megval\u00f3s\u00edt\u00e1sa a k\u00f6vetkez\u0151. Megkapja param\u00e9terben a j\u00e1t\u00e9kot, valamint a j\u00e1t\u00e9kos skillj\u00e9t. Azonban csak azokkal a j\u00e1t\u00e9kokkal lehet j\u00e1tszani, melyek az adott konzolhoz val\u00f3ak. Ha egy j\u00e1t\u00e9k nem ehhez a konzolhoz val\u00f3, dobj NemTamogatottJatek t\u00edpus\u00fa kiv\u00e9telt! Ellenkez\u0151 esetben vizsg\u00e1ld le, hogy a j\u00e1t\u00e9kos skillje hogy alakul az aktu\u00e1lis j\u00e1t\u00e9k neh\u00e9zs\u00e9g\u00e9hez. XBOX eset\u00e9n olyan j\u00e1t\u00e9kot k\u00e9pes v\u00e9gigj\u00e1tszani melynek neh\u00e9zs\u00e9ge maximum 2-vel nehezebb, mint a j\u00e1t\u00e9kos aktu\u00e1lis skillje. Amennyiben nem tudja v\u00e9gigj\u00e1tszani a j\u00e1t\u00e9kot, dobj GitGud t\u00edpus\u00fa kiv\u00e9telt! A j\u00e1tszik met\u00f3dus az XBOX-hoz hasonl\u00f3an m\u0171k\u00f6dj\u00f6n, azonban a j\u00e1t\u00e9kos csak olyan j\u00e1t\u00e9kokat tud v\u00e9gigj\u00e1tszani, melyek neh\u00e9zs\u00e9gi szintje maximum a j\u00e1t\u00e9kos skillj\u00e9vel egyezik meg.</p> </li> <li> <p>Hozz l\u00e9tre egy jatekok.csv f\u00e1jlt, amiben vegy\u00e9l fel legal\u00e1bb 5-5 j\u00e1t\u00e9kot mindk\u00e9t konzolhoz, a j\u00e1t\u00e9kok adatai pontosvessz\u0151vel legyenek elv\u00e1lasztva, pl:</p> <p>Grand Theft Auto V;4;XBOX One Bloodborne;8;Playstation 5</p> </li> <li> <p>Olvasd be a jatekok.csv -t egy list\u00e1ba. Hozz l\u00e9tre k\u00e9t Jatekos objektumot egyet Playstation a m\u00e1sikat XBOX konzollal, a skill \u00e9rt\u00e9k\u00fck legyen 2-7 k\u00f6z\u00f6tti random eg\u00e9sz sz\u00e1m \u00e9s a lehets\u00e9ges j\u00e1t\u00e9kok list\u00e1j\u00e1b\u00f3l v\u00e9letlenszer\u0171en rendelj hozz\u00e1 8 darab j\u00e1t\u00e9kot.</p> </li> <li> <p>H\u00edvd meg a mindk\u00e9t j\u00e1t\u00e9kos kockul met\u00f3dus\u00e1t \u00e9s \u00edrd ki melyik j\u00e1t\u00e9kokat siker\u00fclt v\u00e9gigj\u00e1tszania a konzol kimenetre.</p> </li> </ol> <p>A megold\u00e1s sor\u00e1n \u00fcgyelj a Clean Code alapelveinek betart\u00e1s\u00e1ra. B\u00e1rmilyen k\u00fcls\u0151 k\u00f6nyvt\u00e1rat haszn\u00e1lhatsz a megold\u00e1s sor\u00e1n.</p>"}]}